{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Sistema de Gerenciamento de Indicadores de Inspeção\n\n## Overview\nThis is a modern web application built for managing inspection indicators for the Civil Police of Bahia (ASTEC - CORREPOL). The system provides a comprehensive dashboard for tracking inspection data, monitoring deadlines, and generating compliance reports. It's built as a full-stack application using React on the frontend and Express.js on the backend, with a clean and professional interface designed specifically for police inspection management.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\nThe application follows a modern full-stack architecture with clear separation between client and server components:\n\n- **Frontend**: React 18 SPA with TypeScript\n- **Backend**: Express.js REST API with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Styling**: Tailwind CSS with shadcn/ui components\n- **State Management**: React Query for server state\n- **Build Tool**: Vite for development and production builds\n\n## Key Components\n\n### Frontend Architecture\nThe client-side application is organized into several key areas:\n\n1. **Authentication System**: Simple login page with credential validation against hardcoded admin credentials (username: astec.admin, password: Correpol@2025#BA)\n2. **Dashboard Tabs**: Four main sections - General Dashboard, Gallery, Deadlines, and Normalization\n3. **Component Library**: Built using shadcn/ui components for consistent UI/UX\n4. **Data Visualization**: Charts using Recharts library for inspection analytics\n5. **PDF Generation**: Built-in PDF report generation using jsPDF\n\n### Backend Architecture\nThe server-side follows RESTful API principles:\n\n1. **Express Router**: Centralized route management in `/server/routes.ts`\n2. **Storage Layer**: Abstract storage interface with in-memory implementation\n3. **CSV Processing**: PapaParse integration for importing inspection data\n4. **Authentication**: Simple session-based auth with hardcoded credentials\n\n### Database Schema\nThe application uses Drizzle ORM with PostgreSQL, defining two main tables:\n\n1. **Users Table**: Basic user management with username/password\n2. **Inspections Table**: Comprehensive inspection data including:\n   - Basic info (number, unit, department, COORPIN)\n   - Inspection details (date, inspector, non-compliance)\n   - Deadlines and status tracking\n   - Criticality levels\n\n## Data Flow\n\n1. **CSV Import**: System can load inspection data from CSV files on startup\n2. **Authentication Flow**: Users authenticate via login form, credentials stored in localStorage\n3. **Data Filtering**: Interactive filters on the frontend query the backend for filtered results\n4. **Report Generation**: PDF reports generated client-side using inspection data\n5. **Real-time Updates**: React Query manages data fetching and caching\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React 18**: Frontend framework with modern hooks\n- **Express.js**: Backend web framework\n- **TypeScript**: Type safety across the stack\n- **Vite**: Development server and build tool\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: Pre-built React components\n- **Radix UI**: Headless UI primitives\n- **Lucide React**: Icon library\n\n### Data Management\n- **Drizzle ORM**: TypeScript-first PostgreSQL ORM\n- **@neondatabase/serverless**: Postgres database driver\n- **React Query**: Server state management\n- **PapaParse**: CSV parsing library\n\n### Visualization and Reports\n- **Recharts**: Chart library for data visualization\n- **jsPDF**: PDF generation library\n- **date-fns**: Date manipulation utilities\n\n## Deployment Strategy\n\nThe application is configured for deployment on Replit with the following setup:\n\n1. **Development**: Uses Vite dev server with HMR and Express backend\n2. **Production Build**: \n   - Frontend builds to `dist/public` directory\n   - Backend bundles with esbuild for Node.js execution\n3. **Environment Variables**: Requires `DATABASE_URL` for PostgreSQL connection\n4. **Static Assets**: Served through Express in production, Vite in development\n\n### Build Commands\n- `npm run dev`: Development mode with hot reload\n- `npm run build`: Production build for both frontend and backend\n- `npm run start`: Production server startup\n- `npm run db:push`: Database schema migration\n\nThe application is designed to handle police inspection workflows with specific requirements for Brazilian Civil Police operations, including proper Portuguese language support and compliance with internal procedures and reporting standards.\n\n## Recent Changes\n- **2025-08-07**: Sistema finalizado e pronto para deploy - todas as funcionalidades operacionais\n- **2025-08-07**: Corrigido problema de geração de PDF na aba Status Regularização\n- **2025-08-07**: Botões de atualização de status (regularizado/não regularizado/pendente) funcionando perfeitamente\n- **2025-08-07**: Cache do React Query otimizado para atualizações em tempo real\n- **2025-08-07**: jsPDF integrado via CDN para máxima compatibilidade\n- **2025-08-06**: Galeria removida completamente do sistema conforme solicitado pelo usuário\n- **2025-08-06**: Sistema otimizado sem funcionalidades de galeria para melhor performance  \n- **2025-08-06**: Foco nas funcionalidades principais: Dashboard, Relatórios, Status Regularização e Administração\n- **2025-08-06**: Renomeação de \"Controle de Prazos\" para \"Status Regularização\" conforme solicitado\n- **2025-07-25**: Implemented restricted access system for administrative functions\n- **2025-07-25**: Created dual-layer authentication: regular login + administrative password\n- **2025-07-25**: Added secure Excel upload endpoint with authentication middleware\n- **2025-07-25**: Administrative password: ASTEC@Admin#2025!BA (separate from login credentials)\n- **2025-07-25**: New \"Administração\" tab with access control and audit logging\n- **2025-07-25**: Excel processing with automatic date conversion and data validation\n- **2025-07-25**: Session-based admin authentication (expires when browser closes)\n- **2025-07-25**: Updated login credentials to: astec.admin / Correpol@2025#BA\n- **2025-07-25**: Fixed \"Total de Não Conformidades\" label in reports (was showing \"Total de Inspeções\")\n- **2025-07-25**: Implemented non-conformity filtering with dedicated PDF report generation\n- **2025-07-22**: Final database configuration with updated source file: CONCLUSIVA 2 - PRAZO_1753225500658.xlsx  \n- **2025-07-22**: System correctly processes 3,040 authentic non-conformity records from 1,100 unique inspections\n- **2025-07-22**: Enhanced dashboard with values displayed on bar charts and improved visualizations  \n- **2025-07-22**: System ready for production with authentic inspection data reflecting operational reality\n\n## Department Codes\nThe system now uses the correct official department abbreviations:\n- **DEPIN**: Departamento de Polícia do Interior\n- **DEPOM**: Departamento de Polícia Metropolitana  \n- **DENARC**: Departamento Especializado de Investigação e Repressão ao Narcotráfico\n- **DPMCV**: Departamento de Proteção à Mulher, Cidadania e Pessoas Vulneráveis\n- **DHPP**: Departamento de Homicídios e Proteção à Pessoa\n- **DRACO**: Departamento de Repressão e Combate à Corrupção, ao Crime Organizado e à Lavagem de Dinheiro\n- **DEIC**: Departamento Especializado de Investigações Criminais\n- **GDG**: Gabinete do Delegado Geral","size_bytes":7477},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/import-real-data.js":{"content":"import XLSX from 'xlsx';\nimport fs from 'fs';\n\n// Função para converter data serial do Excel para Date\nfunction excelDateToJSDate(excelDate) {\n  if (!excelDate || typeof excelDate !== 'number') return null;\n  \n  // Excel date serial: dias desde 1900-01-01 (com correção para bug do Excel)\n  const excelEpoch = new Date(1900, 0, 1);\n  const jsDate = new Date(excelEpoch.getTime() + (excelDate - 2) * 24 * 60 * 60 * 1000);\n  return jsDate.toISOString().split('T')[0]; // formato YYYY-MM-DD\n}\n\n// Função para extrair ano da data\nfunction getYearFromDate(dateString) {\n  if (!dateString) return null;\n  return new Date(dateString).getFullYear();\n}\n\n// Função para corrigir classificação de departamentos\nfunction corrigirDepartamento(departamento, unidade) {\n  // DRFR e DRFRV são delegacias especializadas, não departamentos\n  // Devem ser reclassificadas para DEIC (Departamento Especializado de Investigações Criminais)\n  if (departamento === 'DRFR' || departamento === 'DRFRV') {\n    return 'DEIC';\n  }\n  return departamento;\n}\n\n// Função para processar os dados das planilhas\nfunction processExcelData() {\n  console.log('Importando dados das planilhas Excel...\\n');\n  \n  // Usar arquivo mais recente disponível no sistema\n  const workbook1 = XLSX.readFile('attached_assets/CONCLUSIVA 2 - PRAZO_1753189803746.xlsx');\n  const worksheet1 = workbook1.Sheets['Gestão Inspeções'];\n  const data1 = XLSX.utils.sheet_to_json(worksheet1, { header: 1 });\n  \n  // Planilha sem prazos\n  const workbook2 = XLSX.readFile('attached_assets/CONCLUSIVA_1753189803747.xlsx');\n  const worksheet2 = workbook2.Sheets['Gestão Inspeções'];\n  const data2 = XLSX.utils.sheet_to_json(worksheet2, { header: 1 });\n  \n  console.log(`Planilha 1 (com prazos): ${data1.length - 1} registros`);\n  console.log(`Planilha 2 (sem prazos): ${data2.length - 1} registros`);\n  \n  const inspections = [];\n  \n  // Processar primeira planilha (com prazos) - TODOS os dados\n  for (let i = 1; i < data1.length; i++) {\n    const row = data1[i];\n    if (!row || row.length < 10) continue;\n    \n    const inspection = {\n      id: inspections.length + 1,\n      numero: String(row[0] || i).padStart(3, '0'),\n      unidadeInspecionada: row[1] || 'N/A',\n      departamento: corrigirDepartamento(row[2] || 'N/A', row[1] || 'N/A'),\n      coorpin: row[3] || 'N/A',\n      dataInspecao: excelDateToJSDate(row[4]),\n      delegadoCorregedor: row[5] || 'N/A',\n      naoConformidade: row[6] || 'N/A',\n      descricaoNaoConformidade: row[7] || 'N/A',\n      providenciasIniciais: row[8] || 'Pendente',\n      providenciasIntermediarias: row[8] || 'Pendente',\n      providenciasConclusivas: row[8] || 'Pendente',\n      dataInicioRegularizacao: excelDateToJSDate(row[9]),\n      diasPrazo: row[10] || 0,\n      dataFimRegularizacao: excelDateToJSDate(row[11]),\n      statusPrazo: row[12] || 'Pendente',\n      dataNovaInspecao: excelDateToJSDate(row[13]),\n      criticidade: row[14] || 'Média'\n    };\n    \n    inspections.push(inspection);\n  }\n  \n  // Processar segunda planilha (sem prazos) - TODOS os dados\n  for (let i = 1; i < data2.length; i++) {\n    const row = data2[i];\n    if (!row || row.length < 8) continue;\n    \n    const inspection = {\n      id: inspections.length + 1,\n      numero: String(row[0] || inspections.length + 1).padStart(3, '0'),\n      unidadeInspecionada: row[1] || 'N/A',\n      departamento: corrigirDepartamento(row[2] || 'N/A', row[1] || 'N/A'),\n      coorpin: row[3] || 'N/A',\n      dataInspecao: excelDateToJSDate(row[4]),\n      delegadoCorregedor: row[5] || 'N/A',\n      naoConformidade: row[6] || 'N/A',\n      descricaoNaoConformidade: row[7] || 'N/A',\n      providenciasIniciais: row[8] || 'Pendente',\n      providenciasIntermediarias: row[8] || 'Pendente',\n      providenciasConclusivas: row[8] || 'Pendente',\n      dataInicioRegularizacao: null,\n      diasPrazo: 0,\n      dataFimRegularizacao: null,\n      statusPrazo: 'Pendente',\n      dataNovaInspecao: null,\n      criticidade: row[9] || 'Média'\n    };\n    \n    inspections.push(inspection);\n  }\n  \n  console.log(`\\nTotal de inspeções processadas: ${inspections.length}`);\n  \n  // Salvar dados em formato JSON\n  fs.writeFileSync('data/real-inspections.json', JSON.stringify(inspections, null, 2));\n  console.log('Dados salvos em: data/real-inspections.json');\n  \n  // Mostrar estatísticas\n  const departments = [...new Set(inspections.map(i => i.departamento))];\n  const criticidades = inspections.reduce((acc, i) => {\n    acc[i.criticidade] = (acc[i.criticidade] || 0) + 1;\n    return acc;\n  }, {});\n  \n  // Estatísticas por ano\n  const anoStats = inspections.reduce((acc, i) => {\n    const ano = getYearFromDate(i.dataInspecao);\n    if (ano) {\n      acc[ano] = (acc[ano] || 0) + 1;\n    }\n    return acc;\n  }, {});\n  \n  console.log(`\\nDepartamentos encontrados: ${departments.length}`);\n  console.log(`Departamentos: ${departments.join(', ')}`);\n  console.log('\\nCriticidades:');\n  Object.entries(criticidades).forEach(([key, value]) => {\n    console.log(`  ${key}: ${value} inspeções`);\n  });\n  console.log('\\nInspeções por Ano:');\n  Object.entries(anoStats).sort().forEach(([ano, count]) => {\n    console.log(`  ${ano}: ${count} inspeções`);\n  });\n  \n  return inspections;\n}\n\n// Executar importação\ntry {\n  if (!fs.existsSync('data')) {\n    fs.mkdirSync('data');\n  }\n  \n  const inspections = processExcelData();\n  console.log('\\n✅ Importação concluída com sucesso!');\n} catch (error) {\n  console.error('❌ Erro durante a importação:', error.message);\n}","size_bytes":5520},"scripts/load-json-data.js":{"content":"import fs from 'fs';\nimport { Pool } from '@neondatabase/serverless';\nimport ws from 'ws';\n\n// Configure WebSocket for serverless\nconst neonConfig = { webSocketConstructor: ws };\n\nasync function loadRealData() {\n  console.log('Carregando dados reais do arquivo JSON...');\n  \n  try {\n    // Read the JSON file\n    const jsonData = fs.readFileSync('../data/real-inspections.json', 'utf8');\n    const inspections = JSON.parse(jsonData);\n    \n    console.log(`Total de registros encontrados: ${inspections.length}`);\n    \n    // Connect to database\n    const pool = new Pool({ connectionString: process.env.DATABASE_URL });\n    \n    // Clear existing data\n    await pool.query('DELETE FROM inspections');\n    console.log('Dados anteriores removidos');\n    \n    // Insert data in batches\n    const batchSize = 500;\n    let totalInserted = 0;\n    \n    for (let i = 0; i < inspections.length; i += batchSize) {\n      const batch = inspections.slice(i, i + batchSize);\n      \n      const values = batch.map(inspection => [\n        inspection.numero,\n        inspection.unidadeInspecionada,\n        inspection.departamento,\n        inspection.coorpin,\n        inspection.dataInspecao,\n        inspection.delegadoCorregedor,\n        inspection.naoConformidade,\n        inspection.descricaoNaoConformidade,\n        inspection.providenciasIniciais,\n        inspection.providenciasIntermediarias,\n        inspection.providenciasConclusivas,\n        inspection.dataInicioRegularizacao,\n        inspection.diasPrazo,\n        inspection.dataFimRegularizacao,\n        inspection.statusPrazo,\n        inspection.dataNovaInspecao,\n        inspection.criticidade\n      ]);\n      \n      const placeholders = values.map((_, index) => \n        `($${index * 17 + 1}, $${index * 17 + 2}, $${index * 17 + 3}, $${index * 17 + 4}, $${index * 17 + 5}, $${index * 17 + 6}, $${index * 17 + 7}, $${index * 17 + 8}, $${index * 17 + 9}, $${index * 17 + 10}, $${index * 17 + 11}, $${index * 17 + 12}, $${index * 17 + 13}, $${index * 17 + 14}, $${index * 17 + 15}, $${index * 17 + 16}, $${index * 17 + 17})`\n      ).join(', ');\n      \n      const flatValues = values.flat();\n      \n      const query = `\n        INSERT INTO inspections (\n          numero, unidade_inspecionada, departamento, coorpin, data_inspecao,\n          delegado_corregedor, nao_conformidade, descricao_nao_conformidade,\n          providencias_iniciais, providencias_intermediarias, providencias_conclusivas,\n          data_inicio_prazo_regularizacao, dias_prazo, data_fim_regularizacao,\n          status_prazo, data_determinada_nova_inspecao, criticidade\n        ) VALUES ${placeholders}\n      `;\n      \n      await pool.query(query, flatValues);\n      totalInserted += batch.length;\n      \n      console.log(`Processados ${totalInserted}/${inspections.length} registros`);\n    }\n    \n    // Verify data\n    const result = await pool.query(`\n      SELECT \n        COUNT(*) as total_records,\n        COUNT(DISTINCT CONCAT(unidade_inspecionada, '-', data_inspecao)) as unique_inspections,\n        EXTRACT(YEAR FROM data_inspecao) as ano,\n        COUNT(*) as quantidade\n      FROM inspections \n      WHERE data_inspecao IS NOT NULL\n      GROUP BY EXTRACT(YEAR FROM data_inspecao)\n      ORDER BY ano\n    `);\n    \n    console.log('\\n✅ Dados carregados com sucesso!');\n    console.log(`Total de registros: ${totalInserted}`);\n    console.log('Distribuição por ano:', result.rows);\n    \n    await pool.end();\n    \n  } catch (error) {\n    console.error('❌ Erro durante o carregamento:', error.message);\n    process.exit(1);\n  }\n}\n\nloadRealData();","size_bytes":3581},"scripts/load-via-api.js":{"content":"import fs from 'fs';\n\nasync function loadDataViaAPI() {\n  console.log('Carregando dados via API...');\n  \n  try {\n    // Read the JSON file\n    const jsonData = fs.readFileSync('../data/real-inspections.json', 'utf8');\n    const inspections = JSON.parse(jsonData);\n    \n    console.log(`Total de registros encontrados: ${inspections.length}`);\n    \n    // Send data in batches via API\n    const batchSize = 100;\n    let totalLoaded = 0;\n    \n    for (let i = 0; i < inspections.length; i += batchSize) {\n      const batch = inspections.slice(i, i + batchSize);\n      \n      try {\n        const response = await fetch('http://localhost:5000/api/inspections/bulk', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ inspections: batch })\n        });\n        \n        if (response.ok) {\n          totalLoaded += batch.length;\n          console.log(`Carregados ${totalLoaded}/${inspections.length} registros`);\n        } else {\n          console.error(`Erro no batch ${i}: ${response.status}`);\n        }\n      } catch (error) {\n        console.error(`Erro ao enviar batch ${i}:`, error.message);\n      }\n    }\n    \n    console.log(`\\n✅ Carregamento concluído: ${totalLoaded} registros`);\n    \n  } catch (error) {\n    console.error('❌ Erro durante o carregamento:', error.message);\n    process.exit(1);\n  }\n}\n\nloadDataViaAPI();","size_bytes":1418},"scripts/process-excel.js":{"content":"import XLSX from 'xlsx';\nimport fs from 'fs';\nimport path from 'path';\n\n// Função para processar planilhas Excel\nfunction processExcelFile(filePath) {\n  console.log(`Processando: ${filePath}`);\n  \n  try {\n    const workbook = XLSX.readFile(filePath);\n    const sheetNames = workbook.SheetNames;\n    console.log(`Planilhas encontradas: ${sheetNames.join(', ')}`);\n    \n    const results = {};\n    \n    sheetNames.forEach(sheetName => {\n      console.log(`\\nProcessando planilha: ${sheetName}`);\n      const worksheet = workbook.Sheets[sheetName];\n      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n      \n      console.log(`Linhas encontradas: ${data.length}`);\n      if (data.length > 0) {\n        console.log(`Cabeçalhos: ${JSON.stringify(data[0])}`);\n        \n        // Mostrar algumas linhas de exemplo\n        for (let i = 1; i < Math.min(4, data.length); i++) {\n          console.log(`Linha ${i}: ${JSON.stringify(data[i])}`);\n        }\n      }\n      \n      results[sheetName] = data;\n    });\n    \n    return results;\n  } catch (error) {\n    console.error(`Erro ao processar ${filePath}:`, error.message);\n    return null;\n  }\n}\n\n// Processar ambas as planilhas\nconst files = [\n  'attached_assets/CONCLUSIVA 2 - PRAZO_1753193607601.xlsx',\n  'attached_assets/CONCLUSIVA_1753193607602.xlsx'\n];\n\nconsole.log('=== ANÁLISE DAS PLANILHAS EXCEL ===\\n');\n\nfiles.forEach(file => {\n  if (fs.existsSync(file)) {\n    const results = processExcelFile(file);\n    if (results) {\n      console.log(`\\n--- RESUMO: ${path.basename(file)} ---`);\n      Object.keys(results).forEach(sheet => {\n        console.log(`Planilha \"${sheet}\": ${results[sheet].length} linhas`);\n      });\n    }\n  } else {\n    console.log(`Arquivo não encontrado: ${file}`);\n  }\n});","size_bytes":1767},"scripts/process-new-excel.js":{"content":"import XLSX from 'xlsx';\nimport fs from 'fs';\n\nfunction convertExcelDate(serialDate) {\n  if (!serialDate || typeof serialDate !== 'number') return null;\n  \n  // Excel serial date conversion (Excel counts from 1900-01-01, but has a bug with 1900 being a leap year)\n  const excelEpoch = new Date(1899, 11, 30); // December 30, 1899\n  const jsDate = new Date(excelEpoch.getTime() + serialDate * 24 * 60 * 60 * 1000);\n  \n  // Return in ISO format for database compatibility\n  return jsDate.toISOString().split('T')[0];\n}\n\nfunction processExcelFile(filePath, sheetName) {\n  console.log(`Processando arquivo: ${filePath}`);\n  \n  try {\n    const workbook = XLSX.readFile(filePath);\n    const worksheet = workbook.Sheets[sheetName];\n    \n    if (!worksheet) {\n      console.log(`Sheet \"${sheetName}\" não encontrada no arquivo ${filePath}`);\n      console.log('Sheets disponíveis:', Object.keys(workbook.Sheets));\n      return [];\n    }\n    \n    const data = XLSX.utils.sheet_to_json(worksheet);\n    console.log(`${data.length} registros encontrados em ${filePath}`);\n    \n    return data.map((row, index) => {\n      // Generate unique ID starting from a high number to avoid conflicts\n      const baseId = filePath.includes('CONCLUSIVA 2') ? 30000 : 20000;\n      \n      // Process dates properly\n      const dataInspecao = convertExcelDate(row['Data da Inspeção'] || row['Data']);\n      const dataFim = convertExcelDate(row['Data Fim da Regularização'] || row['Data Limite'] || row['Prazo']);\n      \n      // Calculate status based on deadline dates\n      function calculateStatus(dataFim) {\n        if (!dataFim) return 'Sem prazo definido';\n        \n        const today = new Date();\n        const deadline = new Date(dataFim);\n        const diffTime = deadline.getTime() - today.getTime();\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        \n        if (diffDays < 0) return 'Prazo expirado';\n        if (diffDays <= 7) return 'Próximo do vencimento';\n        return 'Dentro do prazo';\n      }\n      \n      const statusPrazo = row['Status Prazo para Regularização'] || \n                         row['Status do Prazo'] || \n                         row['Status'] || \n                         (dataFim ? calculateStatus(dataFim) : 'Sem prazo estabelecido');\n      \n      return {\n        id: baseId + index + 1,\n        numero: row['Nº da Inspeção'] || row['Numero'] || (index + 1).toString().padStart(3, '0'),\n        unidadeInspecionada: row['Unidade Inspecionada'] || row['Unidade'] || 'N/A',\n        departamento: row['Departamento'] || 'N/A',\n        dataInspecao: dataInspecao,\n        delegadoCorregedor: row['Delegado Corregedor Responsável'] || row['Delegado Corregedor'] || row['Corregedor'] || 'N/A',\n        naoConformidade: row['Não Conformidade Identificada'] || row['Não Conformidade'] || row['Nao Conformidade'] || 'Não conformidade geral',\n        descricaoNaoConformidade: row['Descrição da Não Conformidade Identificada'] || \n                                  row['Descrição da Não Conformidade'] ||\n                                  row['Descrição'] || \n                                  row['Descricao'] || \n                                  row['Descricao da Nao Conformidade'] ||\n                                  row['Descrição da Não Conformidade Identificada'] ||\n                                  'Descrição não disponível',\n        providenciasConclusivas: row['Providências (Iniciais, Intermediárias, Conclusivas)'] ||\n                                row['Providências Conclusivas'] || \n                                row['Providencias'] || \n                                'Pendente',\n        dataFimRegularizacao: dataFim,\n        statusPrazo: statusPrazo,\n        criticidade: row['Criticidade'] || 'Média',\n        coorpin: row['COORPIN'] || 'N/A'\n      };\n    });\n    \n  } catch (error) {\n    console.error(`Erro ao processar ${filePath}:`, error.message);\n    return [];\n  }\n}\n\nasync function processAllFiles() {\n  const files = [\n    {\n      path: '../attached_assets/CONCLUSIVA 2 - PRAZO_1753225500658.xlsx',\n      sheet: 'Gestão Inspeções'\n    }\n  ];\n  \n  let allInspections = [];\n  \n  for (const file of files) {\n    const data = processExcelFile(file.path, file.sheet);\n    allInspections.push(...data);\n  }\n  \n  // Process data as-is from the spreadsheet\n  // Each row represents a real non-conformity from the inspection\n  const uniqueInspections = allInspections;\n  \n  const uniqueInspectionKeys = new Set();\n  allInspections.forEach(inspection => {\n    const key = `${inspection.unidadeInspecionada}-${inspection.dataInspecao}`;\n    uniqueInspectionKeys.add(key);\n  });\n  \n  console.log(`\\nTotal de inspeções únicas: ${uniqueInspectionKeys.size}`);\n  console.log(`Total de não conformidades: ${uniqueInspections.length}`);\n  \n  // Save to JSON file\n  fs.writeFileSync('../data/real-inspections.json', JSON.stringify(uniqueInspections, null, 2));\n  console.log('Dados salvos em data/real-inspections.json');\n  \n  // Print unit statistics\n  const units = [...new Set(uniqueInspections.map(i => i.unidadeInspecionada))].sort();\n  console.log(`\\nTotal de unidades distintas: ${units.length}`);\n  \n  // Print status distribution\n  const statusCounts = {};\n  uniqueInspections.forEach(item => {\n    statusCounts[item.statusPrazo] = (statusCounts[item.statusPrazo] || 0) + 1;\n  });\n  console.log('\\nDistribuição de status:');\n  Object.entries(statusCounts).forEach(([status, count]) => {\n    console.log(`- ${status}: ${count}`);\n  });\n  \n  return uniqueInspections;\n}\n\nprocessAllFiles();","size_bytes":5589},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\n\n// Estender Request para incluir user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: any;\n    }\n  }\n}\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { loginSchema, insertInspectionSchema, insertControlePrazoSchema } from \"@shared/schema\";\nimport Papa from 'papaparse';\nimport fs from 'fs';\nimport path from 'path';\nimport multer from 'multer';\nimport * as XLSX from 'xlsx';\n\n// Middleware para verificar autenticação\nconst requireAuth = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ success: false, message: 'Token de acesso requerido' });\n    }\n\n    const token = authHeader.substring(7);\n    // Verificar se o token é válido (username:password base64)\n    const decoded = Buffer.from(token, 'base64').toString('utf-8');\n    const [username, password] = decoded.split(':');\n    \n    const user = await storage.getUserByUsername(username);\n    if (!user || user.password !== password) {\n      return res.status(401).json({ success: false, message: 'Credenciais inválidas' });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    res.status(401).json({ success: false, message: 'Token inválido' });\n  }\n};\n\n// Configuração do multer para upload de arquivos\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 50 * 1024 * 1024 // 50MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ||\n        file.mimetype === 'application/vnd.ms-excel') {\n      cb(null, true);\n    } else {\n      cb(new Error('Apenas arquivos Excel (.xlsx, .xls) são permitidos'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication endpoint\n  app.post('/api/login', async (req, res) => {\n    try {\n      const { username, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(username);\n      if (user && user.password === password) {\n        // Gerar token de acesso para uploads protegidos\n        const token = Buffer.from(`${username}:${password}`).toString('base64');\n        res.json({ \n          success: true, \n          user: { id: user.id, username: user.username },\n          accessToken: token\n        });\n      } else {\n        res.status(401).json({ success: false, message: 'Credenciais inválidas' });\n      }\n    } catch (error) {\n      res.status(400).json({ success: false, message: 'Dados inválidos' });\n    }\n  });\n\n  // Get all inspections\n  app.get('/api/inspections', async (req, res) => {\n    try {\n      const inspections = await storage.getAllInspections();\n      res.json(inspections);\n    } catch (error) {\n      res.status(500).json({ error: 'Erro ao buscar inspeções' });\n    }\n  });\n\n  // Autenticação administrativa adicional\n  app.post('/api/admin/authenticate', requireAuth, async (req, res) => {\n    try {\n      const { adminPassword } = req.body;\n      \n      if (!adminPassword) {\n        return res.status(400).json({ success: false, message: 'Senha administrativa é obrigatória' });\n      }\n\n      // Senha administrativa específica (mais segura que as credenciais principais)\n      const ADMIN_PASSWORD = 'ASTEC@Admin#2025!BA';\n      \n      if (adminPassword === ADMIN_PASSWORD) {\n        console.log(`✅ Acesso administrativo concedido para ${req.user.username}`);\n        res.json({ \n          success: true, \n          message: 'Acesso administrativo concedido',\n          user: req.user.username \n        });\n      } else {\n        console.log(`❌ Tentativa de acesso administrativo negada para ${req.user.username}`);\n        res.status(401).json({ success: false, message: 'Senha administrativa incorreta' });\n      }\n    } catch (error) {\n      res.status(500).json({ success: false, message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Upload de planilha Excel protegido por autenticação\n  app.post('/api/admin/upload-excel', requireAuth, upload.single('excel'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: 'Arquivo Excel é obrigatório' });\n      }\n\n      // Processar arquivo Excel\n      const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      \n      // Converter para JSON\n      const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n      \n      if (rawData.length < 2) {\n        return res.status(400).json({ error: 'Planilha deve conter pelo menos um cabeçalho e uma linha de dados' });\n      }\n\n      // Processar dados da planilha\n      const headers = rawData[0] as string[];\n      const processedData = [];\n      \n      for (let i = 1; i < rawData.length; i++) {\n        const row = rawData[i] as any[];\n        const inspection: any = {};\n        \n        headers.forEach((header, index) => {\n          const value = row[index];\n          \n          // Mapear colunas da planilha para campos do banco\n          switch (header) {\n            case 'Nº':\n            case 'Numero':\n              inspection.numero = value?.toString() || '';\n              break;\n            case 'Unidade Inspecionada':\n              inspection.unidadeInspecionada = value?.toString() || '';\n              break;\n            case 'Departamento':\n              inspection.departamento = value?.toString() || '';\n              break;\n            case 'COORPIN':\n              inspection.coorpin = value?.toString() || '';\n              break;\n            case 'Data da Inspeção':\n              if (typeof value === 'number') {\n                // Converter data serial do Excel\n                const date = new Date((value - 25569) * 86400 * 1000);\n                inspection.dataInspecao = date.toISOString().split('T')[0];\n              } else if (value) {\n                inspection.dataInspecao = value.toString();\n              }\n              break;\n            case 'Delegado Corregedor Responsável':\n              inspection.delegadoCorregedor = value?.toString() || '';\n              break;\n            case 'Não Conformidade Identificada':\n              inspection.naoConformidade = value?.toString() || '';\n              break;\n            case 'Descrição da Não Conformidade Identificada':\n              inspection.descricaoNaoConformidade = value?.toString() || '';\n              break;\n            case 'Providências Iniciais':\n              inspection.providenciasIniciais = value?.toString() || '';\n              break;\n            case 'Providências Intermediárias':\n              inspection.providenciasIntermediarias = value?.toString() || '';\n              break;\n            case 'Providências Conclusivas':\n              inspection.providenciasConclusivas = value?.toString() || '';\n              break;\n            case 'Data Início Prazo Regularização':\n              if (typeof value === 'number') {\n                const date = new Date((value - 25569) * 86400 * 1000);\n                inspection.dataInicioPrazo = date.toISOString().split('T')[0];\n              } else if (value) {\n                inspection.dataInicioPrazo = value.toString();\n              }\n              break;\n            case 'Dias Prazo':\n              inspection.diasPrazo = typeof value === 'number' ? value : parseInt(value) || 0;\n              break;\n            case 'Data Fim para Regularização':\n              if (typeof value === 'number') {\n                const date = new Date((value - 25569) * 86400 * 1000);\n                inspection.dataFimRegularizacao = date.toISOString().split('T')[0];\n              } else if (value) {\n                inspection.dataFimRegularizacao = value.toString();\n              }\n              break;\n            case 'Status Prazo para Regularização':\n              inspection.statusPrazo = value?.toString() || '';\n              break;\n            case 'Data Determinada para Nova Inspeção':\n              if (typeof value === 'number') {\n                const date = new Date((value - 25569) * 86400 * 1000);\n                inspection.dataDeterminadaNovaInspecao = date.toISOString().split('T')[0];\n              } else if (value) {\n                inspection.dataDeterminadaNovaInspecao = value.toString();\n              }\n              break;\n            case 'Criticidade':\n              inspection.criticidade = value?.toString() || '';\n              break;\n          }\n        });\n        \n        // Validar dados mínimos\n        if (inspection.unidadeInspecionada && inspection.departamento) {\n          processedData.push(inspection);\n        }\n      }\n\n      if (processedData.length === 0) {\n        return res.status(400).json({ error: 'Nenhum dado válido encontrado na planilha' });\n      }\n\n      // Salvar dados no banco - APENAS INSPEÇÕES, NUNCA CONTROLE DE PRAZOS\n      await storage.bulkCreateInspections(processedData);\n      \n      console.log(`✅ UPLOAD DE INSPEÇÕES: Administrador ${req.user.username} carregou ${processedData.length} registros via Excel`);\n      console.log(`🔒 SEPARAÇÃO DE DADOS: Este upload alimenta APENAS Dashboard/Relatórios, NÃO Status Regularização`);\n      \n      res.json({\n        success: true,\n        message: `${processedData.length} registros processados e carregados com sucesso`,\n        count: processedData.length,\n        uploadedBy: req.user.username,\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error('Erro no upload de Excel:', error);\n      res.status(500).json({ error: 'Erro ao processar planilha Excel' });\n    }\n  });\n\n  // Bulk insert inspections\n  app.post('/api/inspections/bulk', async (req, res) => {\n    try {\n      const { inspections } = req.body;\n      if (!inspections || !Array.isArray(inspections)) {\n        return res.status(400).json({ error: 'Array de inspeções requerido' });\n      }\n\n      const validInspections = inspections.map(inspection => ({\n        numero: inspection.numero || '001',\n        unidadeInspecionada: inspection.unidadeInspecionada || '',\n        departamento: inspection.departamento || '',\n        coorpin: inspection.coorpin || '',\n        dataInspecao: inspection.dataInspecao,\n        delegadoCorregedor: inspection.delegadoCorregedor || '',\n        naoConformidade: inspection.naoConformidade || '',\n        descricaoNaoConformidade: inspection.descricaoNaoConformidade || '',\n        providenciasIniciais: inspection.providenciasIniciais || '',\n        providenciasIntermediarias: inspection.providenciasIntermediarias || '',\n        providenciasConclusivas: inspection.providenciasConclusivas || '',\n        dataInicioPrazo: inspection.dataInicioRegularizacao,\n        diasPrazo: inspection.diasPrazo || 0,\n        dataFimRegularizacao: inspection.dataFimRegularizacao,\n        statusPrazo: inspection.statusPrazo || '',\n        dataDeterminadaNovaInspecao: inspection.dataNovaInspecao,\n        criticidade: inspection.criticidade || ''\n      }));\n\n      await storage.bulkCreateInspections(validInspections);\n      res.json({ \n        success: true, \n        message: `${validInspections.length} inspeções carregadas`,\n        count: validInspections.length \n      });\n    } catch (error) {\n      console.error('Erro no bulk insert:', error);\n      res.status(500).json({ error: 'Erro ao carregar inspeções em lote' });\n    }\n  });\n\n  // Get filtered inspections\n  app.get('/api/inspections/filtered', async (req, res) => {\n    try {\n      const filters = req.query;\n      const inspections = await storage.getInspectionsByFilters(filters);\n      res.json(inspections);\n    } catch (error) {\n      res.status(500).json({ error: 'Erro ao filtrar inspeções' });\n    }\n  });\n\n  // Load CSV data\n  app.post('/api/inspections/load-csv', async (req, res) => {\n    try {\n      const csvFilePath = path.join(process.cwd(), 'data', 'inspections.csv');\n      \n      if (!fs.existsSync(csvFilePath)) {\n        return res.status(404).json({ error: 'Arquivo CSV não encontrado' });\n      }\n\n      const csvData = fs.readFileSync(csvFilePath, 'utf8');\n      \n      Papa.parse(csvData, {\n        header: true,\n        skipEmptyLines: true,\n        transformHeader: (header: string) => {\n          // Transform CSV headers to match schema\n          const headerMap: { [key: string]: string } = {\n            'Nº': 'numero',\n            'Unidade Inspecionada': 'unidadeInspecionada',\n            'Departamento': 'departamento',\n            'COORPIN': 'coorpin',\n            'Data da Inspeção': 'dataInspecao',\n            'Delegado Corregedor Responsável': 'delegadoCorregedor',\n            'Não Conformidade Identificada': 'naoConformidade',\n            'Descrição da Não Conformidade Identificada': 'descricaoNaoConformidade',\n            'Providências Iniciais': 'providenciasIniciais',\n            'Providências Intermediárias': 'providenciasIntermediarias',\n            'Providências Conclusivas': 'providenciasConclusivas',\n            'Data Início Prazo Regularização': 'dataInicioPrazo',\n            'Dias Prazo': 'diasPrazo',\n            'Data Fim para Regularização': 'dataFimRegularizacao',\n            'Status Prazo para Regularização': 'statusPrazo',\n            'Data Determinada para Nova Inspeção': 'dataDeterminadaNovaInspecao',\n            'Criticidade': 'criticidade'\n          };\n          return headerMap[header] || header;\n        },\n        transform: (value: string, field: string) => {\n          // Handle date conversions and Excel serial dates\n          if (field === 'dataInspecao' || field === 'dataInicioPrazo' || \n              field === 'dataFimRegularizacao' || field === 'dataDeterminadaNovaInspecao') {\n            if (value && !isNaN(Number(value))) {\n              // Convert Excel serial date to JavaScript Date\n              const excelDate = new Date((Number(value) - 25569) * 86400 * 1000);\n              return excelDate.toISOString().split('T')[0];\n            }\n          }\n          if (field === 'diasPrazo') {\n            return value ? parseInt(value) : null;\n          }\n          return value || null;\n        },\n        complete: async (results: any) => {\n          try {\n            const validInspections = results.data\n              .filter((row: any) => row.numero && row.unidadeInspecionada)\n              .map((row: any) => {\n                // Validate and create inspection object\n                return {\n                  numero: row.numero,\n                  unidadeInspecionada: row.unidadeInspecionada,\n                  departamento: row.departamento || '',\n                  coorpin: row.coorpin || '',\n                  dataInspecao: row.dataInspecao,\n                  delegadoCorregedor: row.delegadoCorregedor || '',\n                  naoConformidade: row.naoConformidade || '',\n                  descricaoNaoConformidade: row.descricaoNaoConformidade || '',\n                  providenciasIniciais: row.providenciasIniciais,\n                  providenciasIntermediarias: row.providenciasIntermediarias,\n                  providenciasConclusivas: row.providenciasConclusivas,\n                  dataInicioPrazo: row.dataInicioPrazo,\n                  diasPrazo: row.diasPrazo,\n                  dataFimRegularizacao: row.dataFimRegularizacao,\n                  statusPrazo: row.statusPrazo || '',\n                  dataDeterminadaNovaInspecao: row.dataDeterminadaNovaInspecao,\n                  criticidade: row.criticidade || ''\n                };\n              });\n\n            await storage.bulkCreateInspections(validInspections);\n            res.json({ \n              success: true, \n              message: `${validInspections.length} inspeções carregadas com sucesso`,\n              count: validInspections.length \n            });\n          } catch (error) {\n            res.status(500).json({ error: 'Erro ao processar dados CSV' });\n          }\n        },\n        error: (error: any) => {\n          res.status(400).json({ error: 'Erro ao processar arquivo CSV' });\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ error: 'Erro interno do servidor' });\n    }\n  });\n\n  // Generate report data\n  app.get('/api/reports/data', async (req, res) => {\n    try {\n      console.log('Filters received:', req.query);\n      \n      // Convert query parameters properly\n      const filters: any = {};\n      \n      if (req.query.ano) {\n        filters.ano = parseInt(req.query.ano as string);\n      }\n      \n      if (req.query.departamento) {\n        filters.departamento = [req.query.departamento as string];\n      }\n      \n      if (req.query.unidade) {\n        filters.unidade = [req.query.unidade as string];\n      }\n      \n      if (req.query.dataInicial) {\n        filters.dataInicial = req.query.dataInicial as string;\n      }\n      \n      if (req.query.dataFinal) {\n        filters.dataFinal = req.query.dataFinal as string;\n      }\n      \n      if (req.query.statusPrazo) {\n        filters.statusPrazo = req.query.statusPrazo as string;\n      }\n      \n      \n      console.log('Processed filters:', filters);\n      \n      const inspections = await storage.getInspectionsByFilters(filters);\n      console.log(`Found ${inspections.length} inspections`);\n      \n      // Buscar dados de controle de prazos para calcular \"Com Prazo Definido\"\n      const allControlePrazos = await storage.getAllControlePrazos();\n      \n      // Filtrar controle de prazos baseado nas unidades das inspeções filtradas\n      const filteredUnidades = new Set(inspections.map(i => i.unidadeInspecionada));\n      const controlePrazos = allControlePrazos.filter(cp => \n        filteredUnidades.size === 0 || filteredUnidades.has(cp.unidade)\n      );\n      \n      console.log(`Found ${controlePrazos.length} controle de prazos records (filtered from ${allControlePrazos.length})`);\n      \n      // Count unique inspections by unit, date and inspector (more accurate)\n      const uniqueInspections = new Set();\n      inspections.forEach(inspection => {\n        const key = `${inspection.unidadeInspecionada}-${inspection.dataInspecao}-${inspection.delegadoCorregedor}`;\n        uniqueInspections.add(key);\n      });\n\n      // Calculate status counts for unique inspections\n      const statusCounts = { withinDeadline: 0, nearDeadline: 0, overdue: 0 };\n      const inspectionStatusMap = new Map();\n      \n      inspections.forEach(inspection => {\n        const key = `${inspection.unidadeInspecionada}-${inspection.dataInspecao}-${inspection.delegadoCorregedor}`;\n        if (!inspectionStatusMap.has(key)) {\n          inspectionStatusMap.set(key, inspection.statusPrazo);\n          if (inspection.statusPrazo === 'Dentro do prazo') statusCounts.withinDeadline++;\n          else if (inspection.statusPrazo === 'Próximo do vencimento') statusCounts.nearDeadline++;\n          else if (inspection.statusPrazo === 'Prazo expirado') statusCounts.overdue++;\n        }\n      });\n\n      // Calcular unidades com prazo definido baseado nos dados de controle de prazos\n      const unidadesComPrazoDefinido = new Set(controlePrazos.map(cp => cp.unidade)).size;\n      \n      // Calcular unidades com prazo vencido (data prazo menor que hoje)\n      const hoje = new Date();\n      hoje.setHours(0, 0, 0, 0); // Zerar horários para comparação apenas de datas\n      \n      const unidadesComPrazoVencido = new Set(\n        controlePrazos\n          .filter(cp => {\n            if (!cp.dataPrazo) return false;\n            const dataPrazo = new Date(cp.dataPrazo);\n            dataPrazo.setHours(0, 0, 0, 0);\n            return dataPrazo < hoje;\n          })\n          .map(cp => cp.unidade)\n      ).size;\n      \n      // Calcular dados específicos do Status de Regularização\n      const regularizados = controlePrazos.filter(cp => cp.status === 'regularizado').length;\n      const pendentes = controlePrazos.filter(cp => cp.status === 'pendente').length;\n      const naoRegularizados = controlePrazos.filter(cp => cp.status === 'nao_regularizado').length;\n\n      // Process data for reports\n      const reportData = {\n        inspections,\n        summary: {\n          totalInspections: uniqueInspections.size, // Unique inspections by unit, date, inspector\n          totalNonCompliances: inspections.length, // Total non-conformities\n          withinDeadline: unidadesComPrazoDefinido, // Unidades com prazo definido\n          nearDeadline: unidadesComPrazoVencido, // Unidades com prazo vencido\n          overdue: unidadesComPrazoVencido, // Também usar para overdue\n          // Dados específicos do Status de Regularização\n          regularizados: regularizados,\n          pendentes: pendentes,\n          naoRegularizados: naoRegularizados,\n          totalControlePrazos: controlePrazos.length\n        },\n        charts: {\n          departmentData: inspections.reduce((acc: any[], item) => {\n            const key = `${item.unidadeInspecionada}-${item.dataInspecao}-${item.delegadoCorregedor}`;\n            const dept = acc.find(d => d.name === item.departamento);\n            if (dept) {\n              if (!dept.uniqueInspections) dept.uniqueInspections = new Set();\n              if (!dept.uniqueInspections.has(key)) {\n                dept.uniqueInspections.add(key);\n                dept.value += 1; // Count unique inspections only\n              }\n            } else {\n              const uniqueInspections = new Set([key]);\n              acc.push({ name: item.departamento, value: 1, uniqueInspections });\n            }\n            return acc;\n          }, []).map((item: any) => ({ name: item.name, value: item.value })),\n          statusData: controlePrazos.reduce((acc: any[], item) => {\n            // Categorizar baseado na situação do prazo\n            let statusName = '';\n            \n            if (!item.dataPrazo) {\n              statusName = 'Sem Prazo Definido';\n            } else {\n              const dataPrazo = new Date(item.dataPrazo);\n              dataPrazo.setHours(0, 0, 0, 0);\n              const hoje = new Date();\n              hoje.setHours(0, 0, 0, 0);\n              \n              if (dataPrazo < hoje) {\n                statusName = 'Com Prazo Vencido';\n              } else {\n                // Verificar se está próximo do vencimento (próximos 15 dias)\n                const diasRestantes = Math.ceil((dataPrazo.getTime() - hoje.getTime()) / (1000 * 3600 * 24));\n                if (diasRestantes <= 15) {\n                  statusName = 'Próximo do Vencimento';\n                } else {\n                  statusName = 'Com Prazo Definido';\n                }\n              }\n            }\n            \n            const status = acc.find(s => s.name === statusName);\n            if (status) {\n              status.value += 1;\n            } else {\n              acc.push({ name: statusName, value: 1 });\n            }\n            return acc;\n          }, []),\n          nonComplianceData: inspections.reduce((acc: any[], item) => {\n            const compliance = acc.find(c => c.name === item.naoConformidade);\n            if (compliance) {\n              compliance.value += 1;\n            } else {\n              acc.push({ name: item.naoConformidade, value: 1 });\n            }\n            return acc;\n          }, [])\n        }\n      };\n      \n      res.json(reportData);\n    } catch (error) {\n      console.error('Error in /api/reports/data:', error);\n      res.status(500).json({ error: 'Erro ao gerar dados do relatório', details: error });\n    }\n  });\n\n  // Upload endpoint for controle de prazos\n  app.post('/api/admin/upload-controle-prazos', requireAuth, upload.single('excel'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: 'Nenhum arquivo foi enviado' });\n      }\n\n      console.log(`📤 Admin upload de controle de prazos iniciado pelo usuário: ${req.user.username}`);\n      console.log(`📄 Arquivo: ${req.file.originalname} (${req.file.size} bytes)`);\n\n      // Ler arquivo Excel\n      const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });\n      const firstSheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[firstSheetName];\n      \n      // Converter para JSON\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n      console.log(`📊 Total de linhas no Excel: ${jsonData.length}`);\n      \n      if (jsonData.length < 2) {\n        return res.status(400).json({ error: 'Arquivo Excel deve conter pelo menos uma linha de cabeçalho e uma linha de dados' });\n      }\n\n      // Primeira linha são os cabeçalhos\n      const headers = jsonData[0] as string[];\n      const dataRows = jsonData.slice(1);\n      \n      console.log('📋 Cabeçalhos encontrados:', headers);\n\n      // Mapeamento de colunas (flexível para aceitar variações de nomes)\n      const findColumnIndex = (possibleNames: string[]): number => {\n        for (const name of possibleNames) {\n          const index = headers.findIndex(h => \n            h && h.toString().toLowerCase().trim().includes(name.toLowerCase())\n          );\n          if (index !== -1) return index;\n        }\n        return -1;\n      };\n\n      const columnMapping = {\n        unidade: findColumnIndex(['unidade', 'unit']),\n        oficio: findColumnIndex(['ofício', 'oficio', 'documento', 'doc']),\n        linkSei: findColumnIndex(['link sei', 'sei', 'link']),\n        naoConformidade: findColumnIndex(['não conformidade', 'nao conformidade', 'conformidade']),\n        dataRecebimento: findColumnIndex(['data recebimento', 'recebimento', 'data rec']),\n        dataPrazo: findColumnIndex(['data prazo', 'prazo', 'vencimento']),\n        status: findColumnIndex(['status', 'situação', 'situacao', 'regularizado'])\n      };\n\n      console.log('🗂️ Mapeamento de colunas:', columnMapping);\n\n      // Verificar se colunas obrigatórias foram encontradas\n      const requiredColumns = ['unidade', 'oficio', 'naoConformidade', 'dataRecebimento', 'dataPrazo', 'status'] as const;\n      const missingColumns = requiredColumns.filter(col => columnMapping[col] === -1);\n      \n      if (missingColumns.length > 0) {\n        return res.status(400).json({ \n          error: `Colunas obrigatórias não encontradas: ${missingColumns.join(', ')}`,\n          found: headers,\n          required: requiredColumns\n        });\n      }\n\n      const parseExcelDate = (value: any): Date | null => {\n        if (!value) return null;\n        \n        // Se é um número (data serial do Excel)\n        if (typeof value === 'number') {\n          return new Date((value - 25569) * 86400 * 1000);\n        }\n        \n        // Se é string, tentar parsear\n        if (typeof value === 'string') {\n          // Tentar formato DD/MM/AAAA\n          const ddmmyyyy = value.match(/^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/);\n          if (ddmmyyyy) {\n            return new Date(parseInt(ddmmyyyy[3]), parseInt(ddmmyyyy[2]) - 1, parseInt(ddmmyyyy[1]));\n          }\n          \n          // Tentar outros formatos\n          const parsed = new Date(value);\n          if (!isNaN(parsed.getTime())) {\n            return parsed;\n          }\n        }\n        \n        return null;\n      };\n\n      // Função para normalizar status\n      const normalizeStatus = (value: any): string => {\n        if (!value) return 'pendente';\n        const str = value.toString().toLowerCase().trim();\n        \n        if (str.includes('regular')) return 'regularizado';\n        if (str.includes('não regular') || str.includes('nao regular')) return 'nao_regularizado';\n        if (str.includes('pendent')) return 'pendente';\n        \n        return 'pendente';\n      };\n\n      // Processar dados\n      const controlePrazosData = [];\n      let processedCount = 0;\n      let errorCount = 0;\n\n      for (let i = 0; i < dataRows.length; i++) {\n        const row = dataRows[i] as any[];\n        \n        try {\n          const unidade = row[columnMapping.unidade]?.toString()?.trim();\n          const oficio = row[columnMapping.oficio]?.toString()?.trim();\n          const naoConformidade = row[columnMapping.naoConformidade]?.toString()?.trim();\n          \n          if (!unidade || !oficio || !naoConformidade) {\n            console.log(`⚠️ Linha ${i + 2}: Dados obrigatórios em branco`);\n            errorCount++;\n            continue;\n          }\n\n          const dataRecebimento = parseExcelDate(row[columnMapping.dataRecebimento]);\n          const dataPrazo = parseExcelDate(row[columnMapping.dataPrazo]);\n          \n          if (!dataRecebimento || !dataPrazo) {\n            console.log(`⚠️ Linha ${i + 2}: Datas inválidas`);\n            errorCount++;\n            continue;\n          }\n\n          const controlePrazoData = {\n            unidade,\n            oficio,\n            linkSei: row[columnMapping.linkSei]?.toString()?.trim() || null,\n            naoConformidade,\n            dataRecebimento: dataRecebimento.toISOString().split('T')[0],\n            dataPrazo: dataPrazo.toISOString().split('T')[0],\n            status: normalizeStatus(row[columnMapping.status]),\n            observacoes: null\n          };\n\n          controlePrazosData.push(controlePrazoData);\n          processedCount++;\n          \n        } catch (error) {\n          console.error(`❌ Erro na linha ${i + 2}:`, error);\n          errorCount++;\n        }\n      }\n\n      console.log(`✅ Dados processados: ${processedCount}, Erros: ${errorCount}`);\n\n      if (controlePrazosData.length === 0) {\n        return res.status(400).json({ \n          error: 'Nenhum registro válido foi encontrado na planilha',\n          details: `${errorCount} linhas com erro`\n        });\n      }\n\n      // Inserir dados com deduplicação automática - UPLOAD EXPLÍCITO DE CONTROLE DE PRAZOS\n      console.log(`🔒 CONTROLE DE PRAZOS: Upload explícito iniciado pelo administrador ${req.user.username}`);\n      await storage.insertControlePrazosInBatch(controlePrazosData);\n      console.log(`✅ SEPARAÇÃO DE DADOS: Este upload alimenta APENAS Status Regularização, NÃO Dashboard/Relatórios`);\n\n      const result = {\n        success: true,\n        count: controlePrazosData.length,\n        errors: errorCount,\n        uploadedBy: req.user.username,\n        timestamp: new Date().toISOString(),\n        message: `${controlePrazosData.length} registros de controle de prazos carregados com sucesso. ${errorCount > 0 ? `${errorCount} linhas com erro foram ignoradas.` : ''}`\n      };\n\n      console.log('✅ Upload de controle de prazos concluído:', result);\n      res.json(result);\n\n    } catch (error) {\n      console.error('❌ Erro no upload de controle de prazos:', error);\n      console.error('Stack trace:', error instanceof Error ? error.stack : error);\n      res.status(500).json({ \n        error: 'Erro interno do servidor durante o upload',\n        details: error instanceof Error ? error.message : 'Erro desconhecido'\n      });\n    }\n  });\n\n  // Admin delete endpoints\n  app.delete('/api/admin/delete-all-inspections', requireAuth, async (req, res) => {\n    try {\n      await storage.deleteAllInspections();\n      \n      const result = {\n        success: true,\n        message: 'Todos os dados de inspeções foram removidos',\n        deletedBy: req.user.username,\n        timestamp: new Date().toISOString()\n      };\n      \n      console.log('🗑️ Todos os dados de inspeções removidos por:', req.user.username);\n      res.json(result);\n    } catch (error) {\n      console.error('Erro ao remover dados de inspeções:', error);\n      res.status(500).json({ \n        error: 'Erro interno do servidor', \n        details: error instanceof Error ? error.message : 'Erro desconhecido'\n      });\n    }\n  });\n\n  app.delete('/api/admin/delete-all-controle-prazos', requireAuth, async (req, res) => {\n    try {\n      await storage.deleteAllControlePrazos();\n      \n      const result = {\n        success: true,\n        message: 'Todos os dados de controle de prazos foram removidos',\n        deletedBy: req.user.username,\n        timestamp: new Date().toISOString()\n      };\n      \n      console.log('🗑️ Todos os dados de controle de prazos removidos por:', req.user.username);\n      res.json(result);\n    } catch (error) {\n      console.error('Erro ao remover dados de controle de prazos:', error);\n      res.status(500).json({ \n        error: 'Erro interno do servidor', \n        details: error instanceof Error ? error.message : 'Erro desconhecido'\n      });\n    }\n  });\n\n  // Controle de Prazos routes\n  app.get('/api/controle-prazos', async (req, res) => {\n    try {\n      const controlePrazos = await storage.getAllControlePrazos();\n      res.json(controlePrazos);\n    } catch (error) {\n      console.error('Erro ao buscar controle de prazos:', error);\n      res.status(500).json({ error: 'Erro ao buscar registros de controle de prazos' });\n    }\n  });\n\n  app.post('/api/controle-prazos', async (req, res) => {\n    try {\n      const validData = insertControlePrazoSchema.parse(req.body);\n      const controlePrazo = await storage.createControlePrazo(validData);\n      res.json(controlePrazo);\n    } catch (error) {\n      console.error('Erro ao criar controle de prazo:', error);\n      res.status(500).json({ error: 'Erro ao criar registro de controle de prazo' });\n    }\n  });\n\n  app.patch('/api/controle-prazos/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = req.body;\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ error: 'ID inválido' });\n      }\n\n      console.log(`Updating controle-prazo ${id} with data:`, updateData);\n      \n      const controlePrazo = await storage.updateControlePrazo(id, updateData);\n      \n      if (!controlePrazo) {\n        return res.status(404).json({ error: 'Registro não encontrado' });\n      }\n      \n      res.json(controlePrazo);\n    } catch (error) {\n      console.error('Erro ao atualizar controle de prazo:', error);\n      res.status(500).json({ error: 'Erro ao atualizar registro de controle de prazo' });\n    }\n  });\n\n  app.delete('/api/controle-prazos/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteControlePrazo(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Erro ao deletar controle de prazo:', error);\n      res.status(500).json({ error: 'Erro ao deletar registro de controle de prazo' });\n    }\n  });\n\n  // Gallery routes\n  app.get('/api/gallery/photos', async (req, res) => {\n    try {\n      const photos = await storage.getAllPhotos();\n      res.json(photos);\n    } catch (error) {\n      console.error('Erro ao buscar fotos da galeria:', error);\n      res.status(500).json({ error: 'Erro ao buscar fotos da galeria' });\n    }\n  });\n\n  app.get('/api/gallery/photos/unidade/:unidade', async (req, res) => {\n    try {\n      const { unidade } = req.params;\n      const photos = await storage.getPhotosByUnidade(decodeURIComponent(unidade));\n      res.json(photos);\n    } catch (error) {\n      console.error('Erro ao buscar fotos por unidade:', error);\n      res.status(500).json({ error: 'Erro ao buscar fotos da unidade' });\n    }\n  });\n\n  app.post('/api/gallery/photos', async (req, res) => {\n    try {\n      const { unidade, fileName, fileType, fileSize, imageData } = req.body;\n      \n      if (!unidade || !fileName || !fileType || !imageData) {\n        return res.status(400).json({ error: 'Dados obrigatórios faltando' });\n      }\n\n      const photoData = {\n        unidade,\n        fileName,\n        fileType,\n        fileSize: fileSize || 0,\n        imageData\n      };\n\n      const photo = await storage.createPhoto(photoData);\n      res.json(photo);\n    } catch (error) {\n      console.error('Erro ao salvar foto na galeria:', error);\n      res.status(500).json({ error: 'Erro ao salvar foto na galeria' });\n    }\n  });\n\n  app.delete('/api/gallery/photos/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePhoto(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Erro ao deletar foto da galeria:', error);\n      res.status(500).json({ error: 'Erro ao deletar foto da galeria' });\n    }\n  });\n\n  // Document routes\n  app.get('/api/documents', async (req, res) => {\n    try {\n      const documents = await storage.getAllDocuments();\n      res.json(documents);\n    } catch (error) {\n      console.error('Erro ao buscar documentos:', error);\n      res.status(500).json({ error: 'Erro ao buscar documentos' });\n    }\n  });\n\n  app.post('/api/documents', async (req, res) => {\n    try {\n      const { tipo, numero, ano, titulo, descricao, orgaoEmissor, dataPublicacao, dataVigencia, status, assunto, arquivoUrl } = req.body;\n      \n      if (!tipo || !numero || !ano || !titulo) {\n        return res.status(400).json({ error: 'Tipo, número, ano e título são obrigatórios' });\n      }\n\n      const documentData = {\n        tipo,\n        numero,\n        ano,\n        titulo,\n        descricao: descricao || null,\n        orgaoEmissor: orgaoEmissor || null,\n        dataPublicacao: dataPublicacao || null,\n        dataVigencia: dataVigencia || null,\n        status: status || 'Vigente',\n        assunto: assunto || null,\n        arquivoUrl: arquivoUrl || null\n      };\n\n      const document = await storage.createDocument(documentData);\n      res.json(document);\n    } catch (error) {\n      console.error('Erro ao criar documento:', error);\n      res.status(500).json({ error: 'Erro ao criar documento' });\n    }\n  });\n\n  app.put('/api/documents/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = req.body;\n      \n      const document = await storage.updateDocument(id, updateData);\n      res.json(document);\n    } catch (error) {\n      console.error('Erro ao atualizar documento:', error);\n      res.status(500).json({ error: 'Erro ao atualizar documento' });\n    }\n  });\n\n  app.delete('/api/documents/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteDocument(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Erro ao deletar documento:', error);\n      res.status(500).json({ error: 'Erro ao deletar documento' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":38510},"server/storage.ts":{"content":"import { users, inspections, controlePrazos, galleryPhotos, documents, type User, type InsertUser, type Inspection, type InsertInspection, type ControlePrazo, type InsertControlePrazo, type GalleryPhoto, type InsertGalleryPhoto, type Document, type InsertDocument } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, inArray, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllInspections(): Promise<Inspection[]>;\n  getInspectionsByFilters(filters: any): Promise<Inspection[]>;\n  createInspection(inspection: InsertInspection): Promise<Inspection>;\n  bulkCreateInspections(inspections: InsertInspection[]): Promise<Inspection[]>;\n  getAllControlePrazos(): Promise<ControlePrazo[]>;\n  createControlePrazo(controlePrazo: InsertControlePrazo): Promise<ControlePrazo>;\n  updateControlePrazo(id: number, controlePrazo: Partial<InsertControlePrazo>): Promise<ControlePrazo>;\n  deleteControlePrazo(id: number): Promise<void>;\n  clearControlePrazos(): Promise<void>;\n  deleteAllInspections(): Promise<void>;\n  deleteAllControlePrazos(): Promise<void>;\n  insertControlePrazosInBatch(controlePrazosData: InsertControlePrazo[]): Promise<ControlePrazo[]>;\n  bulkCreateControlePrazos(controlePrazosData: InsertControlePrazo[]): Promise<ControlePrazo[]>;\n  // Gallery methods\n  getPhotosByUnidade(unidade: string): Promise<GalleryPhoto[]>;\n  getAllPhotos(): Promise<GalleryPhoto[]>;\n  createPhoto(photo: InsertGalleryPhoto): Promise<GalleryPhoto>;\n  deletePhoto(id: number): Promise<void>;\n  // Document methods\n  getAllDocuments(): Promise<Document[]>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  updateDocument(id: number, document: Partial<InsertDocument>): Promise<Document>;\n  deleteDocument(id: number): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    // Initialize admin user if needed\n    this.initializeAdminUser();\n    // REMOVIDO: Não carregar dados de inspeção automaticamente no startup\n    // this.loadRealInspectionData();\n  }\n\n  private async initializeAdminUser() {\n    const adminUser = await this.getUserByUsername('astec.admin');\n    if (!adminUser) {\n      await this.createUser({ username: 'astec.admin', password: 'Correpol@2025#BA' });\n    }\n    \n    // Initialize some sample controle-prazos data if none exists\n    // await this.initializeSampleControlePrazos(); // Comentado - não criar dados de amostra\n  }\n\n  private async initializeSampleControlePrazos() {\n    try {\n      const existingRecords = await this.getAllControlePrazos();\n      \n      if (existingRecords.length === 0) {\n        console.log('Creating sample controle-prazos data...');\n        \n        const sampleData = [\n          {\n            unidade: \"1ª DRPC - Santo Antônio de Jesus\",\n            oficio: \"OF-001/2025\",\n            linkSei: null,\n            naoConformidade: \"Ausência de livro de ocorrências atualizado\",\n            dataRecebimento: \"2025-01-01\",\n            dataPrazo: \"2025-02-01\",\n            status: \"pendente\" as const,\n            observacoes: \"Prazo inicial de 30 dias\"\n          },\n          {\n            unidade: \"2ª DRPC - Feira de Santana\",\n            oficio: \"OF-002/2025\",\n            linkSei: null,\n            naoConformidade: \"Falta de organização do arquivo geral\",\n            dataRecebimento: \"2025-01-05\",\n            dataPrazo: \"2025-02-05\",\n            status: \"regularizado\" as const,\n            observacoes: \"Regularizado conforme ofício de resposta\"\n          },\n          {\n            unidade: \"3ª DRPC - Itabuna\",\n            oficio: \"OF-003/2025\",\n            linkSei: null,\n            naoConformidade: \"Irregularidades no controle de armamento\",\n            dataRecebimento: \"2025-01-10\",\n            dataPrazo: \"2025-02-10\",\n            status: \"nao_regularizado\" as const,\n            observacoes: \"Pendente de documentação complementar\"\n          }\n        ];\n        \n        for (const item of sampleData) {\n          await this.createControlePrazo(item);\n        }\n        \n        console.log('Sample controle-prazos data created successfully');\n      }\n    } catch (error) {\n      console.error('Error initializing sample controle-prazos data:', error);\n    }\n  }\n\n  private async loadRealInspectionData() {\n    try {\n      const fs = await import('fs');\n      const path = await import('path');\n      \n      const dataPath = path.join(process.cwd(), 'data', 'real-inspections.json');\n      \n      if (fs.existsSync(dataPath)) {\n        const existingInspections = await this.getAllInspections();\n        \n        // Only load if database is empty or has less than 100 records\n        if (existingInspections.length < 100) {\n          console.log('Loading real inspection data from Excel files...');\n          \n          const rawData = fs.readFileSync(dataPath, 'utf-8');\n          const realData = JSON.parse(rawData);\n          \n          // Transform data to match our schema\n          const inspectionsToInsert = realData.map((item: any) => ({\n            numero: item.numero,\n            unidadeInspecionada: item.unidadeInspecionada,\n            departamento: item.departamento,\n            coorpin: item.coorpin,\n            dataInspecao: item.dataInspecao,\n            delegadoCorregedor: item.delegadoCorregedor,\n            naoConformidade: item.naoConformidade,\n            descricaoNaoConformidade: item.descricaoNaoConformidade,\n            providenciasIniciais: item.providenciasIniciais,\n            providenciasIntermediarias: item.providenciasIntermediarias,\n            providenciasConclusivas: item.providenciasConclusivas,\n            dataInicioRegularizacao: item.dataInicioRegularizacao,\n            diasPrazo: item.diasPrazo,\n            dataFimRegularizacao: item.dataFimRegularizacao,\n            statusPrazo: item.statusPrazo,\n            dataNovaInspecao: item.dataNovaInspecao,\n            criticidade: item.criticidade\n          }));\n          \n          await this.bulkCreateInspections(inspectionsToInsert);\n          console.log(`✅ Loaded ${inspectionsToInsert.length} real inspection records from Excel files`);\n        }\n      }\n    } catch (error) {\n      console.warn('Could not load real inspection data:', error);\n    }\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getAllInspections(): Promise<Inspection[]> {\n    return await db.select().from(inspections);\n  }\n\n  async getInspectionsByFilters(filters: any): Promise<Inspection[]> {\n    const conditions = [];\n    \n    if (filters.unidade && filters.unidade.length > 0) {\n      conditions.push(inArray(inspections.unidadeInspecionada, filters.unidade));\n    }\n    \n    if (filters.departamento && filters.departamento.length > 0) {\n      conditions.push(inArray(inspections.departamento, filters.departamento));\n    }\n    \n    if (filters.naoConformidade && filters.naoConformidade.length > 0) {\n      conditions.push(inArray(inspections.naoConformidade, filters.naoConformidade));\n    }\n\n    // Add year filter\n    if (filters.ano) {\n      conditions.push(sql`EXTRACT(YEAR FROM ${inspections.dataInspecao}) = ${filters.ano}`);\n    }\n\n    // Add date range filters\n    if (filters.dataInicial) {\n      conditions.push(gte(inspections.dataInspecao, filters.dataInicial));\n    }\n\n    if (filters.dataFinal) {\n      conditions.push(lte(inspections.dataInspecao, filters.dataFinal));\n    }\n\n    // Add status prazo filter\n    if (filters.statusPrazo) {\n      conditions.push(eq(inspections.statusPrazo, filters.statusPrazo));\n    }\n\n    if (conditions.length > 0) {\n      return await db.select().from(inspections).where(and(...conditions));\n    }\n    \n    return await db.select().from(inspections);\n  }\n\n  async createInspection(insertInspection: InsertInspection): Promise<Inspection> {\n    const [inspection] = await db\n      .insert(inspections)\n      .values(insertInspection)\n      .returning();\n    return inspection;\n  }\n\n  async bulkCreateInspections(insertInspections: InsertInspection[]): Promise<Inspection[]> {\n    if (insertInspections.length === 0) return [];\n    \n    // Process in smaller batches to avoid parameter limit\n    const batchSize = 500;\n    const results: Inspection[] = [];\n    \n    for (let i = 0; i < insertInspections.length; i += batchSize) {\n      const batch = insertInspections.slice(i, i + batchSize);\n      \n      // Use upsert (insert or update) to avoid duplicates\n      // Conflict resolution based on: numero + unidadeInspecionada + departamento + naoConformidade\n      for (const inspection of batch) {\n        const [upsertResult] = await db\n          .insert(inspections)\n          .values(inspection)\n          .onConflictDoUpdate({\n            target: [inspections.numero, inspections.unidadeInspecionada, inspections.departamento, inspections.naoConformidade],\n            set: {\n              dataInspecao: inspection.dataInspecao,\n              delegadoCorregedor: inspection.delegadoCorregedor,\n              descricaoNaoConformidade: inspection.descricaoNaoConformidade,\n              providenciasIniciais: inspection.providenciasIniciais,\n              providenciasIntermediarias: inspection.providenciasIntermediarias,\n              providenciasConclusivas: inspection.providenciasConclusivas,\n              dataInicioPrazo: inspection.dataInicioPrazo,\n              diasPrazo: inspection.diasPrazo,\n              dataFimRegularizacao: inspection.dataFimRegularizacao,\n              statusPrazo: inspection.statusPrazo,\n              dataDeterminadaNovaInspecao: inspection.dataDeterminadaNovaInspecao,\n              criticidade: inspection.criticidade,\n            },\n          })\n          .returning();\n        \n        if (upsertResult) {\n          results.push(upsertResult);\n        }\n      }\n      \n      console.log(`Processed batch ${Math.floor(i/batchSize) + 1}/${Math.ceil(insertInspections.length/batchSize)} (${batch.length} records) with deduplication`);\n    }\n    \n    // GARANTIA: Nunca criar automaticamente dados de controle de prazos\n    // quando dados de inspeção são inseridos\n    console.log(`✅ Bulk insert de ${results.length} inspeções concluído - SEPARAÇÃO TOTAL DE DADOS`);\n    \n    return results;\n  }\n\n  // Controle de Prazos methods\n  async getAllControlePrazos(): Promise<ControlePrazo[]> {\n    return await db.select().from(controlePrazos).orderBy(controlePrazos.dataPrazo);\n  }\n\n  async createControlePrazo(insertControlePrazo: InsertControlePrazo): Promise<ControlePrazo> {\n    const [controlePrazo] = await db\n      .insert(controlePrazos)\n      .values(insertControlePrazo)\n      .returning();\n    return controlePrazo;\n  }\n\n  async updateControlePrazo(id: number, updateData: Partial<InsertControlePrazo>): Promise<ControlePrazo> {\n    const [controlePrazo] = await db\n      .update(controlePrazos)\n      .set(updateData)\n      .where(eq(controlePrazos.id, id))\n      .returning();\n    return controlePrazo;\n  }\n\n  async deleteControlePrazo(id: number): Promise<void> {\n    await db.delete(controlePrazos).where(eq(controlePrazos.id, id));\n  }\n\n  async clearControlePrazos(): Promise<void> {\n    await db.delete(controlePrazos);\n  }\n\n  async deleteAllInspections(): Promise<void> {\n    await db.delete(inspections);\n  }\n\n  async deleteAllControlePrazos(): Promise<void> {\n    await db.delete(controlePrazos);\n  }\n\n  async insertControlePrazosInBatch(controlePrazosData: InsertControlePrazo[]): Promise<ControlePrazo[]> {\n    if (controlePrazosData.length === 0) {\n      return [];\n    }\n    \n    // LOG: Confirmar que este método só é chamado para uploads explícitos de controle de prazos\n    console.log(`🔒 CONTROLE DE PRAZOS: Inserindo ${controlePrazosData.length} registros via upload EXPLÍCITO`);\n\n    // Process in smaller batches to avoid parameter limit\n    const batchSize = 500;\n    const results: ControlePrazo[] = [];\n    \n    for (let i = 0; i < controlePrazosData.length; i += batchSize) {\n      const batch = controlePrazosData.slice(i, i + batchSize);\n      \n      // Use upsert to avoid duplicates based on: oficio + unidade + naoConformidade\n      for (const controlePrazo of batch) {\n        try {\n          const [upsertResult] = await db\n            .insert(controlePrazos)\n            .values(controlePrazo)\n            .onConflictDoUpdate({\n              target: [controlePrazos.oficio, controlePrazos.unidade, controlePrazos.naoConformidade],\n              set: {\n                linkSei: controlePrazo.linkSei,\n                dataRecebimento: controlePrazo.dataRecebimento,\n                dataPrazo: controlePrazo.dataPrazo,\n                status: controlePrazo.status,\n                observacoes: controlePrazo.observacoes,\n              },\n            })\n            .returning();\n          \n          if (upsertResult) {\n            results.push(upsertResult);\n          }\n        } catch (error) {\n          console.error(`Erro ao inserir controle de prazo (oficio: ${controlePrazo.oficio}, unidade: ${controlePrazo.unidade}):`, error);\n          // Continue processing other records even if one fails\n        }\n      }\n      \n      console.log(`Processed controle de prazos batch ${Math.floor(i/batchSize) + 1}/${Math.ceil(controlePrazosData.length/batchSize)} (${batch.length} records) with deduplication`);\n    }\n    \n    return results;\n  }\n\n  async bulkCreateControlePrazos(controlePrazosData: InsertControlePrazo[]): Promise<ControlePrazo[]> {\n    return this.insertControlePrazosInBatch(controlePrazosData);\n  }\n\n  // Gallery methods\n  async getAllPhotos(): Promise<GalleryPhoto[]> {\n    return await db.select().from(galleryPhotos).orderBy(galleryPhotos.createdAt);\n  }\n\n  async getPhotosByUnidade(unidade: string): Promise<GalleryPhoto[]> {\n    return await db.select().from(galleryPhotos)\n      .where(eq(galleryPhotos.unidade, unidade))\n      .orderBy(galleryPhotos.createdAt);\n  }\n\n  async createPhoto(insertPhoto: InsertGalleryPhoto): Promise<GalleryPhoto> {\n    const [photo] = await db\n      .insert(galleryPhotos)\n      .values(insertPhoto)\n      .returning();\n    return photo;\n  }\n\n  async deletePhoto(id: number): Promise<void> {\n    await db.delete(galleryPhotos).where(eq(galleryPhotos.id, id));\n  }\n\n  // Document methods\n  async getAllDocuments(): Promise<Document[]> {\n    return await db.select().from(documents).orderBy(documents.createdAt);\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const [document] = await db\n      .insert(documents)\n      .values(insertDocument)\n      .returning();\n    return document;\n  }\n\n  async updateDocument(id: number, updateDocument: Partial<InsertDocument>): Promise<Document> {\n    const [document] = await db\n      .update(documents)\n      .set({\n        ...updateDocument,\n        updatedAt: new Date(),\n      })\n      .where(eq(documents.id, id))\n      .returning();\n    return document;\n  }\n\n  async deleteDocument(id: number): Promise<void> {\n    await db.delete(documents).where(eq(documents.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15624},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, date, timestamp, uniqueIndex } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const inspections = pgTable(\"inspections\", {\n  id: serial(\"id\").primaryKey(),\n  numero: text(\"numero\").notNull(),\n  unidadeInspecionada: text(\"unidade_inspecionada\").notNull(),\n  departamento: text(\"departamento\").notNull(),\n  coorpin: text(\"coorpin\").notNull(),\n  dataInspecao: date(\"data_inspecao\").notNull(),\n  delegadoCorregedor: text(\"delegado_corregedor\").notNull(),\n  naoConformidade: text(\"nao_conformidade\").notNull(),\n  descricaoNaoConformidade: text(\"descricao_nao_conformidade\").notNull(),\n  providenciasIniciais: text(\"providencias_iniciais\"),\n  providenciasIntermediarias: text(\"providencias_intermediarias\"),\n  providenciasConclusivas: text(\"providencias_conclusivas\"),\n  dataInicioPrazo: date(\"data_inicio_prazo\"),\n  diasPrazo: integer(\"dias_prazo\"),\n  dataFimRegularizacao: date(\"data_fim_regularizacao\"),\n  statusPrazo: text(\"status_prazo\"),\n  dataDeterminadaNovaInspecao: date(\"data_determinada_nova_inspecao\"),\n  criticidade: text(\"criticidade\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  uniqueInspection: uniqueIndex(\"unique_inspection_idx\").on(\n    table.numero,\n    table.unidadeInspecionada,\n    table.departamento,\n    table.naoConformidade\n  ),\n}));\n\nexport const controlePrazos = pgTable(\"controle_prazos\", {\n  id: serial(\"id\").primaryKey(),\n  unidade: text(\"unidade\").notNull(),\n  oficio: text(\"oficio\").notNull(),\n  linkSei: text(\"link_sei\"),\n  linkCoda: text(\"link_coda\"),\n  naoConformidade: text(\"nao_conformidade\").notNull(),\n  dataRecebimento: date(\"data_recebimento\").notNull(),\n  dataPrazo: date(\"data_prazo\").notNull(),\n  status: text(\"status\").notNull().default(\"pendente\"), // \"regularizado\" | \"nao_regularizado\" | \"pendente\"\n  observacoes: text(\"observacoes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  uniqueControlePrazo: uniqueIndex(\"unique_controle_prazo_idx\").on(\n    table.oficio,\n    table.unidade,\n    table.naoConformidade\n  ),\n}));\n\nexport const galleryPhotos = pgTable(\"gallery_photos\", {\n  id: serial(\"id\").primaryKey(),\n  unidade: text(\"unidade\").notNull(),\n  fileName: text(\"file_name\").notNull(),\n  fileType: text(\"file_type\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  imageData: text(\"image_data\").notNull(), // base64 compressed image\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const documents = pgTable(\"documents\", {\n  id: serial(\"id\").primaryKey(),\n  tipo: text(\"tipo\").notNull(), // 'Lei' | 'Instrução Normativa' | 'Portaria' | 'Ofício Circular' | 'Nota Técnica' | 'Termo de Cooperação Técnica'\n  numero: text(\"numero\").notNull(),\n  ano: text(\"ano\").notNull(),\n  titulo: text(\"titulo\").notNull(),\n  descricao: text(\"descricao\"),\n  orgaoEmissor: text(\"orgao_emissor\"),\n  dataPublicacao: date(\"data_publicacao\"),\n  dataVigencia: date(\"data_vigencia\"),\n  status: text(\"status\").notNull().default(\"Vigente\"), // 'Vigente' | 'Revogado' | 'Suspenso'\n  assunto: text(\"assunto\"),\n  arquivoUrl: text(\"arquivo_url\"), // URL or path to the document file\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  uniqueDocument: uniqueIndex(\"unique_document_idx\").on(\n    table.tipo,\n    table.numero,\n    table.ano\n  ),\n}));\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertInspectionSchema = createInsertSchema(inspections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertControlePrazoSchema = createInsertSchema(controlePrazos).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertGalleryPhotoSchema = createInsertSchema(galleryPhotos).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Nome de usuário é obrigatório\"),\n  password: z.string().min(1, \"Senha é obrigatória\"),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertInspection = z.infer<typeof insertInspectionSchema>;\nexport type Inspection = typeof inspections.$inferSelect;\nexport type InsertControlePrazo = z.infer<typeof insertControlePrazoSchema>;\nexport type ControlePrazo = typeof controlePrazos.$inferSelect;\nexport type InsertGalleryPhoto = z.infer<typeof insertGalleryPhotoSchema>;\nexport type GalleryPhoto = typeof galleryPhotos.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type LoginRequest = z.infer<typeof loginSchema>;\n","size_bytes":5165},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"./lib/auth\";\nimport LoginPage from \"./pages/login\";\nimport Dashboard from \"./pages/dashboard\";\n\nfunction Router() {\n  const { isAuthenticated } = useAuth();\n\n  if (!isAuthenticated) {\n    return <LoginPage />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={Dashboard} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  return (\n    <AuthProvider>\n      <Router />\n    </AuthProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <AppContent />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1022},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Custom Police Colors */\n  --police-blue: hsl(220, 91%, 42%);\n  --police-light: hsl(214, 95%, 60%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .bg-police-blue {\n    background-color: var(--police-blue);\n  }\n  \n  .text-police-blue {\n    color: var(--police-blue);\n  }\n  \n  .border-police-blue {\n    border-color: var(--police-blue);\n  }\n  \n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n","size_bytes":2140},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/admin-auth.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Shield, Lock, Key, AlertCircle } from \"lucide-react\";\n\ninterface AdminAuthProps {\n  onAuthenticated: () => void;\n}\n\nexport default function AdminAuth({ onAuthenticated }: AdminAuthProps) {\n  const [adminPassword, setAdminPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleAdminAuth = async () => {\n    if (!adminPassword) {\n      setError('Digite a senha de administração');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      // Verificar senha administrativa específica\n      const response = await fetch('/api/admin/authenticate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        },\n        body: JSON.stringify({ adminPassword })\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        // Armazenar autenticação admin no sessionStorage (válida apenas para a sessão)\n        sessionStorage.setItem('adminAuth', 'true');\n        onAuthenticated();\n      } else {\n        setError(result.message || 'Senha de administração incorreta');\n      }\n    } catch (err) {\n      setError('Erro de conexão');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleAdminAuth();\n    }\n  };\n\n  return (\n    <div className=\"min-h-[60vh] flex items-center justify-center\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center\">\n            <Shield className=\"w-6 h-6 mr-2 text-police-blue\" />\n            Acesso Administrativo\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <Alert>\n            <Key className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Área Restrita:</strong> Esta seção requer autenticação administrativa adicional. \n              Apenas pessoal autorizado da ASTEC-CORREPOL pode acessar as funcionalidades de upload de dados.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"admin-password\" className=\"flex items-center mb-2\">\n                <Lock className=\"w-4 h-4 mr-2\" />\n                Senha de Administração\n              </Label>\n              <Input\n                id=\"admin-password\"\n                type=\"password\"\n                value={adminPassword}\n                onChange={(e) => setAdminPassword(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Digite a senha administrativa\"\n                className=\"w-full\"\n                disabled={loading}\n              />\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Button\n              onClick={handleAdminAuth}\n              disabled={loading || !adminPassword}\n              className=\"w-full bg-police-blue hover:bg-blue-700\"\n            >\n              {loading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Verificando...\n                </>\n              ) : (\n                <>\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Acessar Administração\n                </>\n              )}\n            </Button>\n          </div>\n\n          <div className=\"text-center text-sm text-gray-600\">\n            <p>Se você não possui acesso administrativo,</p>\n            <p>entre em contato com a coordenação da ASTEC-CORREPOL.</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4319},"client/src/components/admin-upload.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Upload, FileSpreadsheet, Shield, CheckCircle, AlertCircle, Info, LogOut, Clock, Trash2 } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport AdminAuth from \"./admin-auth\";\n\nexport default function AdminUpload() {\n  const [isAdminAuthenticated, setIsAdminAuthenticated] = useState(false);\n  const [file, setFile] = useState<File | null>(null);\n  const [controlePrazosFile, setControlePrazosFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadingControlePrazos, setUploadingControlePrazos] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [controlePrazosProgress, setControlePrazosProgress] = useState(0);\n  const [result, setResult] = useState<any>(null);\n  const [controlePrazosResult, setControlePrazosResult] = useState<any>(null);\n  const [error, setError] = useState<string>('');\n  const [controlePrazosError, setControlePrazosError] = useState<string>('');\n  const [deletingInspections, setDeletingInspections] = useState(false);\n  const [deletingControlePrazos, setDeletingControlePrazos] = useState(false);\n  const [deleteResult, setDeleteResult] = useState<any>(null);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    // Verificar se já está autenticado como admin na sessão\n    const adminAuth = sessionStorage.getItem('adminAuth');\n    if (adminAuth === 'true') {\n      setIsAdminAuthenticated(true);\n    }\n  }, []);\n\n  const handleAdminLogout = () => {\n    sessionStorage.removeItem('adminAuth');\n    setIsAdminAuthenticated(false);\n    setFile(null);\n    setControlePrazosFile(null);\n    setResult(null);\n    setControlePrazosResult(null);\n    setError('');\n    setControlePrazosError('');\n  };\n\n  // Se não está autenticado como admin, mostrar tela de autenticação\n  if (!isAdminAuthenticated) {\n    return <AdminAuth onAuthenticated={() => setIsAdminAuthenticated(true)} />;\n  }\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      // Validar tipo de arquivo\n      if (!selectedFile.name.endsWith('.xlsx') && !selectedFile.name.endsWith('.xls')) {\n        setError('Apenas arquivos Excel (.xlsx, .xls) são permitidos');\n        return;\n      }\n      setFile(selectedFile);\n      setError('');\n      setResult(null);\n    }\n  };\n\n  const handleControlePrazosFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      // Validar tipo de arquivo\n      if (!selectedFile.name.endsWith('.xlsx') && !selectedFile.name.endsWith('.xls')) {\n        setControlePrazosError('Apenas arquivos Excel (.xlsx, .xls) são permitidos');\n        return;\n      }\n      setControlePrazosFile(selectedFile);\n      setControlePrazosError('');\n      setControlePrazosResult(null);\n    }\n  };\n\n  const handleDeleteAllInspections = async () => {\n    if (!confirm('⚠️ ATENÇÃO: Esta ação removerá TODOS os dados de inspeções do sistema. Esta operação não pode ser desfeita. Confirma?')) {\n      return;\n    }\n\n    setDeletingInspections(true);\n    setDeleteResult(null);\n\n    try {\n      const accessToken = localStorage.getItem('accessToken');\n      if (!accessToken) {\n        throw new Error('Token de acesso não encontrado. Faça login novamente.');\n      }\n\n      const response = await fetch('/api/admin/delete-all-inspections', {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao remover dados');\n      }\n\n      setDeleteResult(data);\n      \n      // Invalidar cache do React Query para atualizar todas as telas\n      await queryClient.invalidateQueries({ queryKey: ['/api/inspections'] });\n      await queryClient.invalidateQueries({ queryKey: ['/api/reports/data'] });\n      await queryClient.refetchQueries({ queryKey: ['/api/inspections'] });\n      await queryClient.refetchQueries({ queryKey: ['/api/reports/data'] });\n      \n      // Forçar atualização da página se necessário\n      window.location.reload();\n\n    } catch (err: any) {\n      setError(err.message || 'Erro ao remover dados de inspeções');\n    } finally {\n      setDeletingInspections(false);\n    }\n  };\n\n  const handleDeleteAllControlePrazos = async () => {\n    if (!confirm('⚠️ ATENÇÃO: Esta ação removerá TODOS os dados de controle de prazos do sistema. Esta operação não pode ser desfeita. Confirma?')) {\n      return;\n    }\n\n    setDeletingControlePrazos(true);\n    setDeleteResult(null);\n\n    try {\n      const accessToken = localStorage.getItem('accessToken');\n      if (!accessToken) {\n        throw new Error('Token de acesso não encontrado. Faça login novamente.');\n      }\n\n      const response = await fetch('/api/admin/delete-all-controle-prazos', {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao remover dados');\n      }\n\n      setDeleteResult(data);\n      \n      // Invalidar cache do React Query para atualizar todas as telas\n      await queryClient.invalidateQueries({ queryKey: ['/api/controle-prazos'] });\n      await queryClient.refetchQueries({ queryKey: ['/api/controle-prazos'] });\n      \n      // Forçar atualização da página se necessário\n      window.location.reload();\n\n    } catch (err: any) {\n      setControlePrazosError(err.message || 'Erro ao remover dados de controle de prazos');\n    } finally {\n      setDeletingControlePrazos(false);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!file) {\n      setError('Selecione um arquivo Excel');\n      return;\n    }\n\n    if (!user) {\n      setError('Usuário não autenticado');\n      return;\n    }\n\n    setUploading(true);\n    setUploadProgress(10);\n    setError('');\n    setResult(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('excel', file);\n\n      // Obter token de acesso do localStorage\n      const accessToken = localStorage.getItem('accessToken');\n      if (!accessToken) {\n        throw new Error('Token de acesso não encontrado. Faça login novamente.');\n      }\n\n      setUploadProgress(30);\n\n      const response = await fetch('/api/admin/upload-excel', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n\n      setUploadProgress(70);\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro no upload');\n      }\n\n      setUploadProgress(100);\n      setResult(data);\n      setFile(null);\n      \n      // Invalidar cache do React Query para forçar recarregamento dos dados\n      await queryClient.invalidateQueries({ queryKey: ['/api/inspections'] });\n      await queryClient.invalidateQueries({ queryKey: ['/api/reports/data'] });\n      \n      // Limpar input de arquivo\n      const fileInput = document.getElementById('excel-file') as HTMLInputElement;\n      if (fileInput) fileInput.value = '';\n      \n      console.log('✅ Cache invalidado, dados atualizados');\n\n    } catch (err: any) {\n      setError(err.message || 'Erro ao fazer upload da planilha');\n    } finally {\n      setUploading(false);\n      setTimeout(() => setUploadProgress(0), 1000);\n    }\n  };\n\n  const handleControlePrazosUpload = async () => {\n    if (!controlePrazosFile) {\n      setControlePrazosError('Selecione um arquivo Excel');\n      return;\n    }\n\n    if (!user) {\n      setControlePrazosError('Usuário não autenticado');\n      return;\n    }\n\n    setUploadingControlePrazos(true);\n    setControlePrazosProgress(10);\n    setControlePrazosError('');\n    setControlePrazosResult(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('excel', controlePrazosFile);\n\n      // Obter token de acesso do localStorage\n      const accessToken = localStorage.getItem('accessToken');\n      console.log('🔑 Verificando token de acesso:', accessToken ? 'Presente' : 'Ausente');\n      console.log('👤 Usuário logado:', user?.username);\n      \n      if (!accessToken) {\n        throw new Error('Token de acesso não encontrado. Faça login novamente.');\n      }\n\n      setControlePrazosProgress(30);\n\n      console.log('📤 Iniciando upload de controle de prazos...');\n      const response = await fetch('/api/admin/upload-controle-prazos', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n\n      setControlePrazosProgress(70);\n      console.log('📊 Response status:', response.status);\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        console.error('❌ Erro no upload:', data);\n        throw new Error(data.error || data.message || 'Erro no upload');\n      }\n\n      setControlePrazosProgress(100);\n      setControlePrazosResult(data);\n      setControlePrazosFile(null);\n      \n      // Invalidar cache do React Query para forçar recarregamento dos dados\n      await queryClient.invalidateQueries({ queryKey: ['/api/controle-prazos'] });\n      \n      // Limpar input de arquivo\n      const fileInput = document.getElementById('controle-prazos-file') as HTMLInputElement;\n      if (fileInput) fileInput.value = '';\n      \n      console.log('✅ Cache invalidado, dados de controle de prazos atualizados');\n\n    } catch (err: any) {\n      setControlePrazosError(err.message || 'Erro ao fazer upload da planilha de controle de prazos');\n    } finally {\n      setUploadingControlePrazos(false);\n      setTimeout(() => setControlePrazosProgress(0), 1000);\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Shield className=\"w-5 h-5 mr-2 text-police-blue\" />\n              Administração - Upload de Planilha Excel\n            </div>\n            <Button\n              onClick={handleAdminLogout}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"text-xs\"\n            >\n              <LogOut className=\"w-3 h-3 mr-1\" />\n              Sair da Administração\n            </Button>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-8\">\n          \n          {/* Info sobre acesso restrito */}\n          <Alert>\n            <Info className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Acesso Restrito:</strong> Esta funcionalidade está disponível apenas para administradores autenticados. \n              O upload substituirá todos os dados existentes no banco com os dados da nova planilha.\n            </AlertDescription>\n          </Alert>\n\n          {/* Upload Section - Dados de Inspeção */}\n          <div className=\"border rounded-lg p-4 bg-gray-50\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n              <Upload className=\"w-5 h-5 mr-2\" />\n              Upload de Dados de Inspeção\n            </h3>\n\n            <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"excel-file\" className=\"flex items-center mb-2\">\n                <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                Selecionar Planilha Excel\n              </Label>\n              <Input\n                id=\"excel-file\"\n                type=\"file\"\n                accept=\".xlsx,.xls\"\n                onChange={handleFileChange}\n                disabled={uploading}\n                className=\"cursor-pointer\"\n              />\n              {file && (\n                <div className=\"mt-2 text-sm text-gray-600\">\n                  <p><strong>Arquivo:</strong> {file.name}</p>\n                  <p><strong>Tamanho:</strong> {formatFileSize(file.size)}</p>\n                </div>\n              )}\n            </div>\n\n            {/* Progress Bar */}\n            {uploading && (\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Processando...</span>\n                  <span>{uploadProgress}%</span>\n                </div>\n                <Progress value={uploadProgress} className=\"h-2\" />\n              </div>\n            )}\n\n            {/* Upload Button */}\n            <Button\n              onClick={handleUpload}\n              disabled={!file || uploading}\n              className=\"w-full bg-police-blue hover:bg-blue-700\"\n            >\n              {uploading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Processando Planilha...\n                </>\n              ) : (\n                <>\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Fazer Upload e Atualizar Banco de Dados\n                </>\n              )}\n            </Button>\n          </div>\n\n          {/* Error Message */}\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Success Result */}\n          {result && (\n            <Alert className=\"border-green-200 bg-green-50\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <AlertDescription className=\"text-green-800\">\n                <div className=\"space-y-2\">\n                  <p><strong>Upload realizado com sucesso!</strong></p>\n                  <p><strong>Registros processados:</strong> {result.count}</p>\n                  <p><strong>Carregado por:</strong> {result.uploadedBy}</p>\n                  <p><strong>Data/Hora:</strong> {new Date(result.timestamp).toLocaleString('pt-BR')}</p>\n                  <p className=\"text-sm mt-2\">{result.message}</p>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n\n            {/* Requirements Info - Dados de Inspeção */}\n            <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n              <h4 className=\"font-medium mb-2\">Requisitos da Planilha de Inspeção:</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>• Formato: .xlsx ou .xls</li>\n                <li>• Primeira linha deve conter os cabeçalhos das colunas</li>\n                <li>• Colunas obrigatórias: Unidade Inspecionada, Departamento</li>\n                <li>• Colunas suportadas: Nº, Data da Inspeção, Delegado Corregedor, Não Conformidade, etc.</li>\n                <li>• Tamanho máximo: 50MB</li>\n              </ul>\n            </div>\n          </div>\n\n          {/* Upload Section - Controle de Prazos */}\n          <div className=\"border rounded-lg p-4 bg-gray-50\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n              <Clock className=\"w-5 h-5 mr-2\" />\n              Upload de Controle de Prazos\n            </h3>\n\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"controle-prazos-file\" className=\"flex items-center mb-2\">\n                  <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                  Selecionar Planilha de Controle de Prazos\n                </Label>\n                <Input\n                  id=\"controle-prazos-file\"\n                  type=\"file\"\n                  accept=\".xlsx,.xls\"\n                  onChange={handleControlePrazosFileChange}\n                  disabled={uploadingControlePrazos}\n                  className=\"cursor-pointer\"\n                />\n                {controlePrazosFile && (\n                  <div className=\"mt-2 text-sm text-gray-600\">\n                    <p><strong>Arquivo:</strong> {controlePrazosFile.name}</p>\n                    <p><strong>Tamanho:</strong> {formatFileSize(controlePrazosFile.size)}</p>\n                  </div>\n                )}\n              </div>\n\n              {/* Progress Bar - Controle de Prazos */}\n              {uploadingControlePrazos && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Processando...</span>\n                    <span>{controlePrazosProgress}%</span>\n                  </div>\n                  <Progress value={controlePrazosProgress} className=\"h-2\" />\n                </div>\n              )}\n\n              {/* Upload Button - Controle de Prazos */}\n              <Button\n                onClick={handleControlePrazosUpload}\n                disabled={!controlePrazosFile || uploadingControlePrazos}\n                className=\"w-full bg-green-600 hover:bg-green-700\"\n              >\n                {uploadingControlePrazos ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Processando Controle de Prazos...\n                  </>\n                ) : (\n                  <>\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Upload de Controle de Prazos\n                  </>\n                )}\n              </Button>\n            </div>\n\n            {/* Error Message - Controle de Prazos */}\n            {controlePrazosError && (\n              <Alert variant=\"destructive\" className=\"mt-4\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{controlePrazosError}</AlertDescription>\n              </Alert>\n            )}\n\n            {/* Success Result - Controle de Prazos */}\n            {controlePrazosResult && (\n              <Alert className=\"border-green-200 bg-green-50 mt-4\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <AlertDescription className=\"text-green-800\">\n                  <div className=\"space-y-2\">\n                    <p><strong>Upload de controle de prazos realizado com sucesso!</strong></p>\n                    <p><strong>Registros processados:</strong> {controlePrazosResult.count}</p>\n                    <p><strong>Carregado por:</strong> {controlePrazosResult.uploadedBy}</p>\n                    <p><strong>Data/Hora:</strong> {new Date(controlePrazosResult.timestamp).toLocaleString('pt-BR')}</p>\n                    <p className=\"text-sm mt-2\">{controlePrazosResult.message}</p>\n                  </div>\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {/* Requirements Info - Controle de Prazos */}\n            <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\n              <h4 className=\"font-medium mb-2\">Requisitos da Planilha de Controle de Prazos:</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>• Formato: .xlsx ou .xls</li>\n                <li>• Colunas obrigatórias: <strong>Unidade, Ofício, Link SEI, Não Conformidade, Data Recebimento, Data Prazo, Status</strong></li>\n                <li>• Status aceitos: \"Regularizado\", \"Não Regularizado\", \"Pendente\"</li>\n                <li>• Datas em formato DD/MM/AAAA ou formato Excel</li>\n                <li>• Tamanho máximo: 50MB</li>\n              </ul>\n            </div>\n          </div>\n\n          {/* Delete Section */}\n          <div className=\"border rounded-lg p-4 bg-red-50 border-red-200\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center text-red-700\">\n              <Trash2 className=\"w-5 h-5 mr-2\" />\n              Remoção de Dados\n            </h3>\n\n            <div className=\"space-y-4\">\n              <Alert variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>⚠️ ATENÇÃO:</strong> As operações abaixo removem TODOS os dados do sistema e não podem ser desfeitas. Use com extrema cautela.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"flex flex-col gap-3\">\n                <Button\n                  onClick={handleDeleteAllInspections}\n                  disabled={deletingInspections}\n                  variant=\"destructive\"\n                  className=\"w-full\"\n                >\n                  {deletingInspections ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Removendo Dados de Inspeções...\n                    </>\n                  ) : (\n                    <>\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Remover Todos os Dados de Inspeções\n                    </>\n                  )}\n                </Button>\n\n                <Button\n                  onClick={handleDeleteAllControlePrazos}\n                  disabled={deletingControlePrazos}\n                  variant=\"destructive\"\n                  className=\"w-full\"\n                >\n                  {deletingControlePrazos ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Removendo Dados de Controle de Prazos...\n                    </>\n                  ) : (\n                    <>\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Remover Todos os Dados de Controle de Prazos\n                    </>\n                  )}\n                </Button>\n              </div>\n\n              {deleteResult && (\n                <Alert className=\"border-green-200 bg-green-50\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <AlertDescription className=\"text-green-800\">\n                    <div className=\"space-y-2\">\n                      <p><strong>Operação realizada com sucesso!</strong></p>\n                      <p><strong>Executado por:</strong> {deleteResult.deletedBy}</p>\n                      <p><strong>Data/Hora:</strong> {new Date(deleteResult.timestamp).toLocaleString('pt-BR')}</p>\n                      <p className=\"text-sm mt-2\">{deleteResult.message}</p>\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              )}\n            </div>\n          </div>\n\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":23141},"client/src/components/controle-prazos.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Clock, FileText, Plus, ChevronLeft, ChevronRight, Filter, CheckCircle, XCircle, Edit, ExternalLink } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Schema for form validation\nconst controlePrazoSchema = z.object({\n  unidade: z.string().min(1, \"Unidade é obrigatória\"),\n  oficio: z.string().min(1, \"Ofício é obrigatório\"),\n  linkSei: z.string().optional(),\n  linkCoda: z.string().optional(),\n  naoConformidade: z.string().min(1, \"Não conformidade é obrigatória\"),\n  dataRecebimento: z.string().min(1, \"Data de recebimento é obrigatória\"),\n  dataPrazo: z.string().min(1, \"Data prazo é obrigatória\"),\n  status: z.enum([\"pendente\", \"regularizado\", \"nao_regularizado\"]),\n  observacoes: z.string().optional(),\n});\n\ntype ControlePrazoForm = z.infer<typeof controlePrazoSchema>;\n\nexport default function StatusRegularizacao() {\n  const [filters, setFilters] = useState({\n    unidade: '',\n    status: '',\n    searchTerm: ''\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const itemsPerPage = 10;\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Função para calcular dias restantes automaticamente\n  const calculateDaysRemaining = (dataPrazo: string) => {\n    if (!dataPrazo) return 0;\n    \n    try {\n      const today = new Date();\n      let deadline;\n      \n      // Verificar se é uma data ISO (formato YYYY-MM-DD) ou timestamp\n      if (dataPrazo.includes('-') && dataPrazo.length === 10) {\n        // Formato YYYY-MM-DD, precisa adicionar timezone local\n        deadline = new Date(dataPrazo + 'T00:00:00');\n      } else {\n        // Outros formatos ou timestamps\n        deadline = new Date(dataPrazo);\n      }\n      \n      // Zerar horários para comparação apenas de datas\n      today.setHours(0, 0, 0, 0);\n      deadline.setHours(0, 0, 0, 0);\n      \n      const timeDiff = deadline.getTime() - today.getTime();\n      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n      \n      return daysDiff;\n    } catch (error) {\n      console.error('Erro ao calcular dias restantes:', error);\n      return 0;\n    }\n  };\n\n  // Get control records with auto-refresh for real-time countdown\n  const { data: controlePrazos = [], isLoading } = useQuery<any[]>({\n    queryKey: ['/api/controle-prazos'],\n    refetchInterval: 60000, // Atualiza a cada 1 minuto para mostrar contagem regressiva\n  });\n\n  // Force re-render every minute to update countdown display\n  const [, setCurrentTime] = useState(new Date());\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60000); // Atualiza a cada minuto\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Get unique units from controle de prazos data ONLY\n  const uniqueUnidades = Array.from(new Set(controlePrazos.map((item: any) => item.unidade))).sort();\n\n  // Form setup\n  const form = useForm<ControlePrazoForm>({\n    resolver: zodResolver(controlePrazoSchema),\n    defaultValues: {\n      unidade: \"\",\n      oficio: \"\",\n      linkSei: \"\",\n      linkCoda: \"\",\n      naoConformidade: \"\",\n      dataRecebimento: \"\",\n      dataPrazo: \"\",\n      status: \"pendente\",\n      observacoes: \"\",\n    },\n  });\n\n  // Create mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: ControlePrazoForm) => {\n      const response = await apiRequest('/api/controle-prazos', 'POST', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/controle-prazos'] });\n      toast({ title: \"Registro criado com sucesso!\" });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      console.error('Create error:', error);\n      toast({ \n        title: \"Erro ao criar registro\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Update mutation - para edição completa do registro\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number, data: ControlePrazoForm }) => {\n      console.log(`Updating controle-prazo ${id} with data:`, data);\n      const response = await apiRequest(`/api/controle-prazos/${id}`, 'PATCH', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/controle-prazos'] });\n      toast({ title: \"Registro atualizado com sucesso!\" });\n      setIsDialogOpen(false);\n      setEditingItem(null);\n      form.reset();\n    },\n    onError: (error) => {\n      console.error('Update error:', error);\n      toast({ \n        title: \"Erro ao atualizar registro\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Status update mutation - para mudanças rápidas de status\n  const statusUpdateMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number, status: string }) => {\n      console.log(`Updating status of controle-prazo ${id} to ${status}`);\n      const response = await apiRequest(`/api/controle-prazos/${id}`, 'PATCH', { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/controle-prazos'] });\n      toast({ title: \"Status atualizado com sucesso!\" });\n    },\n    onError: (error) => {\n      console.error('Status update error:', error);\n      toast({ \n        title: \"Erro ao atualizar status\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Apply filters\n  const filteredData = controlePrazos.filter((item: any) => {\n    const matchesUnidade = !filters.unidade || item.unidade === filters.unidade;\n    const matchesStatus = !filters.status || item.status === filters.status;\n    const matchesSearch = !filters.searchTerm || \n      item.unidade.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||\n      item.oficio.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||\n      item.naoConformidade.toLowerCase().includes(filters.searchTerm.toLowerCase());\n    \n    return matchesUnidade && matchesStatus && matchesSearch;\n  });\n\n  // Calculate pagination\n  const totalPages = Math.ceil(filteredData.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedData = filteredData.slice(startIndex, endIndex);\n\n  // Helper functions\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'regularizado':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"w-3 h-3 mr-1\" />Regularizado</Badge>;\n      case 'nao_regularizado':\n        return <Badge className=\"bg-red-100 text-red-800\"><XCircle className=\"w-3 h-3 mr-1\" />Não Regularizado</Badge>;\n      default:\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"w-3 h-3 mr-1\" />Pendente</Badge>;\n    }\n  };\n\n  const getDaysRemaining = (dataPrazo: string, status: string) => {\n    // Se já foi regularizado, não exibir dias restantes\n    if (status === 'regularizado') {\n      return <span className=\"text-green-600 font-medium\">✓ Regularizado</span>;\n    }\n    \n    // Se não foi regularizado, não exibir dias restantes\n    if (status === 'nao_regularizado') {\n      return <span className=\"text-red-600 font-medium\">✗ Não Regularizado</span>;\n    }\n    \n    // Se não tem data prazo definida\n    if (!dataPrazo || dataPrazo === 'Não definida') {\n      return <span className=\"text-gray-500 font-medium\">Não definida</span>;\n    }\n    \n    // Para status pendente com data prazo, calcular normalmente\n    const diffDays = calculateDaysRemaining(dataPrazo);\n    \n    if (diffDays < 0) {\n      return <span className=\"text-red-600 font-medium\">{Math.abs(diffDays)} dias em atraso</span>;\n    } else if (diffDays <= 7) {\n      return <span className=\"text-yellow-600 font-medium\">{diffDays} dias restantes</span>;\n    } else {\n      return <span className=\"text-green-600 font-medium\">{diffDays} dias restantes</span>;\n    }\n  };\n\n  const updateStatus = (id: number, newStatus: \"pendente\" | \"regularizado\" | \"nao_regularizado\") => {\n    statusUpdateMutation.mutate({ id, status: newStatus });\n  };\n\n  const generatePDF = async () => {\n    try {\n      console.log('Iniciando geração de PDF...');\n      console.log('Dados filtrados:', filteredData);\n      \n      if (!filteredData || filteredData.length === 0) {\n        toast({ \n          title: \"Erro ao gerar PDF\", \n          description: \"Nenhum dado encontrado para gerar o relatório\",\n          variant: \"destructive\" \n        });\n        return;\n      }\n\n      // Dynamic import as fallback\n      let jsPDF;\n      try {\n        // Try global first\n        if (typeof (window as any).jspdf !== 'undefined') {\n          jsPDF = (window as any).jspdf.jsPDF;\n        } else if (typeof (window as any).jsPDF !== 'undefined') {\n          jsPDF = (window as any).jsPDF;\n        } else {\n          // Fallback to dynamic import\n          const jsPDFModule = await import('jspdf');\n          jsPDF = jsPDFModule.default;\n        }\n      } catch (importError) {\n        console.error('Error importing jsPDF:', importError);\n        toast({ \n          title: \"Erro ao carregar PDF\", \n          description: \"Biblioteca de PDF não está disponível\",\n          variant: \"destructive\" \n        });\n        return;\n      }\n\n      const doc = new jsPDF();\n      \n      // Header\n      doc.setFontSize(16);\n      doc.text('Relatório de Controle de Prazos de Regularização', 20, 20);\n      \n      // Subtitle\n      doc.setFontSize(12);\n      doc.text('Polícia Civil do Estado da Bahia - ASTEC/CORREPOL', 20, 30);\n      doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, 20, 40);\n      \n      // Summary\n      const pendentes = filteredData.filter((item: any) => item.status === 'pendente').length;\n      const regularizados = filteredData.filter((item: any) => item.status === 'regularizado').length;\n      const naoRegularizados = filteredData.filter((item: any) => item.status === 'nao_regularizado').length;\n      \n      doc.text(`Total de registros: ${filteredData.length}`, 20, 55);\n      doc.text(`Pendentes: ${pendentes} | Regularizados: ${regularizados} | Não Regularizados: ${naoRegularizados}`, 20, 65);\n      \n      // Simple text-based report\n      let yPos = 85;\n      doc.setFontSize(10);\n      \n      filteredData.forEach((item: any, index: number) => {\n        if (yPos > 270) { // New page if needed\n          doc.addPage();\n          yPos = 20;\n        }\n        \n        const formatDate = (dateStr: string) => {\n          try {\n            if (!dateStr) return 'N/A';\n            const date = new Date(dateStr);\n            return isNaN(date.getTime()) ? 'Data inválida' : date.toLocaleDateString('pt-BR');\n          } catch {\n            return 'Data inválida';\n          }\n        };\n        \n        const statusText = item.status === 'regularizado' ? 'Regularizado' : \n                          item.status === 'nao_regularizado' ? 'Não Regularizado' : 'Pendente';\n        \n        doc.text(`${index + 1}. ${item.unidade}`, 20, yPos);\n        doc.text(`   Ofício: ${item.oficio}`, 20, yPos + 5);\n        doc.text(`   NC: ${(item.naoConformidade || '').substring(0, 60)}`, 20, yPos + 10);\n        doc.text(`   Recebimento: ${formatDate(item.dataRecebimento)} | Prazo: ${formatDate(item.dataPrazo)}`, 20, yPos + 15);\n        doc.text(`   Status: ${statusText}`, 20, yPos + 20);\n        \n        yPos += 30;\n      });\n      \n      const fileName = `controle-prazos-regularizacao-${new Date().toISOString().split('T')[0]}.pdf`;\n      doc.save(fileName);\n      \n      toast({ \n        title: \"PDF gerado com sucesso!\", \n        description: `Relatório ${fileName} foi baixado`\n      });\n      \n      console.log('PDF gerado com sucesso:', fileName);\n      \n    } catch (error) {\n      console.error('Erro detalhado ao gerar PDF:', error);\n      toast({ \n        title: \"Erro ao gerar PDF\", \n        description: `Erro: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n        variant: \"destructive\" \n      });\n    }\n  };\n\n  const onSubmit = (data: ControlePrazoForm) => {\n    if (editingItem) {\n      updateMutation.mutate({ id: editingItem.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (item: any) => {\n    setEditingItem(item);\n    form.reset({\n      unidade: item.unidade,\n      oficio: item.oficio,\n      linkSei: item.linkSei || '',\n      linkCoda: item.linkCoda || '',\n      naoConformidade: item.naoConformidade,\n      dataRecebimento: item.dataRecebimento,\n      dataPrazo: item.dataPrazo,\n      status: item.status,\n      observacoes: item.observacoes || '',\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setEditingItem(null);\n    form.reset();\n  };\n\n  const clearFilters = () => {\n    setFilters({ unidade: '', status: '', searchTerm: '' });\n    setCurrentPage(1);\n  };\n\n  if (isLoading) {\n    return <div className=\"flex justify-center p-8\">Carregando...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <Clock className=\"w-5 h-5 mr-2\" />\n            Controle de Prazos de Regularização\n          </CardTitle>\n          <div className=\"flex gap-2\">\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-police-blue hover:bg-blue-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Novo Registro\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingItem ? 'Editar Controle de Prazo' : 'Novo Controle de Prazo'}\n                  </DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"unidade\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Unidade</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Selecione a unidade\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {uniqueUnidades.map((unidade) => (\n                                  <SelectItem key={unidade} value={unidade}>{unidade}</SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"oficio\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Ofício</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Número do ofício\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"linkSei\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Link SEI (opcional)</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"https://sei.ba.gov.br/...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"linkCoda\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Link SICORQ (opcional)</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"https://sicorq...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"naoConformidade\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Não Conformidade</FormLabel>\n                          <FormControl>\n                            <Textarea placeholder=\"Descrição da não conformidade...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"dataRecebimento\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Data de Recebimento</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"dataPrazo\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Data Prazo</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"observacoes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Observações (opcional)</FormLabel>\n                          <FormControl>\n                            <Textarea placeholder=\"Observações adicionais...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end gap-2\">\n                      <Button type=\"button\" variant=\"outline\" onClick={handleCloseDialog}>\n                        Cancelar\n                      </Button>\n                      <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                        {(createMutation.isPending || updateMutation.isPending) ? \"Salvando...\" : \"Salvar\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n            \n            <Button onClick={generatePDF} variant=\"outline\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Gerar PDF\n            </Button>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Filter className=\"w-5 h-5 mr-2\" />\n            Filtros\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label>Unidade</Label>\n              <Select value={filters.unidade} onValueChange={(value) => setFilters({...filters, unidade: value === 'all' ? '' : value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todas as unidades\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as unidades</SelectItem>\n                  {uniqueUnidades.map((unidade) => (\n                    <SelectItem key={unidade} value={unidade}>{unidade}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Status</Label>\n              <Select value={filters.status} onValueChange={(value) => setFilters({...filters, status: value === 'all' ? '' : value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os status</SelectItem>\n                  <SelectItem value=\"pendente\">Pendente</SelectItem>\n                  <SelectItem value=\"regularizado\">Regularizado</SelectItem>\n                  <SelectItem value=\"nao_regularizado\">Não Regularizado</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Buscar</Label>\n              <Input \n                placeholder=\"Buscar por unidade, ofício...\" \n                value={filters.searchTerm}\n                onChange={(e) => setFilters({...filters, searchTerm: e.target.value})}\n              />\n            </div>\n\n            <div className=\"flex items-end\">\n              <Button variant=\"outline\" onClick={clearFilters}>\n                Limpar Filtros\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-2xl font-bold\">{filteredData.length}</div>\n            <p className=\"text-sm text-muted-foreground\">Total de Registros</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {filteredData.filter((item: any) => item.status === 'pendente').length}\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Pendentes</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {filteredData.filter((item: any) => item.status === 'regularizado').length}\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Regularizados</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-2xl font-bold text-red-600\">\n              {filteredData.filter((item: any) => item.status === 'nao_regularizado').length}\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Não Regularizados</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Table */}\n      <Card>\n        <CardContent>\n          {paginatedData.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Clock className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">Nenhum registro encontrado</p>\n              <p className=\"text-sm text-gray-400\">Crie um novo registro ou ajuste os filtros</p>\n            </div>\n          ) : (\n            <>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Unidade</TableHead>\n                    <TableHead>Ofício</TableHead>\n                    <TableHead>Não Conformidade</TableHead>\n                    <TableHead>Recebimento</TableHead>\n                    <TableHead>Prazo</TableHead>\n                    <TableHead>Dias Restantes</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Links</TableHead>\n                    <TableHead>Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {paginatedData.map((item: any) => (\n                    <TableRow key={item.id}>\n                      <TableCell className=\"font-medium\">{item.unidade}</TableCell>\n                      <TableCell>{item.oficio}</TableCell>\n                      <TableCell className=\"max-w-md break-words whitespace-normal\">{item.naoConformidade}</TableCell>\n                      <TableCell>{new Date(item.dataRecebimento).toLocaleDateString('pt-BR')}</TableCell>\n                      <TableCell>{new Date(item.dataPrazo).toLocaleDateString('pt-BR')}</TableCell>\n                      <TableCell>{getDaysRemaining(item.dataPrazo, item.status)}</TableCell>\n                      <TableCell>{getStatusBadge(item.status)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-1\">\n                          {item.linkSei ? (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              className=\"h-8 px-2 text-xs\"\n                              onClick={() => window.open(item.linkSei, '_blank')}\n                            >\n                              <ExternalLink className=\"w-3 h-3 mr-1\" />\n                              SEI\n                            </Button>\n                          ) : null}\n                          {item.linkCoda ? (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              className=\"h-8 px-2 text-xs bg-orange-50 border-orange-200 text-orange-700 hover:bg-orange-100\"\n                              onClick={() => window.open(item.linkCoda, '_blank')}\n                            >\n                              <ExternalLink className=\"w-3 h-3 mr-1\" />\n                              SICORQ\n                            </Button>\n                          ) : null}\n                          {!item.linkSei && !item.linkCoda && (\n                            <span className=\"text-gray-400 text-xs\">Sem link</span>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-1\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEdit(item)}\n                            className=\"h-8 px-2\"\n                          >\n                            <Edit className=\"w-3 h-3\" />\n                          </Button>\n                          {item.status !== 'regularizado' && (\n                            <Button\n                              size=\"sm\"\n                              onClick={() => updateStatus(item.id, 'regularizado')}\n                              className=\"bg-green-600 hover:bg-green-700 h-8 px-2\"\n                            >\n                              <CheckCircle className=\"w-3 h-3\" />\n                            </Button>\n                          )}\n                          {item.status !== 'nao_regularizado' && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => updateStatus(item.id, 'nao_regularizado')}\n                              className=\"h-8 px-2\"\n                            >\n                              <XCircle className=\"w-3 h-3\" />\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n\n              {/* Pagination */}\n              {totalPages > 1 && (\n                <div className=\"flex items-center justify-between pt-4\">\n                  <div className=\"text-sm text-gray-500\">\n                    Mostrando {startIndex + 1} a {Math.min(endIndex, filteredData.length)} de {filteredData.length} registros\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(currentPage - 1)}\n                      disabled={currentPage === 1}\n                    >\n                      <ChevronLeft className=\"w-4 h-4\" />\n                      Anterior\n                    </Button>\n                    <span className=\"text-sm\">\n                      Página {currentPage} de {totalPages}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(currentPage + 1)}\n                      disabled={currentPage === totalPages}\n                    >\n                      Próximo\n                      <ChevronRight className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":31303},"client/src/components/dashboard-general.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line, Area, AreaChart } from 'recharts';\nimport { ClipboardList, AlertTriangle, CheckCircle, Clock, Filter, FileText, TrendingUp, Users, Target, Activity } from \"lucide-react\";\nimport { generatePDFReport } from \"@/lib/pdf-generator\";\n\ninterface DashboardGeneralProps {\n  data: any[];\n  reportData?: any;\n  filters: any;\n  onFilterChange: (filters: any) => void;\n}\n\nexport default function DashboardGeneral({ data, reportData, filters, onFilterChange }: DashboardGeneralProps) {\n  const [localFilters, setLocalFilters] = useState(filters);\n\n  const applyFilters = () => {\n    const filtersToApply = {\n      ...localFilters,\n      // Convert single values to arrays for backend compatibility\n      unidade: localFilters.unidade && localFilters.unidade !== '' ? [localFilters.unidade] : undefined,\n      departamento: localFilters.departamento && localFilters.departamento !== '' ? [localFilters.departamento] : undefined,\n      naoConformidade: localFilters.naoConformidade && localFilters.naoConformidade !== '' ? [localFilters.naoConformidade] : undefined,\n      ano: localFilters.ano && localFilters.ano !== '' ? localFilters.ano : undefined\n    };\n    onFilterChange(filtersToApply);\n  };\n\n  const handleGeneratePDF = () => {\n    generatePDFReport('dashboard', data, reportData?.summary);\n  };\n\n  const handleGenerateNaoConformidadePDF = () => {\n    if (localFilters.naoConformidade) {\n      const filteredData = data.filter(item => \n        item.naoConformidade === localFilters.naoConformidade\n      );\n      generatePDFReport('nao-conformidade', filteredData, reportData?.summary, localFilters);\n    } else {\n      generatePDFReport('nao-conformidade', data, reportData?.summary, localFilters);\n    }\n  };\n\n  // Use summary from reportData which has correct filtering logic\n  const summary = reportData?.summary || {\n    totalInspections: 0,\n    totalNonCompliances: 0,\n    withinDeadline: 0,\n    nearDeadline: 0,\n    overdue: 0,\n    regularizados: 0,\n    pendentes: 0,\n    naoRegularizados: 0,\n    totalControlePrazos: 0,\n  };\n\n  const departmentData = reportData?.charts?.departmentData || [];\n  const statusData = reportData?.charts?.statusData || [];\n\n  const COLORS = ['hsl(207, 90%, 54%)', 'hsl(142, 76%, 36%)', 'hsl(45, 93%, 47%)', 'hsl(0, 84%, 60%)'];\n  \n  // Função para determinar a cor baseada no nome da categoria\n  const getColorForStatus = (statusName: string) => {\n    switch(statusName) {\n      case 'Com Prazo Vencido':\n        return 'hsl(0, 84%, 60%)'; // Vermelho\n      case 'Com Prazo Definido':\n        return 'hsl(45, 93%, 47%)'; // Amarelo\n      case 'Próximo do Vencimento':\n        return 'hsl(142, 76%, 36%)'; // Verde\n      case 'Sem Prazo Definido':\n        return 'hsl(207, 90%, 54%)'; // Azul\n      default:\n        return 'hsl(207, 90%, 54%)'; // Azul padrão\n    }\n  };\n\n  // Get unique values for filter dropdowns with proper sorting\n  const uniqueDepartamentos = Array.from(new Set(data.map(item => item.departamento))).sort();\n  const uniqueNaoConformidades = Array.from(new Set(data.map(item => item.naoConformidade))).sort();\n  \n  // Filter units based on selected department with better sorting\n  const filteredUnidades = localFilters.departamento \n    ? Array.from(new Set(data.filter(item => item.departamento === localFilters.departamento).map(item => item.unidadeInspecionada)))\n    : Array.from(new Set(data.map(item => item.unidadeInspecionada)));\n  \n  // Custom sorting function for units (numerical DTs first, then alphabetical)\n  const sortUnidades = (units: string[]) => {\n    return units.sort((a, b) => {\n      // Extract numbers from DT names for numerical sorting\n      const aMatch = a.match(/^(\\d+)ª?\\s*DT/);\n      const bMatch = b.match(/^(\\d+)ª?\\s*DT/);\n      \n      if (aMatch && bMatch) {\n        // Both are numbered DTs, sort numerically\n        return parseInt(aMatch[1]) - parseInt(bMatch[1]);\n      } else if (aMatch) {\n        // Only 'a' is numbered DT, it comes first\n        return -1;\n      } else if (bMatch) {\n        // Only 'b' is numbered DT, it comes first\n        return 1;\n      } else {\n        // Neither are numbered DTs, sort alphabetically\n        return a.localeCompare(b, 'pt-BR');\n      }\n    });\n  };\n  \n  const sortedFilteredUnidades = sortUnidades(filteredUnidades);\n  \n  // Reset unit filter when department changes\n  const handleDepartmentChange = (value: string) => {\n    setLocalFilters({...localFilters, departamento: value === 'all' ? '' : value, unidade: ''});\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Filter className=\"w-5 h-5 mr-2\" />\n            Filtros\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n            <div>\n              <Label>Ano da Inspeção</Label>\n              <Select value={localFilters.ano || 'all'} onValueChange={(value) => setLocalFilters({...localFilters, ano: value === 'all' ? '' : value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os anos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os anos</SelectItem>\n                  <SelectItem value=\"2024\">2024</SelectItem>\n                  <SelectItem value=\"2025\">2025</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Departamento</Label>\n              <Select value={localFilters.departamento || 'all'} onValueChange={handleDepartmentChange}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os departamentos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os departamentos</SelectItem>\n                  {uniqueDepartamentos.map(dept => (\n                    <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label>Unidade Inspecionada</Label>\n              <Select value={localFilters.unidade || 'all'} onValueChange={(value) => setLocalFilters({...localFilters, unidade: value === 'all' ? '' : value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todas as unidades\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as unidades</SelectItem>\n                  {sortedFilteredUnidades.slice(0, 50).map((unidade: string) => (\n                    <SelectItem key={unidade} value={unidade}>{unidade.length > 35 ? unidade.substring(0, 35) + '...' : unidade}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label>Não Conformidade</Label>\n              <Select value={localFilters.naoConformidade || 'all'} onValueChange={(value) => setLocalFilters({...localFilters, naoConformidade: value === 'all' ? '' : value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todas as não conformidades\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as não conformidades</SelectItem>\n                  {uniqueNaoConformidades.map(nc => (\n                    <SelectItem key={nc} value={nc}>{nc.length > 25 ? nc.substring(0, 25) + '...' : nc}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"col-span-full\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>Data Inicial</Label>\n                  <Input \n                    type=\"date\" \n                    onChange={(e) => setLocalFilters({...localFilters, dataInicial: e.target.value})}\n                    value={localFilters.dataInicial || ''}\n                  />\n                </div>\n                \n                <div>\n                  <Label>Data Final</Label>\n                  <Input \n                    type=\"date\" \n                    onChange={(e) => setLocalFilters({...localFilters, dataFinal: e.target.value})}\n                    value={localFilters.dataFinal || ''}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mt-4 flex gap-2\">\n            <Button onClick={applyFilters} className=\"bg-police-blue hover:bg-blue-700\">\n              Aplicar Filtros\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setLocalFilters({});\n                onFilterChange({});\n              }}\n            >\n              Limpar\n            </Button>\n            {localFilters.naoConformidade && (\n              <Button \n                onClick={handleGenerateNaoConformidadePDF}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Relatório da Não Conformidade\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Modern Statistics Overview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main KPI Card */}\n        <Card className=\"lg:col-span-2 bg-gradient-to-br from-blue-600 via-blue-700 to-indigo-800 text-white border-0\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div>\n                <h3 className=\"text-2xl font-bold\">Visão Geral das Inspeções</h3>\n                <p className=\"text-blue-100 mt-2\">Resumo executivo dos dados de conformidade</p>\n              </div>\n              <div className=\"p-3 bg-white/20 rounded-xl\">\n                <TrendingUp className=\"w-8 h-8\" />\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div className=\"bg-white/10 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 bg-white/20 rounded-lg\">\n                      <ClipboardList className=\"w-5 h-5\" />\n                    </div>\n                    <div>\n                      <p className=\"text-3xl font-bold\">{summary.totalInspections}</p>\n                      <p className=\"text-blue-100 text-sm\">Total de Inspeções</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-white/10 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 bg-white/20 rounded-lg\">\n                      <AlertTriangle className=\"w-5 h-5\" />\n                    </div>\n                    <div>\n                      <p className=\"text-3xl font-bold\">{summary.totalNonCompliances}</p>\n                      <p className=\"text-blue-100 text-sm\">Não Conformidades</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"bg-white/10 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 bg-white/20 rounded-lg\">\n                      <Target className=\"w-5 h-5\" />\n                    </div>\n                    <div>\n                      <p className=\"text-3xl font-bold\">{summary.withinDeadline}</p>\n                      <p className=\"text-blue-100 text-sm\">Com Prazo Definido</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-white/10 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 bg-red-400/30 rounded-lg\">\n                      <Clock className=\"w-5 h-5\" />\n                    </div>\n                    <div>\n                      <p className=\"text-3xl font-bold\">{summary.nearDeadline}</p>\n                      <p className=\"text-blue-100 text-sm\">Prazo Vencido</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Status Regularização Card */}\n        <Card className=\"bg-gradient-to-br from-emerald-50 to-teal-50 border-emerald-200\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center text-emerald-800\">\n              <Activity className=\"w-6 h-6 mr-2\" />\n              Status de Regularização\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-center mb-4\">\n              <p className=\"text-3xl font-bold text-emerald-700\">{summary.totalControlePrazos}</p>\n              <p className=\"text-sm text-emerald-600\">Total de Registros</p>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between p-3 bg-green-100 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-sm font-medium text-green-700\">Regularizadas</span>\n                </div>\n                <Badge className=\"bg-green-500 text-white\">{summary.regularizados}</Badge>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 bg-yellow-100 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                  <span className=\"text-sm font-medium text-yellow-700\">Pendentes</span>\n                </div>\n                <Badge className=\"bg-yellow-500 text-white\">{summary.pendentes}</Badge>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 bg-red-100 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                  <span className=\"text-sm font-medium text-red-700\">Não Regularizadas</span>\n                </div>\n                <Badge className=\"bg-red-500 text-white\">{summary.naoRegularizados}</Badge>\n              </div>\n            </div>\n            \n            {/* Progress Bar */}\n            <div className=\"mt-4\">\n              <div className=\"flex justify-between text-xs text-gray-600 mb-1\">\n                <span>Taxa de Regularização</span>\n                <span>{summary.totalControlePrazos > 0 ? ((summary.regularizados / summary.totalControlePrazos) * 100).toFixed(1) : 0}%</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-emerald-500 h-2 rounded-full transition-all duration-300\"\n                  style={{ \n                    width: summary.totalControlePrazos > 0 ? `${(summary.regularizados / summary.totalControlePrazos) * 100}%` : '0%'\n                  }}\n                ></div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Modern Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Department Chart - Enhanced */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <div>\n              <CardTitle className=\"text-xl font-bold text-gray-800\">Distribuição por Departamento</CardTitle>\n              <p className=\"text-sm text-gray-500 mt-1\">Análise de inspeções realizadas por órgão</p>\n            </div>\n            <Button onClick={handleGeneratePDF} className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Relatório PDF\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={350}>\n              <AreaChart data={departmentData} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}>\n                <defs>\n                  <linearGradient id=\"colorGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1}/>\n                  </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                <XAxis \n                  dataKey=\"name\" \n                  fontSize={10} \n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={60}\n                  stroke=\"#6b7280\"\n                />\n                <YAxis fontSize={12} stroke=\"#6b7280\" />\n                <Tooltip \n                  formatter={(value, name) => [value, 'Inspeções']}\n                  contentStyle={{\n                    backgroundColor: 'white',\n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                />\n                <Area \n                  type=\"monotone\"\n                  dataKey=\"value\" \n                  stroke=\"#3b82f6\"\n                  strokeWidth={2}\n                  fill=\"url(#colorGradient)\"\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Enhanced Status Chart */}\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-lg font-bold text-gray-800\">Status dos Prazos</CardTitle>\n            <p className=\"text-sm text-gray-500\">Situação atual das cobranças</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-6\">\n              {/* Gráfico à esquerda */}\n              <div className=\"flex-shrink-0\">\n                <ResponsiveContainer width={180} height={180}>\n                  <PieChart>\n                    <Pie\n                      data={statusData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={0}\n                      outerRadius={80}\n                      paddingAngle={3}\n                      dataKey=\"value\"\n                    >\n                      {statusData.map((entry: any, index: number) => (\n                        <Cell key={`cell-${index}`} fill={getColorForStatus(entry.name)} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      formatter={(value, name) => [`${value} registros`, name]}\n                      contentStyle={{\n                        backgroundColor: 'white',\n                        border: '1px solid #e5e7eb',\n                        borderRadius: '8px',\n                        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n              \n              {/* Legenda à direita */}\n              <div className=\"flex-1 space-y-2\">\n                {statusData.map((entry: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-3 h-3 rounded-full\"\n                        style={{ backgroundColor: getColorForStatus(entry.name) }}\n                      ></div>\n                      <span className=\"text-gray-700 text-sm\">{entry.name}</span>\n                    </div>\n                    <span className=\"font-medium text-gray-900\">{entry.value}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20934},"client/src/components/deadlines.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Clock, FileText, ChevronLeft, ChevronRight, Filter } from \"lucide-react\";\nimport { generatePDFReport } from \"@/lib/pdf-generator\";\n\ninterface DeadlinesProps {\n  data: any[];\n}\n\nexport default function Deadlines({ data }: DeadlinesProps) {\n  const [filters, setFilters] = useState({\n    unidade: '',\n    status: '',\n    searchTerm: ''\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  // Get controle de prazos data\n  const { data: controlePrazos = [] } = useQuery<any[]>({\n    queryKey: ['/api/controle-prazos'],\n  });\n\n  // Function to calculate days remaining\n  const calculateDaysRemaining = (dataPrazo: string) => {\n    if (!dataPrazo) return 0;\n    \n    try {\n      const today = new Date();\n      let deadline;\n      \n      if (dataPrazo.includes('-') && dataPrazo.length === 10) {\n        deadline = new Date(dataPrazo + 'T00:00:00');\n      } else {\n        deadline = new Date(dataPrazo);\n      }\n      \n      today.setHours(0, 0, 0, 0);\n      deadline.setHours(0, 0, 0, 0);\n      \n      const timeDiff = deadline.getTime() - today.getTime();\n      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n      \n      return daysDiff;\n    } catch (error) {\n      console.error('Erro ao calcular dias restantes:', error);\n      return 0;\n    }\n  };\n\n  // Apply filters to controle de prazos data\n  const filteredData = controlePrazos.filter(item => {\n    const matchesUnidade = !filters.unidade || item.unidade === filters.unidade;\n    const matchesStatus = !filters.status || item.status === filters.status;\n    const matchesSearch = !filters.searchTerm || \n      item.unidade.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||\n      item.naoConformidade.toLowerCase().includes(filters.searchTerm.toLowerCase());\n    \n    return matchesUnidade && matchesStatus && matchesSearch;\n  });\n\n  const processedData = filteredData.map(item => {\n    const remainingDays = calculateDaysRemaining(item.dataPrazo);\n    \n    return {\n      ...item,\n      diasRestantes: remainingDays,\n      statusClass: item.status === 'regularizado' ? 'default' :\n                   item.status === 'nao_regularizado' ? 'destructive' :\n                   remainingDays > 7 ? 'default' : \n                   remainingDays > 0 ? 'secondary' : \n                   'destructive'\n    };\n  });\n\n  // Get unique values for filter dropdowns\n  const uniqueUnidades = Array.from(new Set(controlePrazos.map(item => item.unidade))).sort();\n  \n  const clearFilters = () => {\n    setFilters({ unidade: '', status: '', searchTerm: '' });\n    setCurrentPage(1);\n  };\n\n  // Calculate pagination\n  const totalPages = Math.ceil(processedData.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedData = processedData.slice(startIndex, endIndex);\n\n  const handleGenerateReport = () => {\n    generatePDFReport('deadlines', processedData);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Filter className=\"w-5 h-5 mr-2\" />\n            Filtros de Acompanhamento de Prazos\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div>\n              <Label>Unidade</Label>\n              <Select value={filters.unidade || 'all'} onValueChange={(value) => setFilters({...filters, unidade: value === 'all' ? '' : value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todas as unidades\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as unidades</SelectItem>\n                  {uniqueUnidades.map(unidade => (\n                    <SelectItem key={unidade} value={unidade}>{unidade}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Status</Label>\n              <Select value={filters.status || 'all'} onValueChange={(value) => setFilters({...filters, status: value === 'all' ? '' : value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os status</SelectItem>\n                  <SelectItem value=\"pendente\">Pendente</SelectItem>\n                  <SelectItem value=\"regularizado\">Regularizado</SelectItem>\n                  <SelectItem value=\"nao_regularizado\">Não Regularizado</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label>Busca Geral</Label>\n              <Input \n                placeholder=\"Buscar...\"\n                value={filters.searchTerm}\n                onChange={(e) => setFilters({...filters, searchTerm: e.target.value})}\n              />\n            </div>\n            \n            <div className=\"flex items-end\">\n              <Button \n                variant=\"outline\" \n                onClick={clearFilters}\n                className=\"w-full\"\n              >\n                Limpar Filtros\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center\">\n              <Clock className=\"w-5 h-5 mr-2\" />\n              Acompanhamento de Prazos ({processedData.length} registros de controle)\n            </div>\n            <div className=\"flex items-center gap-4\">\n              {totalPages > 1 && (\n                <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                  Página {currentPage} de {totalPages} \n                  <span className=\"text-xs\">({startIndex + 1}-{Math.min(endIndex, processedData.length)} de {processedData.length})</span>\n                </div>\n              )}\n              <Button onClick={handleGenerateReport} className=\"bg-police-blue hover:bg-blue-700\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Relatório de Prazos\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        \n        <CardContent>\n          {controlePrazos.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Clock className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">Nenhum prazo encontrado</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Unidade</TableHead>\n                    <TableHead>Ofício</TableHead>\n                    <TableHead>Não Conformidade</TableHead>\n                    <TableHead>Data Prazo</TableHead>\n                    <TableHead>Dias Restantes</TableHead>\n                    <TableHead>Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {paginatedData.map((item) => (\n                    <TableRow key={item.id} className=\"hover:bg-gray-50\">\n                      <TableCell className=\"font-medium\">\n                        {item.unidade}\n                      </TableCell>\n                      <TableCell>\n                        {item.oficio}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <div className=\"truncate\" title={item.naoConformidade}>\n                          {item.naoConformidade}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {item.dataPrazo ? \n                          new Date(item.dataPrazo).toLocaleDateString('pt-BR') : \n                          'Não definida'\n                        }\n                      </TableCell>\n                      <TableCell>\n                        {item.status === 'regularizado' ? (\n                          <span className=\"text-green-600 font-medium\">✓ Regularizado</span>\n                        ) : item.status === 'nao_regularizado' ? (\n                          <span className=\"text-red-600 font-medium\">✗ Não Regularizado</span>\n                        ) : !item.dataPrazo ? (\n                          <span className=\"text-gray-500 font-medium\">Não definida</span>\n                        ) : (\n                          item.diasRestantes > 0 \n                            ? `${item.diasRestantes} dias` \n                            : `${Math.abs(item.diasRestantes)} dias em atraso`\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={item.statusClass}>\n                          {item.status === 'pendente' ? 'Pendente' :\n                           item.status === 'regularizado' ? 'Regularizado' :\n                           'Não Regularizado'}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n\n              {/* Pagination Controls */}\n              {totalPages > 1 && (\n                <div className=\"flex items-center justify-between mt-4 px-2\">\n                  <div className=\"text-sm text-gray-600\">\n                    Mostrando {startIndex + 1} a {Math.min(endIndex, processedData.length)} de {processedData.length} registros\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                      disabled={currentPage === 1}\n                    >\n                      <ChevronLeft className=\"w-4 h-4\" />\n                      Anterior\n                    </Button>\n                    \n                    <div className=\"flex items-center gap-1\">\n                      {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                        let pageNum;\n                        if (totalPages <= 5) {\n                          pageNum = i + 1;\n                        } else if (currentPage <= 3) {\n                          pageNum = i + 1;\n                        } else if (currentPage >= totalPages - 2) {\n                          pageNum = totalPages - 4 + i;\n                        } else {\n                          pageNum = currentPage - 2 + i;\n                        }\n                        \n                        return (\n                          <Button\n                            key={pageNum}\n                            variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                            size=\"sm\"\n                            onClick={() => setCurrentPage(pageNum)}\n                            className=\"w-8 h-8 p-0\"\n                          >\n                            {pageNum}\n                          </Button>\n                        );\n                      })}\n                    </div>\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                      disabled={currentPage === totalPages}\n                    >\n                      Próxima\n                      <ChevronRight className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12526},"client/src/components/gallery-database.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Images, Upload, X, ChevronLeft, ChevronRight, Search, Maximize2 } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface GalleryProps {\n  data: any[];\n  filters: any;\n}\n\ninterface GalleryPhoto {\n  id: number;\n  unidade: string;\n  fileName: string;\n  fileType: string;\n  fileSize: number;\n  imageData: string;\n  createdAt: string;\n}\n\nexport default function GalleryDatabase({ data = [], filters }: GalleryProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedImage, setSelectedImage] = useState<GalleryPhoto | null>(null);\n  const itemsPerPage = 9;\n  const queryClient = useQueryClient();\n\n  // Buscar fotos do banco de dados\n  const { data: photos = [], isLoading: photosLoading } = useQuery({\n    queryKey: ['/api/gallery/photos'],\n    refetchOnWindowFocus: false,\n  });\n\n  // Mutation para salvar foto\n  const savePhotoMutation = useMutation({\n    mutationFn: async (photoData: {\n      unidade: string;\n      fileName: string;\n      fileType: string;\n      fileSize: number;\n      imageData: string;\n    }) => {\n      console.log('Enviando dados para API:', {\n        unidade: photoData.unidade,\n        fileName: photoData.fileName,\n        fileType: photoData.fileType,\n        fileSize: photoData.fileSize,\n        imageSizeKB: Math.round(photoData.imageData.length / 1024)\n      });\n\n      const response = await fetch('/api/gallery/photos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(photoData),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Erro da API:', response.status, errorText);\n        throw new Error(`Erro ${response.status}: ${errorText}`);\n      }\n\n      const result = await response.json();\n      console.log('Foto salva com sucesso:', result);\n      return result;\n    },\n    onSuccess: (data) => {\n      console.log('Foto salva, invalidando cache...');\n      queryClient.invalidateQueries({ queryKey: ['/api/gallery/photos'] });\n      alert(`Foto ${data.fileName} salva com sucesso!`);\n    },\n    onError: (error) => {\n      console.error('Erro ao salvar foto:', error);\n      alert(`Erro ao salvar foto: ${error.message}`);\n    },\n  });\n\n  // Mutation para deletar foto\n  const deletePhotoMutation = useMutation({\n    mutationFn: async (photoId: number) => {\n      const response = await apiRequest(`/api/gallery/photos/${photoId}`, 'DELETE');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/gallery/photos'] });\n    },\n    onError: (error) => {\n      console.error('Erro ao deletar foto:', error);\n      alert('Erro ao deletar foto. Tente novamente.');\n    },\n  });\n\n  // Comprimir e converter arquivo para base64\n  const compressAndConvertFile = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      \n      img.onload = () => {\n        // Definir tamanho máximo para compressão\n        const maxWidth = 800;\n        const maxHeight = 600;\n        \n        let { width, height } = img;\n        \n        // Calcular nova dimensão mantendo proporção\n        if (width > height) {\n          if (width > maxWidth) {\n            height = (height * maxWidth) / width;\n            width = maxWidth;\n          }\n        } else {\n          if (height > maxHeight) {\n            width = (width * maxHeight) / height;\n            height = maxHeight;\n          }\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        // Desenhar imagem redimensionada\n        ctx?.drawImage(img, 0, 0, width, height);\n        \n        // Converter para base64 com qualidade reduzida\n        const compressedBase64 = canvas.toDataURL('image/jpeg', 0.7);\n        console.log('Imagem comprimida:', file.name, 'tamanho original:', file.size, 'tamanho base64:', compressedBase64.length);\n        resolve(compressedBase64);\n      };\n      \n      img.onerror = reject;\n      img.src = URL.createObjectURL(file);\n    });\n  };\n\n  // Upload de arquivos\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>, unidade: string) => {\n    console.log('Upload para unidade:', unidade);\n    \n    const files = Array.from(event.target.files || []);\n    console.log('Arquivos selecionados:', files.length);\n    \n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n    \n    for (const file of files) {\n      console.log('Processando:', file.name, file.type, file.size);\n      \n      if (allowedTypes.includes(file.type)) {\n        try {\n          const base64Url = await compressAndConvertFile(file);\n          console.log('Base64 gerado:', file.name, base64Url.length, 'chars');\n          \n          // Salvar no banco de dados\n          await savePhotoMutation.mutateAsync({\n            unidade,\n            fileName: file.name,\n            fileType: file.type,\n            fileSize: file.size,\n            imageData: base64Url\n          });\n          \n          console.log('Foto salva:', file.name);\n        } catch (error) {\n          console.error('Erro ao processar:', error);\n          alert(`Erro ao salvar ${file.name}`);\n        }\n      } else {\n        alert('Apenas arquivos JPG, JPEG e PNG são permitidos.');\n      }\n    }\n    \n    event.target.value = '';\n  };\n\n  // Remover foto\n  const removePhoto = async (photoId: number) => {\n    if (confirm('Tem certeza que deseja remover esta foto?')) {\n      try {\n        await deletePhotoMutation.mutateAsync(photoId);\n      } catch (error) {\n        console.error('Erro ao remover:', error);\n      }\n    }\n  };\n\n  // Dados seguros\n  const safeData = Array.isArray(data) ? data : [];\n  \n  // Agrupar por unidade (apenas um card por unidade)\n  const unitMap = new Map();\n  safeData.forEach(item => {\n    if (!item || !item.unidadeInspecionada) return;\n    \n    if (!unitMap.has(item.unidadeInspecionada)) {\n      unitMap.set(item.unidadeInspecionada, {\n        ...item,\n        totalInspections: 1,\n        allInspections: [item]\n      });\n    } else {\n      const existing = unitMap.get(item.unidadeInspecionada);\n      existing.totalInspections += 1;\n      existing.allInspections.push(item);\n      // Manter a inspeção mais recente como representativa\n      if (new Date(item.dataInspecao) > new Date(existing.dataInspecao)) {\n        Object.assign(existing, item);\n        existing.totalInspections = existing.allInspections.length;\n      }\n    }\n  });\n\n  // Converter para array e filtrar\n  const uniqueUnits = Array.from(unitMap.values());\n  \n  const filteredData = uniqueUnits.filter(item => {\n    if (!item) return false;\n    \n    if (searchTerm === '') return true;\n    \n    const searchLower = searchTerm.toLowerCase();\n    return (\n      (item.unidadeInspecionada && item.unidadeInspecionada.toLowerCase().includes(searchLower)) ||\n      (item.departamento && item.departamento.toLowerCase().includes(searchLower)) ||\n      (item.numero && item.numero.toString().includes(searchTerm))\n    );\n  });\n\n  // Paginação\n  const totalItems = filteredData.length;\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedData = filteredData.slice(startIndex, endIndex);\n\n  // Reset página quando busca muda\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchTerm]);\n\n  if (photosLoading) {\n    return (\n      <div className=\"flex justify-center items-center p-8\">\n        <div className=\"text-gray-500\">Carregando galeria...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Images className=\"w-5 h-5 mr-2 text-purple-600\" />\n              Galeria de Unidades PCBA ({totalItems} unidades • {photos.length} fotos)\n            </div>\n            {totalPages > 1 && (\n              <div className=\"text-sm text-gray-600\">\n                Página {currentPage} de {totalPages}\n              </div>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Busca */}\n          <div className=\"mb-6\">\n            <div className=\"relative max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Buscar unidades...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            {searchTerm && (\n              <div className=\"mt-2 flex items-center gap-2\">\n                <Button onClick={() => setSearchTerm('')} variant=\"outline\" size=\"sm\">\n                  <X className=\"w-4 h-4 mr-1\" />\n                  Limpar\n                </Button>\n                <span className=\"text-sm text-gray-600\">\n                  {totalItems} resultado{totalItems !== 1 ? 's' : ''}\n                </span>\n              </div>\n            )}\n          </div>\n\n          {totalItems === 0 ? (\n            <div className=\"text-center py-12\">\n              <Images className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">\n                {searchTerm ? \"Nenhuma unidade encontrada\" : \"Nenhuma unidade disponível\"}\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {paginatedData.map(unit => {\n                // Filtrar fotos para esta unidade específica\n                const unitPhotos = photos.filter((photo: GalleryPhoto) => \n                  photo.unidade === unit.unidadeInspecionada\n                );\n\n                return (\n                  <Card key={unit.unidadeInspecionada} className=\"border-2 hover:border-purple-200 transition-all\">\n                    <div className=\"min-h-[200px] bg-gradient-to-br from-purple-50 to-blue-50 rounded-t-lg flex items-center justify-center relative\">\n                      {unitPhotos.length > 0 ? (\n                        <div className={`grid gap-1 w-full h-full p-2 ${\n                          unitPhotos.length === 1 ? 'grid-cols-1' :\n                          unitPhotos.length === 2 ? 'grid-cols-2' :\n                          unitPhotos.length <= 4 ? 'grid-cols-2' :\n                          unitPhotos.length <= 9 ? 'grid-cols-3' :\n                          'grid-cols-4'\n                        }`}>\n                          {unitPhotos.map((photo) => (\n                            <div key={photo.id} className=\"relative group overflow-hidden rounded\">\n                              <div className=\"aspect-square bg-gray-100 overflow-hidden rounded\">\n                                <img \n                                  src={photo.imageData} \n                                  alt={photo.fileName} \n                                  className=\"w-full h-full object-cover cursor-pointer hover:scale-105 transition-transform\" \n                                  onClick={() => setSelectedImage(photo)}\n                                />\n                              </div>\n                              <button\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  removePhoto(photo.id);\n                                }}\n                                className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity text-xs z-10\"\n                                title=\"Remover foto\"\n                              >\n                                ×\n                              </button>\n                              <button\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  setSelectedImage(photo);\n                                }}\n                                className=\"absolute bottom-1 right-1 w-5 h-5 bg-black bg-opacity-50 text-white rounded flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\"\n                                title=\"Ampliar foto\"\n                              >\n                                <Maximize2 className=\"w-3 h-3\" />\n                              </button>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center text-gray-500\">\n                          <Images className=\"w-12 h-12 mx-auto mb-2\" />\n                          <p className=\"text-sm\">{unit.unidadeInspecionada}</p>\n                          <p className=\"text-xs\">Sem fotos</p>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        {unit.unidadeInspecionada}\n                      </h4>\n                      \n                      <p className=\"text-sm text-gray-600 mb-1\">\n                        {unit.departamento}\n                      </p>\n                      \n                      <p className=\"text-xs text-gray-500 mb-3\">\n                        {unit.totalInspections} inspeções • {unitPhotos.length} fotos\n                      </p>\n                      \n                      <div className=\"relative\">\n                        <input\n                          type=\"file\"\n                          multiple\n                          accept=\".jpg,.jpeg,.png\"\n                          onChange={(e) => handleFileUpload(e, unit.unidadeInspecionada)}\n                          className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                          id={`upload-${unit.unidadeInspecionada.replace(/\\s+/g, '-')}`}\n                        />\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\" \n                          className=\"w-full\"\n                          disabled={savePhotoMutation.isPending}\n                        >\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          {savePhotoMutation.isPending ? 'Salvando...' : 'Upload JPG/PNG'}\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n\n          {/* Paginação */}\n          {totalPages > 1 && (\n            <div className=\"flex items-center justify-center gap-2 mt-8\">\n              <Button\n                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                disabled={currentPage === 1}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <ChevronLeft className=\"w-4 h-4 mr-1\" />\n                Anterior\n              </Button>\n              \n              <div className=\"flex items-center gap-1\">\n                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                  const pageNum = Math.max(1, currentPage - 2) + i;\n                  if (pageNum > totalPages) return null;\n                  \n                  return (\n                    <Button\n                      key={pageNum}\n                      onClick={() => setCurrentPage(pageNum)}\n                      variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      className=\"w-10\"\n                    >\n                      {pageNum}\n                    </Button>\n                  );\n                })}\n              </div>\n              \n              <Button\n                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                disabled={currentPage === totalPages}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                Próxima\n                <ChevronRight className=\"w-4 h-4 ml-1\" />\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Modal para ampliar imagem */}\n      <Dialog open={!!selectedImage} onOpenChange={() => setSelectedImage(null)}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>{selectedImage?.fileName}</DialogTitle>\n          </DialogHeader>\n          {selectedImage && (\n            <div className=\"flex justify-center\">\n              <img \n                src={selectedImage.imageData} \n                alt={selectedImage.fileName}\n                className=\"max-w-full max-h-[70vh] object-contain rounded\"\n              />\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":17616},"client/src/components/gallery-debug.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Images } from \"lucide-react\";\n\ninterface GalleryProps {\n  data: any[];\n  filters: any;\n}\n\nexport default function Gallery({ data = [], filters }: GalleryProps) {\n  console.log('Gallery: data received:', data?.length || 0);\n  console.log('Gallery: filters received:', filters);\n\n  try {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Images className=\"w-5 h-5 mr-2 text-purple-600\" />\n              Galeria de Inspeções - DEBUG ({Array.isArray(data) ? data.length : 0} registros)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {!Array.isArray(data) ? (\n              <div className=\"p-8 text-center\">\n                <p className=\"text-red-600\">Erro: dados não são array</p>\n                <p className=\"text-sm text-gray-500\">Tipo recebido: {typeof data}</p>\n              </div>\n            ) : data.length === 0 ? (\n              <div className=\"p-8 text-center\">\n                <Images className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">Nenhuma inspeção encontrada</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">\n                  Mostrando {Math.min(5, data.length)} de {data.length} inspeções:\n                </p>\n                <div className=\"grid gap-4\">\n                  {data.slice(0, 5).map((inspection, index) => (\n                    <Card key={inspection?.id || index} className=\"p-4\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <h4 className=\"font-medium\">\n                            {inspection?.unidadeInspecionada || 'Unidade não informada'}\n                          </h4>\n                          <p className=\"text-sm text-gray-600\">\n                            {inspection?.departamento || 'Departamento não informado'}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            Inspeção #{inspection?.numero || 'N/A'}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-xs text-gray-500\">\n                            {inspection?.dataInspecao ? \n                              new Date(inspection.dataInspecao).toLocaleDateString('pt-BR') \n                              : 'Data não informada'\n                            }\n                          </p>\n                        </div>\n                      </div>\n                      {inspection?.naoConformidade && (\n                        <p className=\"text-sm text-gray-700 mt-2 bg-red-50 p-2 rounded\">\n                          {inspection.naoConformidade}\n                        </p>\n                      )}\n                    </Card>\n                  ))}\n                </div>\n                {data.length > 5 && (\n                  <p className=\"text-center text-sm text-gray-500\">\n                    ... e mais {data.length - 5} inspeções\n                  </p>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  } catch (error) {\n    console.error('Gallery: erro na renderização:', error);\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-red-600\">\n              Erro na Galeria\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-red-600\">Erro ao renderizar galeria:</p>\n            <p className=\"text-sm text-gray-600\">{String(error)}</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n}","size_bytes":3945},"client/src/components/gallery-final.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Images, Upload, Search, Trash2, Calendar, MapPin, Filter, Camera } from \"lucide-react\";\n\ninterface GalleryFinalProps {\n  data: any[];\n  filters: any;\n}\n\ninterface Photo {\n  id: number;\n  unidade: string;\n  fileName: string;\n  fileType: string;\n  fileSize: number;\n  imageData: string;\n  createdAt: string;\n}\n\nexport default function GalleryFinal({ data = [] }: GalleryFinalProps) {\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedUnit, setSelectedUnit] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadingUnit, setUploadingUnit] = useState('');\n  const itemsPerPage = 6;\n\n  // Query para buscar fotos\n  const { data: photos = [], isLoading, refetch } = useQuery<Photo[]>({\n    queryKey: ['/api/gallery/photos'],\n    refetchOnWindowFocus: false,\n  });\n\n  // Mutation para upload\n  const uploadMutation = useMutation({\n    mutationFn: async ({ file, unidade }: { file: File; unidade: string }) => {\n      // Comprimir imagem\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      \n      await new Promise((resolve, reject) => {\n        img.onload = resolve;\n        img.onerror = reject;\n        img.src = URL.createObjectURL(file);\n      });\n\n      canvas.width = 800;\n      canvas.height = 600;\n      ctx?.drawImage(img, 0, 0, 800, 600);\n      \n      const imageData = canvas.toDataURL('image/jpeg', 0.7);\n\n      const response = await fetch('/api/gallery/photos', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          unidade,\n          fileName: file.name,\n          fileType: file.type,\n          fileSize: file.size,\n          imageData\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/gallery/photos'] });\n      setIsUploading(false);\n      setUploadingUnit('');\n    },\n    onError: (error) => {\n      console.error('Erro no upload:', error);\n      setIsUploading(false);\n      setUploadingUnit('');\n      alert(`Erro no upload: ${error.message}`);\n    }\n  });\n\n  // Mutation para deletar\n  const deleteMutation = useMutation({\n    mutationFn: async (photoId: number) => {\n      const response = await fetch(`/api/gallery/photos/${photoId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Erro ao deletar foto');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/gallery/photos'] });\n    }\n  });\n\n  // Agrupar fotos por unidade\n  const photosByUnit = useMemo(() => {\n    const grouped = photos.reduce((acc, photo) => {\n      if (!acc[photo.unidade]) {\n        acc[photo.unidade] = [];\n      }\n      acc[photo.unidade].push(photo);\n      return acc;\n    }, {} as Record<string, Photo[]>);\n    return grouped;\n  }, [photos]);\n\n  // Criar dados das unidades com contadores\n  const unitsData = useMemo(() => {\n    const unitsMap = new Map();\n\n    // Adicionar todas as unidades dos dados de inspeção\n    data.forEach((item: any) => {\n      const unidade = item.unidadeInspecionada;\n      if (!unitsMap.has(unidade)) {\n        unitsMap.set(unidade, {\n          unidade,\n          departamento: item.departamento,\n          totalInspecoes: 0,\n          ultimaInspecao: null,\n          fotos: photosByUnit[unidade] || []\n        });\n      }\n      \n      const unit = unitsMap.get(unidade);\n      unit.totalInspecoes++;\n      \n      if (item.dataInspecao && (!unit.ultimaInspecao || new Date(item.dataInspecao) > new Date(unit.ultimaInspecao))) {\n        unit.ultimaInspecao = item.dataInspecao;\n      }\n    });\n\n    // Adicionar unidades que só têm fotos\n    Object.keys(photosByUnit).forEach(unidade => {\n      if (!unitsMap.has(unidade)) {\n        unitsMap.set(unidade, {\n          unidade,\n          departamento: 'Não informado',\n          totalInspecoes: 0,\n          ultimaInspecao: null,\n          fotos: photosByUnit[unidade] || []\n        });\n      } else {\n        unitsMap.get(unidade).fotos = photosByUnit[unidade] || [];\n      }\n    });\n\n    return Array.from(unitsMap.values());\n  }, [data, photosByUnit]);\n\n  // Filtrar dados\n  const filteredUnits = useMemo(() => {\n    return unitsData.filter(unit => {\n      const matchesSearch = !searchTerm || \n        unit.unidade.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        unit.departamento.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesDepartment = !selectedDepartment || unit.departamento === selectedDepartment;\n      const matchesUnit = !selectedUnit || unit.unidade === selectedUnit;\n      \n      return matchesSearch && matchesDepartment && matchesUnit;\n    });\n  }, [unitsData, searchTerm, selectedDepartment, selectedUnit]);\n\n  // Paginação\n  const totalPages = Math.ceil(filteredUnits.length / itemsPerPage);\n  const currentUnits = filteredUnits.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\n\n  // Departamentos únicos\n  const departments = useMemo(() => {\n    return Array.from(new Set(unitsData.map(unit => unit.departamento))).sort();\n  }, [unitsData]);\n\n  // Unidades únicas\n  const units = useMemo(() => {\n    return Array.from(new Set(unitsData.map(unit => unit.unidade))).sort();\n  }, [unitsData]);\n\n  const handleFileUpload = async (files: FileList | null, unidade: string) => {\n    if (!files || files.length === 0) return;\n\n    const file = files[0];\n    if (!['image/jpeg', 'image/jpg', 'image/png'].includes(file.type)) {\n      alert('Apenas arquivos JPG e PNG são permitidos');\n      return;\n    }\n\n    if (file.size > 10 * 1024 * 1024) {\n      alert('Arquivo muito grande. Máximo 10MB');\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadingUnit(unidade);\n    uploadMutation.mutate({ file, unidade });\n  };\n\n  if (isLoading) {\n    return <div className=\"text-center py-8\">Carregando galeria...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Cabeçalho */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Images className=\"w-5 h-5 mr-2 text-purple-600\" />\n            Galeria de Fotos por Unidade PCBA\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Buscar unidade ou departamento...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n            \n            <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filtrar por Departamento\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">Todos os Departamentos</SelectItem>\n                {departments.map(dept => (\n                  <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedUnit} onValueChange={setSelectedUnit}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filtrar por Unidade\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">Todas as Unidades</SelectItem>\n                {units.map(unit => (\n                  <SelectItem key={unit} value={unit}>{unit}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Button \n              onClick={() => {\n                setSearchTerm('');\n                setSelectedDepartment('');\n                setSelectedUnit('');\n                setCurrentPage(1);\n              }}\n              variant=\"outline\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Limpar Filtros\n            </Button>\n          </div>\n\n          <div className=\"flex justify-between items-center\">\n            <p className=\"text-sm text-gray-600\">\n              {filteredUnits.length} unidade(s) • {photos.length} foto(s) total\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Grid de Unidades */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {currentUnits.map((unit) => (\n          <Card key={unit.unidade} className=\"overflow-hidden\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"text-lg font-semibold text-gray-800 mb-1\">\n                    {unit.unidade}\n                  </CardTitle>\n                  <p className=\"text-sm text-gray-600 flex items-center\">\n                    <MapPin className=\"w-4 h-4 mr-1\" />\n                    {unit.departamento}\n                  </p>\n                </div>\n                <Badge variant=\"secondary\" className=\"ml-2\">\n                  <Camera className=\"w-3 h-3 mr-1\" />\n                  {unit.fotos.length}\n                </Badge>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              {/* Info da Unidade */}\n              <div className=\"text-xs text-gray-600 space-y-1\">\n                <p>Inspeções: {unit.totalInspecoes}</p>\n                {unit.ultimaInspecao && (\n                  <p className=\"flex items-center\">\n                    <Calendar className=\"w-3 h-3 mr-1\" />\n                    Última: {new Date(unit.ultimaInspecao).toLocaleDateString('pt-BR')}\n                  </p>\n                )}\n              </div>\n\n              {/* Upload */}\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 text-center\">\n                <input\n                  type=\"file\"\n                  accept=\".jpg,.jpeg,.png\"\n                  onChange={(e) => handleFileUpload(e.target.files, unit.unidade)}\n                  className=\"hidden\"\n                  id={`upload-${unit.unidade}`}\n                  disabled={isUploading}\n                />\n                <label htmlFor={`upload-${unit.unidade}`} className=\"cursor-pointer block\">\n                  <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium text-gray-700\">\n                    {isUploading && uploadingUnit === unit.unidade ? 'Enviando...' : 'Adicionar Foto'}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">JPG/PNG até 10MB</p>\n                </label>\n              </div>\n\n              {/* Fotos */}\n              {unit.fotos.length > 0 && (\n                <div>\n                  <h4 className=\"text-sm font-medium text-gray-700 mb-2\">\n                    Fotos ({unit.fotos.length})\n                  </h4>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {unit.fotos.slice(0, 4).map((photo: Photo) => (\n                      <div key={photo.id} className=\"relative group\">\n                        <img\n                          src={photo.imageData}\n                          alt={photo.fileName}\n                          className=\"w-full h-20 object-cover rounded border\"\n                        />\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          className=\"absolute top-1 right-1 p-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity\"\n                          onClick={() => {\n                            if (confirm(`Deletar ${photo.fileName}?`)) {\n                              deleteMutation.mutate(photo.id);\n                            }\n                          }}\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                        <div className=\"absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white text-xs p-1 truncate\">\n                          {photo.fileName}\n                        </div>\n                      </div>\n                    ))}\n                    {unit.fotos.length > 4 && (\n                      <div className=\"flex items-center justify-center bg-gray-100 rounded h-20 text-sm text-gray-600\">\n                        +{unit.fotos.length - 4} mais\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Paginação */}\n      {totalPages > 1 && (\n        <div className=\"flex justify-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n            disabled={currentPage === 1}\n          >\n            Anterior\n          </Button>\n          \n          <div className=\"flex space-x-1\">\n            {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n              <Button\n                key={page}\n                variant={currentPage === page ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setCurrentPage(page)}\n                className=\"w-10\"\n              >\n                {page}\n              </Button>\n            ))}\n          </div>\n\n          <Button\n            variant=\"outline\"\n            onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n            disabled={currentPage === totalPages}\n          >\n            Próxima\n          </Button>\n        </div>\n      )}\n\n      {filteredUnits.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Images className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600\">Nenhuma unidade encontrada com os filtros selecionados.</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":14840},"client/src/components/gallery-simple.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Images, Upload } from \"lucide-react\";\n\ninterface GallerySimpleProps {\n  data: any[];\n  filters: any;\n}\n\nexport default function GallerySimple({ data = [] }: GallerySimpleProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadStatus, setUploadStatus] = useState('');\n\n  // Teste de upload simples\n  const handleUpload = async (file: File, unidade: string) => {\n    setIsUploading(true);\n    setUploadStatus('Processando arquivo...');\n    \n    try {\n      // Comprimir imagem\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      \n      await new Promise((resolve, reject) => {\n        img.onload = resolve;\n        img.onerror = reject;\n        img.src = URL.createObjectURL(file);\n      });\n\n      // Redimensionar\n      canvas.width = 800;\n      canvas.height = 600;\n      ctx?.drawImage(img, 0, 0, 800, 600);\n      \n      const imageData = canvas.toDataURL('image/jpeg', 0.7);\n      setUploadStatus('Enviando para servidor...');\n\n      // Enviar para API\n      const response = await fetch('/api/gallery/photos', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          unidade,\n          fileName: file.name,\n          fileType: file.type,\n          fileSize: file.size,\n          imageData\n        })\n      });\n\n      const responseText = await response.text();\n      console.log('Resposta do servidor:', response.status, responseText);\n\n      if (response.ok) {\n        setUploadStatus(`✅ ${file.name} salva com sucesso!`);\n      } else {\n        setUploadStatus(`❌ Erro ${response.status}: ${responseText}`);\n      }\n\n    } catch (error) {\n      console.error('Erro no upload:', error);\n      setUploadStatus(`❌ Erro: ${error}`);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const onFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n\n    const file = files[0];\n    if (!['image/jpeg', 'image/jpg', 'image/png'].includes(file.type)) {\n      alert('Apenas JPG e PNG são permitidos');\n      return;\n    }\n\n    await handleUpload(file, 'TESTE_UNIDADE');\n    e.target.value = '';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Images className=\"w-5 h-5 mr-2 text-purple-600\" />\n            Galeria - Teste Simples\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\">\n              <input\n                type=\"file\"\n                accept=\".jpg,.jpeg,.png\"\n                onChange={onFileChange}\n                className=\"hidden\"\n                id=\"upload-test\"\n                disabled={isUploading}\n              />\n              <label htmlFor=\"upload-test\" className=\"cursor-pointer\">\n                <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-lg font-medium text-gray-700\">\n                  {isUploading ? 'Enviando...' : 'Clique para fazer upload'}\n                </p>\n                <p className=\"text-sm text-gray-500\">JPG, PNG até 10MB</p>\n              </label>\n            </div>\n\n            {uploadStatus && (\n              <div className=\"p-4 bg-gray-50 rounded-lg\">\n                <p className=\"text-sm font-medium\">{uploadStatus}</p>\n              </div>\n            )}\n\n            <Button \n              onClick={async () => {\n                try {\n                  const response = await fetch('/api/gallery/photos');\n                  const photos = await response.json();\n                  console.log('Fotos no banco:', photos);\n                  setUploadStatus(`📊 Banco: ${photos.length} fotos`);\n                } catch (error) {\n                  console.error('Erro ao buscar fotos:', error);\n                  setUploadStatus(`❌ Erro ao buscar: ${error}`);\n                }\n              }}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Verificar Banco\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4492},"client/src/components/gallery-test.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Images, Upload, X, ChevronLeft, ChevronRight, Search, Maximize2 } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface GalleryProps {\n  data: any[];\n  filters: any;\n}\n\ninterface GalleryPhoto {\n  id: number;\n  unidade: string;\n  fileName: string;\n  fileType: string;\n  fileSize: number;\n  imageData: string;\n  createdAt: string;\n}\n\nexport default function Gallery({ data = [], filters }: GalleryProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedImage, setSelectedImage] = useState<GalleryPhoto | null>(null);\n  const itemsPerPage = 9;\n  const queryClient = useQueryClient();\n\n  // Buscar fotos do banco de dados\n  const { data: photos = [], isLoading: photosLoading } = useQuery({\n    queryKey: ['/api/gallery/photos'],\n    refetchOnWindowFocus: false,\n  });\n\n  // Mutation para salvar foto\n  const savePhotoMutation = useMutation({\n    mutationFn: async (photoData: {\n      unidade: string;\n      fileName: string;\n      fileType: string;\n      fileSize: number;\n      imageData: string;\n    }) => {\n      const response = await apiRequest('/api/gallery/photos', 'POST', photoData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/gallery/photos'] });\n    },\n    onError: (error) => {\n      console.error('Erro ao salvar foto:', error);\n      alert('Erro ao salvar foto. Tente novamente.');\n    },\n  });\n\n  // Mutation para deletar foto\n  const deletePhotoMutation = useMutation({\n    mutationFn: async (photoId: number) => {\n      const response = await apiRequest(`/api/gallery/photos/${photoId}`, 'DELETE');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/gallery/photos'] });\n    },\n    onError: (error) => {\n      console.error('Erro ao deletar foto:', error);\n      alert('Erro ao deletar foto. Tente novamente.');\n    },\n  });\n\n  // Comprimir e converter arquivo para base64\n  const compressAndConvertFile = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      \n      img.onload = () => {\n        // Definir tamanho máximo para compressão\n        const maxWidth = 800;\n        const maxHeight = 600;\n        \n        let { width, height } = img;\n        \n        // Calcular nova dimensão mantendo proporção\n        if (width > height) {\n          if (width > maxWidth) {\n            height = (height * maxWidth) / width;\n            width = maxWidth;\n          }\n        } else {\n          if (height > maxHeight) {\n            width = (width * maxHeight) / height;\n            height = maxHeight;\n          }\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        // Desenhar imagem redimensionada\n        ctx?.drawImage(img, 0, 0, width, height);\n        \n        // Converter para base64 com qualidade reduzida\n        const compressedBase64 = canvas.toDataURL('image/jpeg', 0.7);\n        console.log('Imagem comprimida:', file.name, 'tamanho original:', file.size, 'tamanho base64:', compressedBase64.length);\n        resolve(compressedBase64);\n      };\n      \n      img.onerror = reject;\n      img.src = URL.createObjectURL(file);\n    });\n  };\n\n  // Upload de arquivos\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>, unidade: string) => {\n    console.log('handleFileUpload chamado para unidade:', unidade);\n    \n    const files = Array.from(event.target.files || []);\n    console.log('Arquivos selecionados:', files.length);\n    \n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n    \n    for (const file of files) {\n      console.log('Processando arquivo:', file.name, 'tipo:', file.type, 'tamanho:', file.size);\n      \n      if (allowedTypes.includes(file.type)) {\n        try {\n          const base64Url = await compressAndConvertFile(file);\n          console.log('Base64 comprimido gerado para:', file.name, 'tamanho base64:', base64Url.length);\n          \n          // Salvar no banco de dados\n          await savePhotoMutation.mutateAsync({\n            unidade,\n            fileName: file.name,\n            fileType: file.type,\n            fileSize: file.size,\n            imageData: base64Url\n          });\n          \n          console.log('Foto salva no banco:', file.name);\n        } catch (error) {\n          console.error('Erro ao processar arquivo:', error);\n          alert(`Erro ao salvar ${file.name}. Tente novamente.`);\n        }\n      } else {\n        console.warn('Tipo de arquivo não permitido:', file.type);\n        alert('Apenas arquivos JPG, JPEG e PNG são permitidos.');\n      }\n    }\n    \n    event.target.value = '';\n  };\n\n  // Remover arquivo\n  const removeFile = async (photoId: number) => {\n    if (confirm('Tem certeza que deseja remover esta foto?')) {\n      try {\n        await deletePhotoMutation.mutateAsync(photoId);\n      } catch (error) {\n        console.error('Erro ao remover foto:', error);\n      }\n    }\n  };\n\n  // Dados seguros\n  const safeData = Array.isArray(data) ? data : [];\n  \n  // Agrupar por unidade (apenas um card por unidade)\n  const unitMap = new Map();\n  safeData.forEach(item => {\n    if (!item || !item.unidadeInspecionada) return;\n    \n    if (!unitMap.has(item.unidadeInspecionada)) {\n      unitMap.set(item.unidadeInspecionada, {\n        ...item,\n        totalInspections: 1,\n        allInspections: [item]\n      });\n    } else {\n      const existing = unitMap.get(item.unidadeInspecionada);\n      existing.totalInspections += 1;\n      existing.allInspections.push(item);\n      // Manter a inspeção mais recente como representativa\n      if (new Date(item.dataInspecao) > new Date(existing.dataInspecao)) {\n        Object.assign(existing, item);\n        existing.totalInspections = existing.allInspections.length;\n      }\n    }\n  });\n\n  // Converter para array e filtrar\n  const uniqueUnits = Array.from(unitMap.values());\n  \n  const filteredData = uniqueUnits.filter(item => {\n    if (!item) return false;\n    \n    if (searchTerm === '') return true;\n    \n    const searchLower = searchTerm.toLowerCase();\n    return (\n      (item.unidadeInspecionada && item.unidadeInspecionada.toLowerCase().includes(searchLower)) ||\n      (item.departamento && item.departamento.toLowerCase().includes(searchLower)) ||\n      (item.naoConformidade && item.naoConformidade.toLowerCase().includes(searchLower)) ||\n      (item.numero && item.numero.toString().includes(searchTerm))\n    );\n  });\n\n  // Paginação\n  const totalItems = filteredData.length;\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedData = filteredData.slice(startIndex, endIndex);\n\n  // Reset página quando busca muda\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchTerm]);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Images className=\"w-5 h-5 mr-2 text-purple-600\" />\n              Galeria de Unidades PCBA ({totalItems} de {uniqueUnits.length} unidades)\n            </div>\n            {totalPages > 1 && (\n              <div className=\"text-sm text-gray-600\">\n                Página {currentPage} de {totalPages} • Mostrando {startIndex + 1}-{Math.min(endIndex, totalItems)} de {totalItems}\n              </div>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Busca melhorada */}\n          <div className=\"mb-6\">\n            <div className=\"relative max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Buscar unidades da PCBA por nome, departamento...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            {searchTerm && (\n              <div className=\"mt-2 flex items-center gap-2\">\n                <Button onClick={() => setSearchTerm('')} variant=\"outline\" size=\"sm\">\n                  <X className=\"w-4 h-4 mr-1\" />\n                  Limpar busca\n                </Button>\n                <span className=\"text-sm text-gray-600\">\n                  {totalItems} resultado{totalItems !== 1 ? 's' : ''} encontrado{totalItems !== 1 ? 's' : ''}\n                </span>\n              </div>\n            )}\n          </div>\n\n          {totalItems === 0 ? (\n            <div className=\"text-center py-12\">\n              <Images className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">\n                {searchTerm ? \"Nenhuma unidade encontrada para sua busca\" : \"Nenhuma unidade encontrada\"}\n              </p>\n              {searchTerm && (\n                <p className=\"text-sm text-gray-400 mt-2\">\n                  Tente buscar por: nome da unidade ou departamento\n                </p>\n              )}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {paginatedData.map((inspection) => {\n                const inspectionFiles = uploadedFiles.filter(f => f.inspectionId === inspection.id);\n                return (\n                  <Card key={inspection.id} className=\"border-2 hover:border-purple-200 transition-all\">\n                    <div className=\"min-h-[200px] bg-gradient-to-br from-purple-50 to-blue-50 rounded-t-lg flex items-center justify-center relative\">\n                      {inspectionFiles.length > 0 ? (\n                        <div className={`grid gap-1 w-full h-full p-2 ${\n                          inspectionFiles.length === 1 ? 'grid-cols-1' :\n                          inspectionFiles.length === 2 ? 'grid-cols-2' :\n                          inspectionFiles.length <= 4 ? 'grid-cols-2' :\n                          inspectionFiles.length <= 9 ? 'grid-cols-3' :\n                          'grid-cols-4'\n                        }`}>\n                          {inspectionFiles.map((file) => (\n                            <div key={file.id} className=\"relative group overflow-hidden rounded\">\n                              <div className=\"aspect-square bg-gray-100 overflow-hidden rounded\">\n                                <img \n                                  src={file.url} \n                                  alt={file.name} \n                                  className=\"w-full h-full object-cover cursor-pointer hover:scale-105 transition-transform\" \n                                  onClick={() => setSelectedImage(file)}\n                                />\n\n                              </div>\n                              <button\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  removeFile(file.id);\n                                }}\n                                className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity text-xs z-10\"\n                                title=\"Remover foto\"\n                              >\n                                ×\n                              </button>\n                              <button\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  setSelectedImage(file);\n                                }}\n                                className=\"absolute bottom-1 right-1 w-5 h-5 bg-black bg-opacity-50 text-white rounded flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\"\n                                title=\"Ampliar foto\"\n                              >\n                                <Maximize2 className=\"w-3 h-3\" />\n                              </button>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center text-gray-500\">\n                          <Images className=\"w-12 h-12 mx-auto mb-2\" />\n                          <p className=\"text-sm\">{inspection.unidadeInspecionada}</p>\n                          <p className=\"text-xs\">Sem fotos</p>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-medium text-gray-900 mb-1\">\n                        {inspection.unidadeInspecionada}\n                      </h4>\n                      \n                      <p className=\"text-sm text-gray-600 mb-1\">\n                        {inspection.departamento}\n                      </p>\n                      \n                      <p className=\"text-xs text-gray-500 mb-3\">\n                        {inspection.totalInspections} inspeções • Última: {new Date(inspection.dataInspecao).toLocaleDateString('pt-BR')}\n                      </p>\n                      \n                      <div className=\"flex flex-col gap-2\">\n                        <div className=\"relative\">\n                          <input\n                            type=\"file\"\n                            multiple\n                            accept=\".jpg,.jpeg,.png\"\n                            onChange={(e) => handleFileUpload(e, inspection.id)}\n                            className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                            id={`upload-${inspection.id}`}\n                          />\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"w-full\"\n                            onClick={(e) => {\n                              e.preventDefault();\n                              console.log('Button clicked, triggering file input for:', inspection.id);\n                              const fileInput = document.getElementById(`upload-${inspection.id}`) as HTMLInputElement;\n                              if (fileInput) {\n                                fileInput.click();\n                                console.log('File input clicked');\n                              } else {\n                                console.error('File input not found');\n                              }\n                            }}\n                          >\n                            <Upload className=\"w-4 h-4 mr-1\" />\n                            Upload JPG/PNG\n                          </Button>\n                        </div>\n                        \n                        {inspectionFiles.length > 0 && (\n                          <p className=\"text-xs text-center text-gray-500\">\n                            {inspectionFiles.length} foto{inspectionFiles.length > 1 ? 's' : ''} anexada{inspectionFiles.length > 1 ? 's' : ''}\n                          </p>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n          \n          {/* Modal de ampliação da imagem */}\n          <Dialog open={selectedImage !== null} onOpenChange={() => setSelectedImage(null)}>\n            <DialogContent className=\"max-w-4xl w-full\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center justify-between\">\n                  <span>{selectedImage?.name}</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => selectedImage && removeFile(selectedImage.id)}\n                    className=\"text-red-500 hover:text-red-700\"\n                  >\n                    <X className=\"w-4 h-4 mr-1\" />\n                    Remover\n                  </Button>\n                </DialogTitle>\n              </DialogHeader>\n              {selectedImage && (\n                <div className=\"flex justify-center\">\n                  <img \n                    src={selectedImage.url} \n                    alt={selectedImage.name}\n                    className=\"max-w-full max-h-[70vh] object-contain rounded\"\n                  />\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n          \n          {/* Paginação */}\n          {totalPages > 1 && (\n            <div className=\"flex items-center justify-center gap-2 mt-8\">\n              <Button\n                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                disabled={currentPage === 1}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <ChevronLeft className=\"w-4 h-4 mr-1\" />\n                Anterior\n              </Button>\n              \n              <div className=\"flex items-center gap-1\">\n                {currentPage > 3 && (\n                  <>\n                    <Button\n                      onClick={() => setCurrentPage(1)}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"w-10\"\n                    >\n                      1\n                    </Button>\n                    {currentPage > 4 && <span className=\"text-sm text-gray-500\">...</span>}\n                  </>\n                )}\n                \n                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                  const pageNum = Math.max(1, currentPage - 2) + i;\n                  if (pageNum > totalPages) return null;\n                  \n                  return (\n                    <Button\n                      key={pageNum}\n                      onClick={() => setCurrentPage(pageNum)}\n                      variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      className=\"w-10\"\n                    >\n                      {pageNum}\n                    </Button>\n                  );\n                }).filter(Boolean)}\n                \n                {currentPage < totalPages - 2 && (\n                  <>\n                    {currentPage < totalPages - 3 && <span className=\"text-sm text-gray-500\">...</span>}\n                    <Button\n                      onClick={() => setCurrentPage(totalPages)}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"w-10\"\n                    >\n                      {totalPages}\n                    </Button>\n                  </>\n                )}\n              </div>\n              \n              <Button\n                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                disabled={currentPage === totalPages}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                Próxima\n                <ChevronRight className=\"w-4 h-4 ml-1\" />\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":19765},"client/src/components/gallery.tsx":{"content":"import { useState } from \"react\";\nimport React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Calendar, AlertCircle, ArrowRight, Images, Upload, FileImage, FileText, Download, Eye, Plus, ChevronLeft, ChevronRight, Filter, X } from \"lucide-react\";\n\ninterface GalleryProps {\n  data: any[];\n  filters: any;\n}\n\ninterface FileUpload {\n  id: string;\n  name: string;\n  type: string;\n  size: number;\n  inspectionId: string;\n  uploadDate: Date;\n  url?: string;\n}\n\nexport default function Gallery({ data, filters }: GalleryProps) {\n  const [uploadedFiles, setUploadedFiles] = useState<FileUpload[]>([]);\n  \n  // Load files from localStorage safely\n  React.useEffect(() => {\n    try {\n      const savedFiles = localStorage.getItem('gallery-files');\n      if (savedFiles) {\n        const parsed = JSON.parse(savedFiles);\n        if (Array.isArray(parsed)) {\n          setUploadedFiles(parsed);\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao carregar arquivos do localStorage:', error);\n    }\n  }, []);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedUnit, setSelectedUnit] = useState('');\n  const itemsPerPage = 9;\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case 'Dentro do prazo':\n        return 'default';\n      case 'Próximo do vencimento':\n        return 'secondary';\n      default:\n        return 'destructive';\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>, inspectionId: string) => {\n    const files = Array.from(event.target.files || []);\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'];\n    \n    files.forEach(file => {\n      if (allowedTypes.includes(file.type)) {\n        const newFile: FileUpload = {\n          id: `file-${Date.now()}-${Math.random()}`,\n          name: file.name,\n          type: file.type,\n          size: file.size,\n          inspectionId,\n          uploadDate: new Date(),\n          url: URL.createObjectURL(file)\n        };\n        setUploadedFiles(prev => {\n          const updated = [...prev, newFile];\n          // Salvar no localStorage de forma segura\n          try {\n            localStorage.setItem('gallery-files', JSON.stringify(updated));\n          } catch (error) {\n            console.error('Erro ao salvar arquivos no localStorage:', error);\n          }\n          return updated;\n        });\n      }\n    });\n    // Reset input\n    event.target.value = '';\n  };\n\n  const getFileIcon = (type: string) => {\n    if (type.includes('image')) return FileImage;\n    if (type.includes('pdf')) return FileText;\n    return FileText;\n  };\n\n  const getFileColor = (type: string) => {\n    if (type.includes('image')) return 'text-green-600 bg-green-50';\n    if (type.includes('pdf')) return 'text-red-600 bg-red-50';\n    return 'text-gray-600 bg-gray-50';\n  };\n\n  const removeFile = (fileId: string) => {\n    setUploadedFiles(prev => {\n      const updated = prev.filter(f => f.id !== fileId);\n      // Atualizar localStorage de forma segura\n      try {\n        localStorage.setItem('gallery-files', JSON.stringify(updated));\n      } catch (error) {\n        console.error('Erro ao remover arquivo do localStorage:', error);\n      }\n      return updated;\n    });\n  };\n\n  // Get unique departments and units for filtering - with safe data handling\n  const uniqueDepartments = Array.from(new Set((data || []).map(item => item?.departamento).filter(Boolean))).sort();\n  const uniqueUnits = Array.from(new Set((data || []).map(item => item?.unidadeInspecionada).filter(Boolean))).sort();\n\n  // Filter data based on search and filters - with safe data handling\n  const filteredData = (data || []).filter(item => {\n    if (!item) return false;\n    \n    const matchesSearch = searchTerm === '' || \n      (item.unidadeInspecionada && item.unidadeInspecionada.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.departamento && item.departamento.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.naoConformidade && item.naoConformidade.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (item.delegadoCorregedor && item.delegadoCorregedor.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesDepartment = selectedDepartment === '' || item.departamento === selectedDepartment;\n    const matchesUnit = selectedUnit === '' || item.unidadeInspecionada === selectedUnit;\n    \n    return matchesSearch && matchesDepartment && matchesUnit;\n  });\n\n  // Calculate pagination - using filtered data\n  const totalItems = filteredData.length;\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedData = filteredData.slice(startIndex, endIndex);\n\n  // Clear all filters\n  const clearFilters = () => {\n    setSearchTerm('');\n    setSelectedDepartment('');\n    setSelectedUnit('');\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Images className=\"w-5 h-5 mr-2 text-purple-600\" />\n              Galeria de Inspeções ({totalItems} de {(data || []).length} registros)\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              {totalPages > 1 && (\n                <>\n                  Página {currentPage} de {totalPages} \n                  <span className=\"text-xs\">({startIndex + 1}-{Math.min(endIndex, totalItems)} de {totalItems})</span>\n                </>\n              )}\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Search and Filter Section */}\n          <div className=\"mb-6 space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"search\">Buscar</Label>\n                <Input\n                  id=\"search\"\n                  type=\"text\"\n                  placeholder=\"Buscar por unidade, departamento, não conformidade...\"\n                  value={searchTerm}\n                  onChange={(e) => {\n                    setSearchTerm(e.target.value);\n                    setCurrentPage(1);\n                  }}\n                  className=\"w-full\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"department\">Departamento</Label>\n                <Select value={selectedDepartment} onValueChange={(value) => {\n                  setSelectedDepartment(value);\n                  setCurrentPage(1);\n                }}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Todos\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">Todos</SelectItem>\n                    {uniqueDepartments.map(dept => (\n                      <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"unit\">Unidade</Label>\n                <Select value={selectedUnit} onValueChange={(value) => {\n                  setSelectedUnit(value);\n                  setCurrentPage(1);\n                }}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Todas\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">Todas</SelectItem>\n                    {uniqueUnits.map(unit => (\n                      <SelectItem key={unit} value={unit}>{unit}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            {(searchTerm || selectedDepartment || selectedUnit) && (\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  onClick={clearFilters}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex items-center gap-1\"\n                >\n                  <X className=\"w-4 h-4\" />\n                  Limpar Filtros\n                </Button>\n                <span className=\"text-sm text-gray-600\">\n                  {totalItems} resultado{totalItems !== 1 ? 's' : ''} encontrado{totalItems !== 1 ? 's' : ''}\n                </span>\n              </div>\n            )}\n          </div>\n\n          {totalItems === 0 ? (\n            <div className=\"text-center py-12\">\n              <Images className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">\n                {(data || []).length === 0 ? \"Nenhuma inspeção encontrada\" : \"Nenhuma inspeção corresponde aos filtros aplicados\"}\n              </p>\n              {(searchTerm || selectedDepartment || selectedUnit) && (\n                <Button\n                  onClick={clearFilters}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"mt-4\"\n                >\n                  Limpar Filtros\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {paginatedData.map((inspection) => {\n                const inspectionFiles = uploadedFiles.filter(f => f.inspectionId === inspection.id);\n                return (\n                <Card key={inspection.id} className=\"hover:shadow-lg transition-all duration-300 border-2 hover:border-purple-200\">\n                  <div className=\"aspect-video bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 rounded-t-lg flex items-center justify-center relative\">\n                    {inspectionFiles.length > 0 ? (\n                      <div className=\"grid grid-cols-2 gap-2 w-full h-full p-4\">\n                        {inspectionFiles.slice(0, 4).map((file) => {\n                          const Icon = getFileIcon(file.type);\n                          return (\n                            <div key={file.id} className={`rounded-lg flex items-center justify-center ${getFileColor(file.type)} relative group cursor-pointer`}>\n                              <Icon className=\"w-6 h-6\" />\n                              {file.type.includes('image') && file.url && (\n                                <img src={file.url} alt={file.name} className=\"absolute inset-0 w-full h-full object-cover rounded-lg opacity-80 hover:opacity-100 transition-opacity\" />\n                              )}\n                              {/* Botão remover */}\n                              <button\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  removeFile(file.id);\n                                }}\n                                className=\"absolute -top-2 -right-2 w-5 h-5 bg-red-500 text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-600 text-xs font-bold shadow-lg z-10\"\n                                title={`Remover ${file.name}`}\n                              >\n                                ×\n                              </button>\n                            </div>\n                          );\n                        })}\n                        {inspectionFiles.length > 4 && (\n                          <div className=\"bg-gray-100 rounded-lg flex items-center justify-center text-gray-600 text-sm font-medium\">\n                            +{inspectionFiles.length - 4}\n                          </div>\n                        )}\n                      </div>\n                    ) : (\n                      <div className=\"text-center text-gray-500\">\n                        <Images className=\"w-12 h-12 mx-auto mb-2\" />\n                        <p className=\"text-sm font-medium\">Inspeção #{inspection.numero}</p>\n                        <p className=\"text-xs\">Sem arquivos</p>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <CardContent className=\"p-4\">\n                    <h4 className=\"text-lg font-medium text-gray-900 mb-2 line-clamp-2\">\n                      {inspection.unidadeInspecionada}\n                    </h4>\n                    \n                    <div className=\"space-y-2 mb-3\">\n                      <p className=\"text-sm text-gray-600 flex items-center\">\n                        <Calendar className=\"w-4 h-4 mr-2\" />\n                        {new Date(inspection.dataInspecao).toLocaleDateString('pt-BR')}\n                      </p>\n                      \n                      <p className=\"text-sm text-gray-600 flex items-start\">\n                        <AlertCircle className=\"w-4 h-4 mr-2 mt-0.5 text-red-500 flex-shrink-0\" />\n                        <span className=\"line-clamp-2\">{inspection.naoConformidade}</span>\n                      </p>\n                    </div>\n                    \n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      <Badge variant={getStatusVariant(inspection.statusPrazo)} className=\"text-xs\">\n                        {inspection.statusPrazo}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {inspection.departamento}\n                      </Badge>\n                      {inspectionFiles.length > 0 && (\n                        <Badge className=\"bg-purple-100 text-purple-800 text-xs\">\n                          {inspectionFiles.length} arquivo{inspectionFiles.length > 1 ? 's' : ''}\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex flex-col gap-2\">\n                      <div className=\"flex gap-2\">\n                        <Button size=\"sm\" className=\"flex-1 bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white shadow-md\">\n                          <Eye className=\"w-4 h-4 mr-1\" />\n                          Detalhes\n                        </Button>\n                        {inspectionFiles.length > 0 && (\n                          <Button size=\"sm\" variant=\"outline\" className=\"bg-gradient-to-r from-green-50 to-green-100 hover:from-green-100 hover:to-green-200 border-green-300 text-green-700\">\n                            <Download className=\"w-4 h-4\" />\n                          </Button>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        <label className=\"flex-1\">\n                          <input\n                            type=\"file\"\n                            multiple\n                            accept=\".jpg,.jpeg,.png,.pdf\"\n                            onChange={(e) => handleFileUpload(e, inspection.id)}\n                            className=\"hidden\"\n                          />\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"w-full bg-gradient-to-r from-blue-50 to-blue-100 hover:from-blue-100 hover:to-blue-200 border-blue-300 text-blue-700\"\n                            type=\"button\"\n                            onClick={(e) => {\n                              const input = e.currentTarget.parentElement?.querySelector('input[type=\"file\"]') as HTMLInputElement;\n                              input?.click();\n                            }}\n                          >\n                            <Upload className=\"w-4 h-4 mr-1\" />\n                            Anexar\n                          </Button>\n                        </label>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                );\n              })}\n            </div>\n          )}\n\n          {/* Pagination Controls */}\n          {totalPages > 1 && (\n            <div className=\"flex items-center justify-between mt-6 pt-4 border-t\">\n              <div className=\"text-sm text-gray-600\">\n                Mostrando {startIndex + 1} a {Math.min(endIndex, data.length)} de {data.length} inspeções\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                  disabled={currentPage === 1}\n                  className=\"bg-gradient-to-r from-purple-50 to-purple-100 hover:from-purple-100 hover:to-purple-200 border-purple-300 text-purple-700\"\n                >\n                  <ChevronLeft className=\"w-4 h-4\" />\n                  Anterior\n                </Button>\n                \n                <div className=\"flex items-center gap-1\">\n                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                    let pageNum;\n                    if (totalPages <= 5) {\n                      pageNum = i + 1;\n                    } else if (currentPage <= 3) {\n                      pageNum = i + 1;\n                    } else if (currentPage >= totalPages - 2) {\n                      pageNum = totalPages - 4 + i;\n                    } else {\n                      pageNum = currentPage - 2 + i;\n                    }\n                    \n                    return (\n                      <Button\n                        key={pageNum}\n                        variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(pageNum)}\n                        className={`w-8 h-8 p-0 ${\n                          currentPage === pageNum \n                            ? 'bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800' \n                            : 'bg-gradient-to-r from-purple-50 to-purple-100 hover:from-purple-100 hover:to-purple-200 border-purple-300 text-purple-700'\n                        }`}\n                      >\n                        {pageNum}\n                      </Button>\n                    );\n                  })}\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                  disabled={currentPage === totalPages}\n                  className=\"bg-gradient-to-r from-purple-50 to-purple-100 hover:from-purple-100 hover:to-purple-200 border-purple-300 text-purple-700\"\n                >\n                  Próxima\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Files Summary */}\n      {uploadedFiles.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <FileText className=\"w-5 h-5 mr-2 text-blue-600\" />\n              Arquivos Anexados ({uploadedFiles.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {uploadedFiles.map((file) => {\n                const Icon = getFileIcon(file.type);\n                const inspection = data.find(i => i.id === file.inspectionId);\n                return (\n                  <div key={file.id} className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n                    <div className={`p-2 rounded ${getFileColor(file.type)}`}>\n                      <Icon className=\"w-5 h-5\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-sm truncate\">{file.name}</p>\n                      <p className=\"text-xs text-gray-500 truncate\">\n                        {inspection?.unidadeInspecionada || 'Inspeção não encontrada'}\n                      </p>\n                      <p className=\"text-xs text-gray-400\">\n                        {(file.size / 1024).toFixed(1)} KB • {file.uploadDate.toLocaleDateString('pt-BR')}\n                      </p>\n                    </div>\n                    <div className=\"flex gap-1\">\n                      {file.url && (\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          onClick={() => window.open(file.url, '_blank')}\n                          className=\"h-8 w-8 p-0 hover:bg-blue-100 text-blue-600\"\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                      {file.url && (\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          onClick={() => {\n                            const a = document.createElement('a');\n                            a.href = file.url!;\n                            a.download = file.name;\n                            a.click();\n                          }}\n                          className=\"h-8 w-8 p-0 hover:bg-green-100 text-green-600\"\n                        >\n                          <Download className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":22292},"client/src/components/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/lib/auth\";\nimport { BarChart3, Clock, CheckCircle, LogOut, FileText, Building2, Scale, Shield } from \"lucide-react\";\nimport policeBadge from \"@assets/R-removebg-preview_1753188946424.png\";\n\ninterface HeaderProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n}\n\nexport default function Header({ activeTab, onTabChange }: HeaderProps) {\n  const { logout } = useAuth();\n\n  const tabs = [\n    { id: 'dashboard', label: 'Dashboard Geral', icon: BarChart3 },\n    { id: 'reports', label: 'Relatórios', icon: FileText },\n    { id: 'unidade', label: 'Relatório por Unidade', icon: Building2 },\n    { id: 'deadlines', label: 'Prazos', icon: Clock },\n    { id: 'status-regularizacao', label: 'Status Regularização', icon: Clock },\n    { id: 'normalization', label: 'Normalização', icon: CheckCircle },\n    { id: 'docs-legais', label: 'Documentos Legais', icon: Scale },\n    { id: 'admin', label: 'Administração', icon: Shield }\n  ];\n\n  return (\n    <header className=\"bg-black shadow-sm border-b border-gray-700\">\n      <div className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-6\">\n        <div className=\"flex justify-between items-stretch py-2\">\n          <div className=\"flex items-center min-w-0 max-w-md\">\n            <img \n              src={policeBadge} \n              alt=\"Brasão Polícia Civil BA\" \n              className=\"h-12 w-auto mr-3 flex-shrink-0\"\n            />\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"text-sm font-semibold text-white leading-tight break-words\">\n                Sistema de Gerenciamento dos Indicadores de Inspeção nas Unidades da Polícia Civil do Estado da Bahia\n              </h1>\n              <p className=\"text-xs text-gray-300 mt-1\">ASTEC - CORREPOL</p>\n            </div>\n          </div>\n          \n          <nav className=\"flex flex-wrap gap-1 items-center ml-4\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <Button\n                  key={tab.id}\n                  variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  className={`${\n                    activeTab === tab.id\n                      ? 'bg-police-blue text-white hover:bg-blue-700'\n                      : 'text-gray-300 hover:text-white hover:bg-gray-700'\n                  } text-xs px-2 py-1 whitespace-nowrap`}\n                  onClick={() => onTabChange(tab.id)}\n                >\n                  <Icon className=\"w-3 h-3 mr-1\" />\n                  {tab.label}\n                </Button>\n              );\n            })}\n          </nav>\n          \n          <Button\n            onClick={logout}\n            variant=\"destructive\"\n            size=\"sm\"\n            className=\"ml-2 text-xs px-2 py-1 flex-shrink-0\"\n          >\n            <LogOut className=\"w-3 h-3 mr-1\" />\n            Sair\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3006},"client/src/components/normalizacao-docs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Scale, FileText, Plus, Search, Filter, Download, Eye, Edit, Trash2, Calendar, Building, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Document {\n  id: number;\n  tipo: 'Lei' | 'Instrução Normativa' | 'Portaria' | 'Ofício Circular' | 'Nota Técnica' | 'Termo de Cooperação Técnica';\n  numero: string;\n  ano: string;\n  titulo: string;\n  descricao?: string;\n  orgaoEmissor?: string;\n  dataPublicacao?: string;\n  dataVigencia?: string;\n  status: 'Vigente' | 'Revogado' | 'Suspenso';\n  assunto?: string;\n  arquivoUrl?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface NormalizacaoDocsProps {\n  data?: Document[];\n}\n\nexport default function NormalizacaoDocs({ data = [] }: NormalizacaoDocsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get documents from API\n  const { data: documents = [], isLoading } = useQuery<Document[]>({\n    queryKey: ['/api/documents'],\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState<string>('');\n  const [filterStatus, setFilterStatus] = useState<string>('');\n  const [filterYear, setFilterYear] = useState<string>('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingDoc, setEditingDoc] = useState<Document | null>(null);\n  const itemsPerPage = 10;\n\n  const [newDoc, setNewDoc] = useState<Partial<Document>>({\n    tipo: 'Lei',\n    numero: '',\n    ano: new Date().getFullYear().toString(),\n    titulo: '',\n    descricao: '',\n    orgaoEmissor: '',\n    dataPublicacao: '',\n    dataVigencia: '',\n    status: 'Vigente',\n    assunto: ''\n  });\n\n  const documentTypes = [\n    'Lei',\n    'Instrução Normativa', \n    'Portaria',\n    'Ofício Circular',\n    'Nota Técnica',\n    'Termo de Cooperação Técnica'\n  ];\n\n  const statusOptions = ['Vigente', 'Revogado', 'Suspenso'];\n\n  // Filter documents\n  const filteredDocs = documents.filter(doc => {\n    const matchesSearch = doc.titulo.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         doc.numero.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (doc.descricao || '').toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = !filterType || filterType === 'all-types' || doc.tipo === filterType;\n    const matchesStatus = !filterStatus || filterStatus === 'all-status' || doc.status === filterStatus;\n    const matchesYear = !filterYear || filterYear === 'all-years' || doc.ano === filterYear;\n    \n    return matchesSearch && matchesType && matchesStatus && matchesYear;\n  });\n\n  // Pagination\n  const totalPages = Math.ceil(filteredDocs.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedDocs = filteredDocs.slice(startIndex, endIndex);\n\n  // Mutations for API calls\n  const createDocumentMutation = useMutation({\n    mutationFn: async (documentData: any) => {\n      return await apiRequest('/api/documents', 'POST', documentData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Documento criado com sucesso!\",\n      });\n      setIsAddModalOpen(false);\n      resetForm();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar documento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateDocumentMutation = useMutation({\n    mutationFn: async ({ id, ...documentData }: any) => {\n      return await apiRequest(`/api/documents/${id}`, 'PUT', documentData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Documento atualizado com sucesso!\",\n      });\n      setIsAddModalOpen(false);\n      resetForm();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar documento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDocumentMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(`/api/documents/${id}`, 'DELETE');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Documento excluído com sucesso!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao excluir documento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setNewDoc({\n      tipo: 'Lei',\n      numero: '',\n      ano: new Date().getFullYear().toString(),\n      titulo: '',\n      descricao: '',\n      orgaoEmissor: '',\n      dataPublicacao: '',\n      dataVigencia: '',\n      status: 'Vigente',\n      assunto: ''\n    });\n    setEditingDoc(null);\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Note: File upload not implemented yet - would need file upload endpoint\n      setNewDoc(prev => ({\n        ...prev,\n        arquivoUrl: file.name // Placeholder\n      }));\n    }\n  };\n\n  const handleSaveDocument = () => {\n    if (newDoc.titulo && newDoc.numero && newDoc.tipo) {\n      const documentData = {\n        tipo: newDoc.tipo,\n        numero: newDoc.numero,\n        ano: newDoc.ano,\n        titulo: newDoc.titulo,\n        descricao: newDoc.descricao,\n        orgaoEmissor: newDoc.orgaoEmissor,\n        dataPublicacao: newDoc.dataPublicacao,\n        dataVigencia: newDoc.dataVigencia,\n        status: newDoc.status,\n        assunto: newDoc.assunto,\n        arquivoUrl: newDoc.arquivoUrl\n      };\n\n      if (editingDoc) {\n        updateDocumentMutation.mutate({ id: editingDoc.id, ...documentData });\n      } else {\n        createDocumentMutation.mutate(documentData);\n      }\n    } else {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, preencha todos os campos obrigatórios: Tipo, Número e Título.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEdit = (doc: Document) => {\n    setEditingDoc(doc);\n    setNewDoc(doc);\n    setIsAddModalOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    deleteDocumentMutation.mutate(id);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Vigente': return 'bg-green-100 text-green-800';\n      case 'Revogado': return 'bg-red-100 text-red-800';\n      case 'Suspenso': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTypeColor = (tipo: string) => {\n    switch (tipo) {\n      case 'Lei': return 'bg-blue-100 text-blue-800';\n      case 'Instrução Normativa': return 'bg-purple-100 text-purple-800';\n      case 'Portaria': return 'bg-orange-100 text-orange-800';\n      case 'Ofício Circular': return 'bg-teal-100 text-teal-800';\n      case 'Nota Técnica': return 'bg-indigo-100 text-indigo-800';\n      case 'Termo de Cooperação Técnica': return 'bg-pink-100 text-pink-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Get unique years for filter\n  const availableYears = Array.from(new Set(documents.map(doc => doc.ano))).sort((a, b) => b.localeCompare(a));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Scale className=\"w-5 h-5 mr-2 text-blue-600\" />\n              Normatização Legal e Técnica ({filteredDocs.length} documentos)\n            </div>\n            <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-md\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Novo Documento\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingDoc ? 'Editar Documento' : 'Adicionar Novo Documento'}\n                  </DialogTitle>\n                </DialogHeader>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 py-4\">\n                  <div>\n                    <Label>Tipo de Documento</Label>\n                    <Select value={newDoc.tipo} onValueChange={(value) => setNewDoc(prev => ({...prev, tipo: value as Document['tipo']}))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {documentTypes.map(type => (\n                          <SelectItem key={type} value={type}>{type}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label>Número</Label>\n                    <Input\n                      value={newDoc.numero}\n                      onChange={(e) => setNewDoc(prev => ({...prev, numero: e.target.value}))}\n                      placeholder=\"Ex: 123/2024\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Ano</Label>\n                    <Input\n                      value={newDoc.ano}\n                      onChange={(e) => setNewDoc(prev => ({...prev, ano: e.target.value}))}\n                      placeholder=\"2024\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Status</Label>\n                    <Select value={newDoc.status} onValueChange={(value) => setNewDoc(prev => ({...prev, status: value as Document['status']}))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {statusOptions.map(status => (\n                          <SelectItem key={status} value={status}>{status}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <Label>Título</Label>\n                    <Input\n                      value={newDoc.titulo}\n                      onChange={(e) => setNewDoc(prev => ({...prev, titulo: e.target.value}))}\n                      placeholder=\"Título do documento\"\n                    />\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <Label>Descrição/Ementa</Label>\n                    <Textarea\n                      value={newDoc.descricao}\n                      onChange={(e) => setNewDoc(prev => ({...prev, descricao: e.target.value}))}\n                      placeholder=\"Descrição detalhada do documento\"\n                      rows={3}\n                    />\n                  </div>\n                  <div>\n                    <Label>Órgão Emissor</Label>\n                    <Input\n                      value={newDoc.orgaoEmissor}\n                      onChange={(e) => setNewDoc(prev => ({...prev, orgaoEmissor: e.target.value}))}\n                      placeholder=\"Ex: Secretaria de Segurança Pública\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Assunto</Label>\n                    <Input\n                      value={newDoc.assunto}\n                      onChange={(e) => setNewDoc(prev => ({...prev, assunto: e.target.value}))}\n                      placeholder=\"Assunto principal\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Data de Publicação</Label>\n                    <Input\n                      type=\"date\"\n                      value={newDoc.dataPublicacao}\n                      onChange={(e) => setNewDoc(prev => ({...prev, dataPublicacao: e.target.value}))}\n                    />\n                  </div>\n                  <div>\n                    <Label>Data de Vigência</Label>\n                    <Input\n                      type=\"date\"\n                      value={newDoc.dataVigencia}\n                      onChange={(e) => setNewDoc(prev => ({...prev, dataVigencia: e.target.value}))}\n                    />\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <Label>Arquivo (PDF)</Label>\n                    <Input\n                      type=\"file\"\n                      accept=\".pdf,.doc,.docx\"\n                      onChange={handleFileUpload}\n                    />\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsAddModalOpen(false)}>\n                    Cancelar\n                  </Button>\n                  <Button \n                    onClick={handleSaveDocument}\n                    disabled={createDocumentMutation.isPending || updateDocumentMutation.isPending}\n                  >\n                    {(createDocumentMutation.isPending || updateDocumentMutation.isPending) ? (\n                      'Salvando...'\n                    ) : (\n                      editingDoc ? 'Atualizar' : 'Salvar'\n                    )}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </CardTitle>\n        </CardHeader>\n      </Card>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Filter className=\"w-5 h-5 mr-2\" />\n            Filtros e Pesquisa\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n            <div>\n              <Label>Pesquisar</Label>\n              <div className=\"relative\">\n                <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                <Input\n                  placeholder=\"Título, número ou descrição\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label>Tipo</Label>\n              <Select value={filterType} onValueChange={setFilterType}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os tipos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all-types\">Todos os tipos</SelectItem>\n                  {documentTypes.map(type => (\n                    <SelectItem key={type} value={type}>{type}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label>Status</Label>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all-status\">Todos os status</SelectItem>\n                  {statusOptions.map(status => (\n                    <SelectItem key={status} value={status}>{status}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label>Ano</Label>\n              <Select value={filterYear} onValueChange={setFilterYear}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os anos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all-years\">Todos os anos</SelectItem>\n                  {availableYears.map(year => (\n                    <SelectItem key={year} value={year}>{year}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setSearchTerm('');\n                  setFilterType('all-types');\n                  setFilterStatus('all-status');\n                  setFilterYear('all-years');\n                  setCurrentPage(1);\n                }}\n                className=\"w-full\"\n              >\n                Limpar Filtros\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Documents Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <FileText className=\"w-5 h-5 mr-2\" />\n              Documentos ({filteredDocs.length} encontrados)\n            </div>\n            {totalPages > 1 && (\n              <div className=\"text-sm text-gray-600\">\n                Página {currentPage} de {totalPages} ({startIndex + 1}-{Math.min(endIndex, filteredDocs.length)} de {filteredDocs.length})\n              </div>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {filteredDocs.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <FileText className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">Nenhum documento encontrado</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Tipo</TableHead>\n                    <TableHead>Número/Ano</TableHead>\n                    <TableHead>Título</TableHead>\n                    <TableHead>Órgão Emissor</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Publicação</TableHead>\n                    <TableHead>Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {paginatedDocs.map((doc) => (\n                    <TableRow key={doc.id} className=\"hover:bg-gray-50\">\n                      <TableCell>\n                        <Badge className={`text-xs ${getTypeColor(doc.tipo)}`}>\n                          {doc.tipo}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        {doc.numero}/{doc.ano}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <div className=\"truncate\" title={doc.titulo}>\n                          {doc.titulo}\n                        </div>\n                        {doc.assunto && (\n                          <div className=\"text-xs text-gray-500 truncate\">\n                            {doc.assunto}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-gray-600\">\n                        {doc.orgaoEmissor || '-'}\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={`text-xs ${getStatusColor(doc.status)}`}>\n                          {doc.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-sm\">\n                        {doc.dataPublicacao ? \n                          new Date(doc.dataPublicacao).toLocaleDateString('pt-BR') : \n                          '-'\n                        }\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-1\">\n                          {doc.arquivoUrl && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => window.open(doc.arquivoUrl, '_blank')}\n                              className=\"h-8 w-8 p-0 hover:bg-blue-100 text-blue-600\"\n                            >\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                          {doc.arquivoUrl && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => {\n                                const a = document.createElement('a');\n                                a.href = doc.arquivoUrl!;\n                                a.download = `${doc.tipo}_${doc.numero}_${doc.ano}.pdf`;\n                                a.click();\n                              }}\n                              className=\"h-8 w-8 p-0 hover:bg-green-100 text-green-600\"\n                            >\n                              <Download className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => handleEdit(doc)}\n                            className=\"h-8 w-8 p-0 hover:bg-yellow-100 text-yellow-600\"\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => handleDelete(doc.id)}\n                            className=\"h-8 w-8 p-0 hover:bg-red-100 text-red-600\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n\n              {/* Pagination */}\n              {totalPages > 1 && (\n                <div className=\"flex items-center justify-between mt-4 pt-4 border-t\">\n                  <div className=\"text-sm text-gray-600\">\n                    Mostrando {startIndex + 1} a {Math.min(endIndex, filteredDocs.length)} de {filteredDocs.length} documentos\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                      disabled={currentPage === 1}\n                      className=\"bg-gradient-to-r from-blue-50 to-blue-100 hover:from-blue-100 hover:to-blue-200 border-blue-300 text-blue-700\"\n                    >\n                      <ChevronLeft className=\"w-4 h-4\" />\n                      Anterior\n                    </Button>\n                    \n                    <div className=\"flex items-center gap-1\">\n                      {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                        let pageNum;\n                        if (totalPages <= 5) {\n                          pageNum = i + 1;\n                        } else if (currentPage <= 3) {\n                          pageNum = i + 1;\n                        } else if (currentPage >= totalPages - 2) {\n                          pageNum = totalPages - 4 + i;\n                        } else {\n                          pageNum = currentPage - 2 + i;\n                        }\n                        \n                        return (\n                          <Button\n                            key={pageNum}\n                            variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                            size=\"sm\"\n                            onClick={() => setCurrentPage(pageNum)}\n                            className={`w-8 h-8 p-0 ${\n                              currentPage === pageNum \n                                ? 'bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800' \n                                : 'bg-gradient-to-r from-blue-50 to-blue-100 hover:from-blue-100 hover:to-blue-200 border-blue-300 text-blue-700'\n                            }`}\n                          >\n                            {pageNum}\n                          </Button>\n                        );\n                      })}\n                    </div>\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                      disabled={currentPage === totalPages}\n                      className=\"bg-gradient-to-r from-blue-50 to-blue-100 hover:from-blue-100 hover:to-blue-200 border-blue-300 text-blue-700\"\n                    >\n                      Próxima\n                      <ChevronRight className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":26390},"client/src/components/normalization.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport { CheckCircle, FileText, Info, ExternalLink, Clock, AlertTriangle, CheckSquare } from \"lucide-react\";\nimport { generatePDFReport } from \"@/lib/pdf-generator\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface NormalizationProps {\n  data: any[];\n  reportData?: any;\n}\n\nexport default function Normalization({ data, reportData }: NormalizationProps) {\n  // Buscar dados de controle de prazos para integração\n  const { data: controlePrazos = [] } = useQuery<any[]>({\n    queryKey: ['/api/controle-prazos'],\n  });\n\n  const nonComplianceData = reportData?.charts?.nonComplianceData || \n    data.reduce((acc: any[], item) => {\n      const compliance = acc.find(c => c.name === item.naoConformidade);\n      if (compliance) {\n        compliance.value += 1;\n      } else {\n        acc.push({ name: item.naoConformidade, value: 1 });\n      }\n      return acc;\n    }, []);\n\n  // Função para truncar texto longo\n  const truncateText = (text: string, maxLength: number = 40) => {\n    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;\n  };\n\n  // Cores vibrantes para o gráfico\n  const colors = [\n    '#1e40af', '#dc2626', '#059669', '#d97706', '#7c3aed',\n    '#0891b2', '#ea580c', '#65a30d', '#db2777', '#4f46e5'\n  ];\n\n  // Preparar dados para o gráfico com cores e texto truncado - Top 20\n  const chartData = nonComplianceData\n    .sort((a: any, b: any) => b.value - a.value)\n    .slice(0, 20)\n    .map((item: any, index: number) => ({\n      ...item,\n      name: truncateText(item.name, 25),\n      fullName: item.name,\n      fill: colors[index % colors.length]\n    }));\n\n  // Estatísticas de regularização\n  const statusStats = {\n    regularizado: controlePrazos.filter(item => item.status === 'regularizado').length,\n    pendente: controlePrazos.filter(item => item.status === 'pendente').length,\n    naoRegularizado: controlePrazos.filter(item => item.status === 'nao_regularizado').length,\n    total: controlePrazos.length\n  };\n\n  // Dados para gráfico de pizza de status\n  const statusPieData = [\n    { name: 'Regularizado', value: statusStats.regularizado, fill: '#10b981' },\n    { name: 'Pendente', value: statusStats.pendente, fill: '#f59e0b' },\n    { name: 'Não Regularizado', value: statusStats.naoRegularizado, fill: '#ef4444' }\n  ];\n\n  // Pendentes com link SEI\n  const pendentesComSei = controlePrazos.filter(item => \n    item.status === 'pendente' && item.linkSei\n  );\n\n  const handleGenerateReport = () => {\n    generatePDFReport('normalization', data, { nonComplianceData });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header com métricas principais */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-600 text-sm font-medium\">Total de Não Conformidades</p>\n                <p className=\"text-2xl font-bold text-blue-700\">{data.length}</p>\n              </div>\n              <FileText className=\"w-8 h-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-green-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-600 text-sm font-medium\">Regularizados</p>\n                <p className=\"text-2xl font-bold text-green-700\">{statusStats.regularizado}</p>\n              </div>\n              <CheckSquare className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-yellow-50 to-yellow-100 border-yellow-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-yellow-600 text-sm font-medium\">Pendentes</p>\n                <p className=\"text-2xl font-bold text-yellow-700\">{statusStats.pendente}</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-yellow-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-red-50 to-red-100 border-red-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-red-600 text-sm font-medium\">Não Regularizados</p>\n                <p className=\"text-2xl font-bold text-red-700\">{statusStats.naoRegularizado}</p>\n              </div>\n              <AlertTriangle className=\"w-8 h-8 text-red-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Seção principal com gráficos */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Gráfico de barras das não conformidades */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle className=\"flex items-center\">\n              <div className=\"w-1 h-6 bg-blue-600 rounded-full mr-3\"></div>\n              Top 20 Não Conformidades Mais Frequentes\n            </CardTitle>\n            <Button onClick={handleGenerateReport} className=\"bg-police-blue hover:bg-blue-700\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Relatório PDF\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <BarChart data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 80 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f1f5f9\" />\n                <XAxis \n                  dataKey=\"name\" \n                  fontSize={8} \n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={80}\n                  interval={0}\n                />\n                <YAxis fontSize={10} />\n                <Tooltip \n                  formatter={(value: any, name: any, props: any) => [\n                    `${value} ocorrências`,\n                    props.payload?.fullName || name\n                  ]}\n                />\n                <Bar dataKey=\"value\" fill=\"#3b82f6\" radius={[3, 3, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Gráfico de pizza do status de regularização */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-lg\">\n              <div className=\"w-1 h-6 bg-green-600 rounded-full mr-3\"></div>\n              Status de Regularização\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={statusPieData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={60}\n                  outerRadius={120}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                >\n                  {statusPieData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))}\n                </Pie>\n                <Tooltip formatter={(value: any) => [`${value} itens`, 'Quantidade']} />\n              </PieChart>\n            </ResponsiveContainer>\n            \n            <div className=\"space-y-2 mt-4\">\n              {statusPieData.map((item, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <div \n                      className=\"w-3 h-3 rounded-full mr-2\"\n                      style={{ backgroundColor: item.fill }}\n                    ></div>\n                    <span className=\"text-sm text-gray-700\">{item.name}</span>\n                  </div>\n                  <Badge variant=\"outline\" style={{ borderColor: item.fill, color: item.fill }}>\n                    {item.value}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Seção de pendentes com processo SEI */}\n      {pendentesComSei.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <ExternalLink className=\"w-5 h-5 mr-2 text-yellow-600\" />\n              Pendentes de Regularização com Processo SEI\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {pendentesComSei.slice(0, 6).map((item: any, index: number) => (\n                <Card key={index} className=\"border-l-4 border-l-yellow-400 bg-yellow-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium text-gray-900\">{item.unidade}</span>\n                        <Badge variant=\"outline\" className=\"text-yellow-700 border-yellow-300\">\n                          Pendente\n                        </Badge>\n                      </div>\n                      <p className=\"text-xs text-gray-600 line-clamp-2\">{item.naoConformidade}</p>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-gray-500\">Ofício: {item.oficio}</span>\n                        {item.linkSei && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            className=\"h-6 px-2 text-xs\"\n                            onClick={() => window.open(item.linkSei, '_blank')}\n                          >\n                            <ExternalLink className=\"w-3 h-3 mr-1\" />\n                            SEI\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n            {pendentesComSei.length > 6 && (\n              <div className=\"text-center mt-4\">\n                <Badge variant=\"secondary\">\n                  +{pendentesComSei.length - 6} outros pendentes com processo SEI\n                </Badge>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":11047},"client/src/components/relatorio-por-unidade.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Building2, Download, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { generatePDFReport } from \"@/lib/pdf-generator\";\n\ninterface RelatorioPorUnidadeProps {\n  data: any[];\n}\n\nexport default function RelatorioPorUnidade({ data }: RelatorioPorUnidadeProps) {\n  const [selectedUnidade, setSelectedUnidade] = useState<string>('all');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  // Get unique unidades for filter with sorting\n  const uniqueUnidades = Array.from(new Set(data.map(item => item.unidadeInspecionada)));\n  \n  // Custom sorting function for units (numerical DTs first, then alphabetical)\n  const sortUnidades = (units: string[]) => {\n    return units.sort((a, b) => {\n      const aMatch = a.match(/^(\\d+)ª?\\s*DT/);\n      const bMatch = b.match(/^(\\d+)ª?\\s*DT/);\n      \n      if (aMatch && bMatch) {\n        return parseInt(aMatch[1]) - parseInt(bMatch[1]);\n      } else if (aMatch) {\n        return -1;\n      } else if (bMatch) {\n        return 1;\n      } else {\n        return a.localeCompare(b, 'pt-BR');\n      }\n    });\n  };\n  \n  const sortedUniqueUnidades = sortUnidades(uniqueUnidades);\n\n  // Filter data by selected unidade\n  const filteredData = selectedUnidade === 'all' \n    ? data \n    : data.filter(item => item.unidadeInspecionada === selectedUnidade);\n\n  // Calculate pagination\n  const totalPages = Math.ceil(filteredData.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedData = filteredData.slice(startIndex, endIndex);\n\n  // Reset pagination when filter changes\n  const handleUnidadeChange = (value: string) => {\n    setSelectedUnidade(value);\n    setCurrentPage(1);\n  };\n\n  const handleGeneratePDFByUnit = () => {\n    const reportData = {\n      summary: {\n        total: filteredData.length,\n        unidade: selectedUnidade === 'all' ? 'Todas as Unidades' : selectedUnidade\n      }\n    };\n    \n    generatePDFReport('unidade', filteredData, reportData, { unidade: selectedUnidade });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filter Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Building2 className=\"w-5 h-5 mr-2\" />\n            Relatório por Unidade da PCBA\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4 items-end\">\n            <div className=\"flex-1\">\n              <label className=\"text-sm font-medium mb-2 block\">\n                Selecionar Unidade:\n              </label>\n              <Select value={selectedUnidade} onValueChange={handleUnidadeChange}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione uma unidade\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as Unidades</SelectItem>\n                  {sortedUniqueUnidades.map(unidade => (\n                    <SelectItem key={unidade} value={unidade}>{unidade}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <Button \n              onClick={handleGeneratePDFByUnit}\n              className=\"bg-police-blue hover:bg-blue-700\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Gerar PDF\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <FileText className=\"w-5 h-5 mr-2\" />\n            Resumo: {selectedUnidade === 'all' ? 'Todas as Unidades' : selectedUnidade}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-blue-600\">{filteredData.length}</div>\n              <div className=\"text-sm text-gray-600\">Total de Não Conformidades</div>\n            </div>\n            <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {filteredData.filter(item => item.providenciasConclusivas === 'Regularizado').length}\n              </div>\n              <div className=\"text-sm text-gray-600\">Regularizadas</div>\n            </div>\n            <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {filteredData.filter(item => item.providenciasConclusivas === 'Em andamento').length}\n              </div>\n              <div className=\"text-sm text-gray-600\">Em Andamento</div>\n            </div>\n            <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-red-600\">\n                {filteredData.filter(item => item.providenciasConclusivas === 'Pendente').length}\n              </div>\n              <div className=\"text-sm text-gray-600\">Pendentes</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Detalhamento das Inspeções ({filteredData.length} registros)</span>\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              Página {currentPage} de {totalPages} \n              <span className=\"text-xs\">({startIndex + 1}-{Math.min(endIndex, filteredData.length)} de {filteredData.length})</span>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"min-w-[200px]\">Unidade</TableHead>\n                  <TableHead>Departamento</TableHead>\n                  <TableHead>Data da Inspeção</TableHead>\n                  <TableHead className=\"min-w-[150px]\">Delegado Corregedor</TableHead>\n                  <TableHead className=\"min-w-[200px]\">Não Conformidades Identificadas</TableHead>\n                  <TableHead className=\"min-w-[200px]\">Providências para Regularização</TableHead>\n                  <TableHead className=\"min-w-[150px]\">Prazo para Regularização</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {paginatedData.map((item, index) => (\n                  <TableRow key={index}>\n                    <TableCell className=\"font-medium\">\n                      <div className=\"max-w-[200px]\">\n                        <div className=\"font-semibold text-sm\">{item.unidadeInspecionada}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className=\"font-mono text-xs\">\n                        {item.departamento}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-sm\">\n                      {new Date(item.dataInspecao).toLocaleDateString('pt-BR')}\n                    </TableCell>\n                    <TableCell className=\"text-sm\">\n                      {item.delegadoCorregedor}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-[200px]\">\n                        <div className=\"font-medium text-sm mb-1\">{item.naoConformidade}</div>\n                        {item.descricaoNaoConformidade && (\n                          <div className=\"text-xs text-gray-600 line-clamp-2\">\n                            {item.descricaoNaoConformidade}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-[200px] text-xs space-y-1\">\n                        {item.providenciasIniciais && (\n                          <div><span className=\"font-medium\">Iniciais:</span> {item.providenciasIniciais}</div>\n                        )}\n                        {item.providenciasIntermediarias && (\n                          <div><span className=\"font-medium\">Intermediárias:</span> {item.providenciasIntermediarias}</div>\n                        )}\n                        {item.providenciasConclusivas && (\n                          <div><span className=\"font-medium\">Conclusivas:</span> {item.providenciasConclusivas}</div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm space-y-1\">\n                        {item.diasPrazo && (\n                          <div className=\"font-medium\">{item.diasPrazo} dias</div>\n                        )}\n                        {item.dataFimRegularizacao && (\n                          <div className=\"text-xs text-gray-600\">\n                            Até: {new Date(item.dataFimRegularizacao).toLocaleDateString('pt-BR')}\n                          </div>\n                        )}\n                        {item.statusPrazo && (\n                          <Badge \n                            variant={\n                              item.statusPrazo === 'Dentro do prazo' ? 'default' :\n                              item.statusPrazo === 'Próximo do vencimento' ? 'secondary' :\n                              'destructive'\n                            }\n                            className=\"text-xs\"\n                          >\n                            {item.statusPrazo}\n                          </Badge>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n            {filteredData.length === 0 && (\n              <div className=\"text-center py-8 text-gray-500\">\n                Nenhuma inspeção encontrada para os filtros selecionados.\n              </div>\n            )}\n          </div>\n\n          {/* Pagination Controls */}\n          {totalPages > 1 && (\n            <div className=\"flex items-center justify-between mt-4 px-2\">\n              <div className=\"text-sm text-gray-600\">\n                Mostrando {startIndex + 1} a {Math.min(endIndex, filteredData.length)} de {filteredData.length} registros\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                  disabled={currentPage === 1}\n                >\n                  <ChevronLeft className=\"w-4 h-4\" />\n                  Anterior\n                </Button>\n                \n                <div className=\"flex items-center gap-1\">\n                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                    let pageNum;\n                    if (totalPages <= 5) {\n                      pageNum = i + 1;\n                    } else if (currentPage <= 3) {\n                      pageNum = i + 1;\n                    } else if (currentPage >= totalPages - 2) {\n                      pageNum = totalPages - 4 + i;\n                    } else {\n                      pageNum = currentPage - 2 + i;\n                    }\n                    \n                    return (\n                      <Button\n                        key={pageNum}\n                        variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(pageNum)}\n                        className=\"w-8 h-8 p-0\"\n                      >\n                        {pageNum}\n                      </Button>\n                    );\n                  })}\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                  disabled={currentPage === totalPages}\n                >\n                  Próxima\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12903},"client/src/components/reports.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line, AreaChart, Area } from 'recharts';\nimport { FileText, Filter, Download, AlertTriangle, Clock, CheckCircle, TrendingUp, ChevronLeft, ChevronRight, BarChart3, PieChart as PieChartIcon, Activity, Target, Zap, Users } from \"lucide-react\";\nimport { generatePDFReport } from \"@/lib/pdf-generator\";\nimport * as XLSX from 'xlsx';\n\ninterface ReportsProps {\n  data: any[];\n  reportData?: any;\n  filters?: any;\n  onFilterChange?: (filters: any) => void;\n}\n\nexport default function Reports({ data, reportData, filters = {}, onFilterChange }: ReportsProps) {\n  const [reportFilters, setReportFilters] = useState({\n    reportType: 'non-compliance',\n    dateRange: 'all',\n    department: 'all',\n    status: 'all',\n    criticality: 'all'\n  });\n\n  // Apply filter when department changes\n  const handleDepartmentChange = (department: string) => {\n    setReportFilters(prev => ({ ...prev, department }));\n    if (onFilterChange) {\n      const newFilters = department === 'all' ? {} : { departamento: [department] };\n      onFilterChange(newFilters);\n    }\n  };\n\n  // Apply filter when status changes\n  const handleStatusChange = (status: string) => {\n    setReportFilters(prev => ({ ...prev, status }));\n    if (onFilterChange) {\n      let filterValue = status;\n      if (status === 'sem_status') {\n        filterValue = ''; // Convert to empty string for database query\n      }\n      const newFilters = status === 'all' ? {} : { statusPrazo: filterValue };\n      onFilterChange(newFilters);\n    }\n  };\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  const [customDateRange, setCustomDateRange] = useState({\n    startDate: '',\n    endDate: ''\n  });\n\n  // Export to Excel function\n  const exportToExcel = () => {\n    try {\n      // Prepare data for export\n      const exportData = filteredData.map(item => ({\n        'Número': item.numero,\n        'Unidade Inspecionada': item.unidadeInspecionada,\n        'Departamento': item.departamento,\n        'COORPIN': item.coorpin,\n        'Data Inspeção': new Date(item.dataInspecao).toLocaleDateString('pt-BR'),\n        'Não Conformidade': item.naoConformidade,\n        'Criticidade': item.criticidade,\n        'Status': item.statusPrazo || 'N/A',\n        'Observações': item.observacoes || ''\n      }));\n\n      // Create workbook and worksheet\n      const wb = XLSX.utils.book_new();\n      const ws = XLSX.utils.json_to_sheet(exportData);\n\n      // Auto-fit columns\n      const colWidths = [\n        { wch: 10 },  // Número\n        { wch: 30 },  // Unidade Inspecionada\n        { wch: 15 },  // Departamento\n        { wch: 15 },  // COORPIN\n        { wch: 12 },  // Data Inspeção\n        { wch: 40 },  // Não Conformidade\n        { wch: 12 },  // Criticidade\n        { wch: 12 },  // Status\n        { wch: 30 }   // Observações\n      ];\n      ws['!cols'] = colWidths;\n\n      // Add worksheet to workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Relatório de Inspeções');\n\n      // Generate filename with current date\n      const now = new Date();\n      const filename = `relatorio-inspecoes-${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}.xlsx`;\n\n      // Save file\n      XLSX.writeFile(wb, filename);\n      \n      console.log('Excel exportado com sucesso:', filename);\n    } catch (error) {\n      console.error('Erro ao exportar Excel:', error);\n    }\n  };\n\n  const COLORS = ['hsl(207, 90%, 54%)', 'hsl(142, 76%, 36%)', 'hsl(45, 93%, 47%)', 'hsl(0, 84%, 60%)', 'hsl(280, 100%, 70%)'];\n\n  // Filter data based on current filters\n  const filteredData = data.filter(item => {\n    if (reportFilters.department !== 'all' && item.departamento !== reportFilters.department) return false;\n    if (reportFilters.status !== 'all' && item.statusPrazo !== reportFilters.status) return false;\n    if (reportFilters.criticality !== 'all' && item.criticidade !== reportFilters.criticality) return false;\n    \n    if (reportFilters.dateRange === 'custom' && customDateRange.startDate && customDateRange.endDate) {\n      const itemDate = new Date(item.dataInspecao);\n      const startDate = new Date(customDateRange.startDate);\n      const endDate = new Date(customDateRange.endDate);\n      if (itemDate < startDate || itemDate > endDate) return false;\n    }\n    \n    return true;\n  });\n\n  // Calculate pagination\n  const totalPages = Math.ceil(filteredData.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedData = filteredData.slice(startIndex, endIndex);\n\n  // Reset pagination when filters change\n  const handleFilterChange = (key: string, value: string) => {\n    setReportFilters(prev => ({ ...prev, [key]: value }));\n    setCurrentPage(1);\n  };\n\n  // Generate statistics for filtered data - Count unique inspections vs total non-conformities\n  const uniqueInspections = new Set();\n  filteredData.forEach(item => {\n    const key = `${item.unidadeInspecionada}-${item.dataInspecao}`;\n    uniqueInspections.add(key);\n  });\n\n  // Use reportData summary if available (from backend API with proper filtering)\n  const statistics = reportData?.summary ? {\n    total: reportData.summary.totalInspections,\n    nonCompliances: reportData.summary.totalNonCompliances,\n    withinDeadline: reportData.summary.withinDeadline,\n    nearDeadline: reportData.summary.nearDeadline,\n    overdue: reportData.summary.overdue,\n    // CORRIGIDO: Usar dados reais do Status de Regularização\n    regularized: reportData.summary.regularizados || 0,\n    pending: reportData.summary.pendentes || 0,\n    naoRegularizados: reportData.summary.naoRegularizados || 0,\n    totalControlePrazos: reportData.summary.totalControlePrazos || 0\n  } : {\n    total: uniqueInspections.size, // Unique inspections by unit/date  \n    nonCompliances: filteredData.length, // Total non-conformities\n    withinDeadline: filteredData.filter(item => item.statusPrazo === 'Dentro do prazo').length,\n    nearDeadline: filteredData.filter(item => item.statusPrazo === 'Próximo do vencimento').length,\n    overdue: filteredData.filter(item => item.statusPrazo === 'Prazo expirado').length,\n    regularized: 0, // Fallback quando não há reportData\n    pending: 0,\n    naoRegularizados: 0,\n    totalControlePrazos: 0\n  };\n\n  // Chart data - Count unique inspections by department like in dashboard-general\n  const departmentChart = reportData?.charts?.departmentData || filteredData.reduce((acc: any[], item) => {\n    const key = `${item.unidadeInspecionada}-${item.dataInspecao}-${item.delegadoCorregedor}`;\n    const dept = acc.find(d => d.name === item.departamento);\n    if (dept) {\n      if (!dept.uniqueInspections) dept.uniqueInspections = new Set();\n      if (!dept.uniqueInspections.has(key)) {\n        dept.uniqueInspections.add(key);\n        dept.value += 1; // Count unique inspections only\n      }\n    } else {\n      const uniqueInspections = new Set([key]);\n      acc.push({ name: item.departamento, value: 1, uniqueInspections });\n    }\n    return acc;\n  }, []).map((item: any) => ({ name: item.name, value: item.value }));\n\n  const nonComplianceChart = filteredData.reduce((acc: any[], item) => {\n    const nc = acc.find(n => n.name === item.naoConformidade);\n    if (nc) {\n      nc.value += 1;\n    } else {\n      acc.push({ name: item.naoConformidade, value: 1 });\n    }\n    return acc;\n  }, []);\n\n  const statusChart = filteredData.reduce((acc: any[], item) => {\n    // Define status padrão se não existir ou for null/undefined\n    const statusName = item.statusPrazo || 'Não informado';\n    const status = acc.find(s => s.name === statusName);\n    if (status) {\n      status.value += 1;\n    } else {\n      acc.push({ name: statusName, value: 1 });\n    }\n    return acc;\n  }, []);\n\n  const criticalityChart = filteredData.reduce((acc: any[], item) => {\n    const crit = acc.find(c => c.name === item.criticidade);\n    if (crit) {\n      crit.value += 1;\n    } else {\n      acc.push({ name: item.criticidade, value: 1 });\n    }\n    return acc;\n  }, []);\n\n  const handleGenerateReport = (reportType: string) => {\n    const reportData = {\n      summary: statistics,\n      charts: {\n        departmentData: departmentChart,\n        nonComplianceData: nonComplianceChart,\n        statusData: statusChart,\n        criticalityData: criticalityChart\n      }\n    };\n    \n    // Clean filters to show only user-relevant information\n    const cleanFilters: any = {};\n    if (reportFilters.department && reportFilters.department !== 'all') {\n      cleanFilters['Departamento'] = reportFilters.department;\n    }\n    if (reportFilters.dateRange && reportFilters.dateRange !== 'all') {\n      if (reportFilters.dateRange === 'custom' && customDateRange.startDate && customDateRange.endDate) {\n        cleanFilters['Período'] = `${customDateRange.startDate} até ${customDateRange.endDate}`;\n      } else {\n        cleanFilters['Período'] = reportFilters.dateRange === 'last30' ? 'Últimos 30 dias' : \n                                 reportFilters.dateRange === 'last90' ? 'Últimos 90 dias' : \n                                 'Período personalizado';\n      }\n    }\n    if (reportFilters.status && reportFilters.status !== 'all') {\n      cleanFilters['Status'] = reportFilters.status;\n    }\n    if (reportFilters.criticality && reportFilters.criticality !== 'all') {\n      cleanFilters['Criticidade'] = reportFilters.criticality;\n    }\n    \n    generatePDFReport(reportType, filteredData, reportData, cleanFilters);\n  };\n\n  const uniqueDepartments = Array.from(new Set(data.map(item => item.departamento)));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Modern Filters Section */}\n      <Card className=\"border-l-4 border-l-purple-500 bg-gradient-to-r from-purple-50 to-indigo-50\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center text-purple-800\">\n            <Filter className=\"w-6 h-6 mr-3\" />\n            Central de Filtros e Relatórios\n          </CardTitle>\n          <p className=\"text-sm text-purple-600 mt-1\">Configure os parâmetros e gere relatórios personalizados</p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-4\">\n            <div>\n              <Label>Tipo de Relatório</Label>\n              <Select \n                value={reportFilters.reportType}\n                onValueChange={(value) => setReportFilters({...reportFilters, reportType: value})}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"non-compliance\">Não Conformidades</SelectItem>\n                  <SelectItem value=\"deadlines\">Prazos</SelectItem>\n                  <SelectItem value=\"status\">Status Geral</SelectItem>\n                  <SelectItem value=\"department\">Por Departamento</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Período</Label>\n              <Select \n                value={reportFilters.dateRange}\n                onValueChange={(value) => setReportFilters({...reportFilters, dateRange: value})}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os períodos</SelectItem>\n                  <SelectItem value=\"last-30\">Últimos 30 dias</SelectItem>\n                  <SelectItem value=\"last-90\">Últimos 90 dias</SelectItem>\n                  <SelectItem value=\"custom\">Período personalizado</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Departamento</Label>\n              <Select \n                value={reportFilters.department}\n                onValueChange={handleDepartmentChange}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os departamentos</SelectItem>\n                  {uniqueDepartments.map(dept => (\n                    <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Status do Prazo</Label>\n              <Select \n                value={reportFilters.status}\n                onValueChange={handleStatusChange}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os status</SelectItem>\n                  <SelectItem value=\"Dentro do prazo\">Dentro do prazo</SelectItem>\n                  <SelectItem value=\"Pendente\">Pendente</SelectItem>\n                  <SelectItem value=\"sem_status\">Sem status definido</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Criticidade</Label>\n              <Select \n                value={reportFilters.criticality}\n                onValueChange={(value) => setReportFilters({...reportFilters, criticality: value})}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as criticidades</SelectItem>\n                  <SelectItem value=\"Alta\">Alta</SelectItem>\n                  <SelectItem value=\"Média\">Média</SelectItem>\n                  <SelectItem value=\"Baixa\">Baixa</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {reportFilters.dateRange === 'custom' && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n              <div>\n                <Label>Data Inicial</Label>\n                <Input \n                  type=\"date\" \n                  value={customDateRange.startDate}\n                  onChange={(e) => setCustomDateRange({...customDateRange, startDate: e.target.value})}\n                />\n              </div>\n              <div>\n                <Label>Data Final</Label>\n                <Input \n                  type=\"date\" \n                  value={customDateRange.endDate}\n                  onChange={(e) => setCustomDateRange({...customDateRange, endDate: e.target.value})}\n                />\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex gap-3\">\n            <Button \n              onClick={() => handleGenerateReport(reportFilters.reportType)} \n              className=\"bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white\"\n              size=\"lg\"\n            >\n              <Download className=\"w-5 h-5 mr-2\" />\n              Gerar Relatório PDF\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"border-purple-200 text-purple-700 hover:bg-purple-50\"\n              size=\"lg\"\n              onClick={exportToExcel}\n            >\n              <Target className=\"w-5 h-5 mr-2\" />\n              Exportar Dados\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Modern Statistics Overview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Left Panel - Main KPIs */}\n        <Card className=\"bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 border-blue-200\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div>\n                <h3 className=\"text-2xl font-bold text-gray-800\">Indicadores Principais</h3>\n                <p className=\"text-gray-600 mt-1\">Visão geral dos dados de inspeção</p>\n              </div>\n              <div className=\"p-3 bg-blue-100 rounded-xl\">\n                <BarChart3 className=\"w-8 h-8 text-blue-600\" />\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-6\">\n              <div className=\"bg-white rounded-xl p-5 border border-blue-100 shadow-sm\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-3 bg-blue-500 rounded-lg\">\n                    <FileText className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <p className=\"text-3xl font-bold text-gray-800\">{statistics.total}</p>\n                    <p className=\"text-gray-600 text-sm\">Total de Inspeções</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-white rounded-xl p-5 border border-red-100 shadow-sm\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-3 bg-red-500 rounded-lg\">\n                    <AlertTriangle className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <p className=\"text-3xl font-bold text-gray-800\">{statistics.nonCompliances}</p>\n                    <p className=\"text-gray-600 text-sm\">Não Conformidades</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Right Panel - Status de Regularização */}\n        <Card className=\"bg-gradient-to-br from-orange-50 to-red-50 border-orange-200\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center text-orange-800\">\n              <Activity className=\"w-6 h-6 mr-3\" />\n              Status de Regularização\n            </CardTitle>\n            <p className=\"text-sm text-orange-600\">Dados vinculados ao controle de prazos</p>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-center mb-6\">\n              <p className=\"text-4xl font-bold text-orange-700\">{statistics.totalControlePrazos}</p>\n              <p className=\"text-sm text-orange-600\">Total de Registros de Controle</p>\n            </div>\n            \n            <div className=\"grid grid-cols-3 gap-3\">\n              <div className=\"text-center p-4 bg-green-100 rounded-lg border border-green-200\">\n                <div className=\"p-2 bg-green-500 rounded-full w-12 h-12 mx-auto mb-2 flex items-center justify-center\">\n                  <CheckCircle className=\"w-6 h-6 text-white\" />\n                </div>\n                <p className=\"text-2xl font-bold text-green-700\">{statistics.regularized}</p>\n                <p className=\"text-xs text-green-600 font-medium\">Regularizadas</p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-yellow-100 rounded-lg border border-yellow-200\">\n                <div className=\"p-2 bg-yellow-500 rounded-full w-12 h-12 mx-auto mb-2 flex items-center justify-center\">\n                  <Clock className=\"w-6 h-6 text-white\" />\n                </div>\n                <p className=\"text-2xl font-bold text-yellow-700\">{statistics.pending}</p>\n                <p className=\"text-xs text-yellow-600 font-medium\">Pendentes</p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-red-100 rounded-lg border border-red-200\">\n                <div className=\"p-2 bg-red-500 rounded-full w-12 h-12 mx-auto mb-2 flex items-center justify-center\">\n                  <Zap className=\"w-6 h-6 text-white\" />\n                </div>\n                <p className=\"text-2xl font-bold text-red-700\">{statistics.naoRegularizados}</p>\n                <p className=\"text-xs text-red-600 font-medium\">Não Regular.</p>\n              </div>\n            </div>\n            \n            {/* Progress Indicator */}\n            <div className=\"mt-6 p-4 bg-white rounded-lg border\">\n              <div className=\"flex justify-between text-sm font-medium mb-2\">\n                <span className=\"text-gray-700\">Taxa de Regularização</span>\n                <span className=\"text-orange-600\">\n                  {statistics.totalControlePrazos > 0 ? ((statistics.regularized / statistics.totalControlePrazos) * 100).toFixed(1) : 0}%\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                <div \n                  className=\"bg-gradient-to-r from-green-500 to-emerald-500 h-3 rounded-full transition-all duration-500\"\n                  style={{ \n                    width: statistics.totalControlePrazos > 0 ? `${(statistics.regularized / statistics.totalControlePrazos) * 100}%` : '0%'\n                  }}\n                ></div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Modern Analytics Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Enhanced Non-Compliance Chart */}\n        <Card className=\"lg:col-span-2 border-l-4 border-l-indigo-500\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-xl font-bold text-gray-800 flex items-center\">\n                  <BarChart3 className=\"w-6 h-6 mr-3 text-indigo-600\" />\n                  Análise de Não Conformidades\n                </CardTitle>\n                <p className=\"text-sm text-gray-500 mt-1\">Distribuição por categoria de irregularidade</p>\n              </div>\n              <Badge className=\"bg-indigo-100 text-indigo-700\">{nonComplianceChart.length} tipos</Badge>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={350}>\n              <BarChart data={nonComplianceChart.slice(0, 15)} margin={{ top: 30, left: 20, right: 20, bottom: 80 }}>\n                <defs>\n                  <linearGradient id=\"nonComplianceGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#6366f1\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#6366f1\" stopOpacity={0.2}/>\n                  </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                <XAxis \n                  dataKey=\"name\" \n                  fontSize={9} \n                  angle={-45} \n                  textAnchor=\"end\" \n                  height={80}\n                  stroke=\"#6b7280\"\n                />\n                <YAxis fontSize={12} stroke=\"#6b7280\" />\n                <Tooltip \n                  contentStyle={{\n                    backgroundColor: 'white',\n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                />\n                <Bar \n                  dataKey=\"value\" \n                  fill=\"url(#nonComplianceGradient)\"\n                  radius={[4, 4, 0, 0]}\n                >\n                  {nonComplianceChart.slice(0, 15).map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill=\"url(#nonComplianceGradient)\" />\n                  ))}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Modern Status Chart */}\n        <Card className=\"border-l-4 border-l-emerald-500\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg font-bold text-gray-800 flex items-center\">\n              <PieChartIcon className=\"w-5 h-5 mr-2 text-emerald-600\" />\n              Status dos Prazos\n            </CardTitle>\n            <p className=\"text-sm text-gray-500\">Situação atual das cobranças</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-6\">\n              {/* Gráfico à esquerda */}\n              <div className=\"flex-shrink-0\">\n                <ResponsiveContainer width={200} height={200}>\n                  <PieChart>\n                    <Pie\n                      data={statusChart}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={0}\n                      outerRadius={90}\n                      paddingAngle={3}\n                      dataKey=\"value\"\n                    >\n                      {statusChart.map((entry: any, index: number) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      formatter={(value: any, name: any) => [`${value} registros`, name]}\n                      contentStyle={{\n                        backgroundColor: 'white',\n                        border: '1px solid #e5e7eb',\n                        borderRadius: '8px',\n                        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n              \n              {/* Legenda à direita */}\n              <div className=\"flex-1 space-y-3\">\n                {statusChart.map((entry: any, index: number) => {\n                  const total = statusChart.reduce((acc: number, item: any) => acc + item.value, 0);\n                  const percentage = total > 0 ? ((entry.value / total) * 100).toFixed(1) : 0;\n                  return (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                        ></div>\n                        <span className=\"text-gray-700 text-sm\">{entry.name}</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <span className=\"font-bold text-gray-900\">{entry.value}</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Additional Analytics Row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Department Distribution */}\n        <Card className=\"border-l-4 border-l-amber-500\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-bold text-gray-800 flex items-center\">\n              <Users className=\"w-5 h-5 mr-2 text-amber-600\" />\n              Distribuição por Departamento\n            </CardTitle>\n            <p className=\"text-sm text-gray-500\">Volume de inspeções por órgão</p>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={departmentChart} margin={{ bottom: 50 }}>\n                <defs>\n                  <linearGradient id=\"deptGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#f59e0b\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#f59e0b\" stopOpacity={0.3}/>\n                  </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                <XAxis \n                  dataKey=\"name\" \n                  fontSize={10} \n                  angle={-45} \n                  textAnchor=\"end\" \n                  height={50}\n                  stroke=\"#6b7280\"\n                />\n                <YAxis fontSize={12} stroke=\"#6b7280\" />\n                <Tooltip \n                  contentStyle={{\n                    backgroundColor: 'white',\n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                />\n                <Bar \n                  dataKey=\"value\" \n                  fill=\"url(#deptGradient)\"\n                  radius={[4, 4, 0, 0]}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Criticality Analysis */}\n        <Card className=\"border-l-4 border-l-rose-500\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-bold text-gray-800 flex items-center\">\n              <Zap className=\"w-5 h-5 mr-2 text-rose-600\" />\n              Análise de Criticidade\n            </CardTitle>\n            <p className=\"text-sm text-gray-500\">Classificação por nível de urgência</p>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <PieChart>\n                <Pie\n                  data={criticalityChart}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                  outerRadius={100}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  fontSize={12}\n                >\n                  {criticalityChart.map((entry: any, index: number) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip \n                  contentStyle={{\n                    backgroundColor: 'white',\n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Enhanced Data Table */}\n      <Card className=\"border-l-4 border-l-cyan-500\">\n        <CardHeader className=\"bg-gradient-to-r from-cyan-50 to-blue-50\">\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"w-6 h-6 mr-3 text-cyan-600\" />\n              <div>\n                <h3 className=\"text-xl font-bold text-gray-800\">Detalhamento das Inspeções</h3>\n                <p className=\"text-sm text-gray-500\">Análise completa dos registros filtrados</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              Página {currentPage} de {totalPages} \n              <span className=\"text-xs\">({startIndex + 1}-{Math.min(endIndex, filteredData.length)} de {filteredData.length})</span>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nº</TableHead>\n                  <TableHead>Unidade</TableHead>\n                  <TableHead>Departamento</TableHead>\n                  <TableHead>Data</TableHead>\n                  <TableHead>Não Conformidade</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Criticidade</TableHead>\n                  <TableHead>Situação</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {paginatedData.map((item) => (\n                  <TableRow key={item.id}>\n                    <TableCell className=\"font-medium\">{item.numero}</TableCell>\n                    <TableCell className=\"max-w-xs truncate\" title={item.unidadeInspecionada}>\n                      {item.unidadeInspecionada}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">{item.departamento}</Badge>\n                    </TableCell>\n                    <TableCell>\n                      {new Date(item.dataInspecao).toLocaleDateString('pt-BR')}\n                    </TableCell>\n                    <TableCell className=\"max-w-xs truncate\" title={item.naoConformidade}>\n                      {item.naoConformidade}\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={\n                          item.statusPrazo === 'Dentro do prazo' ? 'default' :\n                          item.statusPrazo === 'Próximo do vencimento' ? 'secondary' :\n                          'destructive'\n                        }\n                      >\n                        {item.statusPrazo}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={\n                          item.criticidade === 'Alta' ? 'destructive' :\n                          item.criticidade === 'Média' ? 'secondary' :\n                          'default'\n                        }\n                      >\n                        {item.criticidade}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={\n                          item.providenciasConclusivas === 'Regularizado' ? 'default' :\n                          item.providenciasConclusivas === 'Pendente' ? 'destructive' :\n                          'secondary'\n                        }\n                      >\n                        {item.providenciasConclusivas}\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n            {filteredData.length === 0 && (\n              <div className=\"text-center py-8 text-gray-500\">\n                Nenhuma inspeção encontrada para os filtros selecionados.\n              </div>\n            )}\n          </div>\n\n          {/* Pagination Controls */}\n          {totalPages > 1 && (\n            <div className=\"flex items-center justify-between mt-4 px-2\">\n              <div className=\"text-sm text-gray-600\">\n                Mostrando {startIndex + 1} a {Math.min(endIndex, filteredData.length)} de {filteredData.length} registros\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                  disabled={currentPage === 1}\n                >\n                  <ChevronLeft className=\"w-4 h-4\" />\n                  Anterior\n                </Button>\n                \n                <div className=\"flex items-center gap-1\">\n                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                    let pageNum;\n                    if (totalPages <= 5) {\n                      pageNum = i + 1;\n                    } else if (currentPage <= 3) {\n                      pageNum = i + 1;\n                    } else if (currentPage >= totalPages - 2) {\n                      pageNum = totalPages - 4 + i;\n                    } else {\n                      pageNum = currentPage - 2 + i;\n                    }\n                    \n                    return (\n                      <Button\n                        key={pageNum}\n                        variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(pageNum)}\n                        className=\"w-8 h-8 p-0\"\n                      >\n                        {pageNum}\n                      </Button>\n                    );\n                  })}\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                  disabled={currentPage === totalPages}\n                >\n                  Próxima\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":36943},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { apiRequest } from './queryClient';\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  login: (username: string, password: string) => Promise<any>;\n  logout: () => void;\n  loading: boolean;\n  user: any;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    // Check if user is already authenticated (e.g., from localStorage)\n    const savedAuth = localStorage.getItem('auth');\n    if (savedAuth) {\n      const authData = JSON.parse(savedAuth);\n      setIsAuthenticated(true);\n      setUser(authData.user);\n    }\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    setLoading(true);\n    try {\n      const response = await apiRequest('/api/login', 'POST', { username, password });\n      const result = await response.json();\n      \n      if (result.success) {\n        setIsAuthenticated(true);\n        setUser(result.user);\n        localStorage.setItem('auth', JSON.stringify(result));\n        \n        // Armazenar token de acesso para uploads administrativos\n        if (result.accessToken) {\n          localStorage.setItem('accessToken', result.accessToken);\n        }\n      }\n      \n      setLoading(false);\n      return result;\n    } catch (error) {\n      setLoading(false);\n      return { success: false, message: 'Erro de conexão' };\n    }\n  };\n\n  const logout = () => {\n    setIsAuthenticated(false);\n    setUser(null);\n    localStorage.removeItem('auth');\n    localStorage.removeItem('accessToken');\n  };\n\n  return React.createElement(\n    AuthContext.Provider,\n    { value: { isAuthenticated, login, logout, loading, user } },\n    children\n  );\n};\n","size_bytes":2155},"client/src/lib/csv-parser.ts":{"content":"import Papa from 'papaparse';\n\nexport interface CSVInspection {\n  numero: string;\n  unidadeInspecionada: string;\n  departamento: string;\n  coorpin: string;\n  dataInspecao: string;\n  delegadoCorregedor: string;\n  naoConformidade: string;\n  descricaoNaoConformidade: string;\n  providenciasIniciais?: string;\n  providenciasIntermediarias?: string;\n  providenciasConclusivas?: string;\n  dataInicioPrazo?: string;\n  diasPrazo?: number;\n  dataFimRegularizacao?: string;\n  statusPrazo?: string;\n  dataDeterminadaNovaInspecao?: string;\n  criticidade?: string;\n}\n\nexport const parseCSVData = (csvText: string): Promise<CSVInspection[]> => {\n  return new Promise((resolve, reject) => {\n    Papa.parse(csvText, {\n      header: true,\n      skipEmptyLines: true,\n      transformHeader: (header: string) => {\n        const headerMap: { [key: string]: string } = {\n          'Nº': 'numero',\n          'Unidade Inspecionada': 'unidadeInspecionada',\n          'Departamento': 'departamento',\n          'COORPIN': 'coorpin',\n          'Data da Inspeção': 'dataInspecao',\n          'Delegado Corregedor Responsável': 'delegadoCorregedor',\n          'Não Conformidade Identificada': 'naoConformidade',\n          'Descrição da Não Conformidade Identificada': 'descricaoNaoConformidade',\n          'Providências Iniciais': 'providenciasIniciais',\n          'Providências Intermediárias': 'providenciasIntermediarias',\n          'Providências Conclusivas': 'providenciasConclusivas',\n          'Data Início Prazo Regularização': 'dataInicioPrazo',\n          'Dias Prazo': 'diasPrazo',\n          'Data Fim para Regularização': 'dataFimRegularizacao',\n          'Status Prazo para Regularização': 'statusPrazo',\n          'Data Determinada para Nova Inspeção': 'dataDeterminadaNovaInspecao',\n          'Criticidade': 'criticidade'\n        };\n        return headerMap[header] || header;\n      },\n      transform: (value: string, field: string) => {\n        // Handle date conversions and Excel serial dates\n        if (field === 'dataInspecao' || field === 'dataInicioPrazo' || \n            field === 'dataFimRegularizacao' || field === 'dataDeterminadaNovaInspecao') {\n          if (value && !isNaN(Number(value))) {\n            // Convert Excel serial date to JavaScript Date\n            const excelDate = new Date((Number(value) - 25569) * 86400 * 1000);\n            return excelDate.toISOString().split('T')[0];\n          }\n          return value;\n        }\n        if (field === 'diasPrazo') {\n          return value ? parseInt(value) : null;\n        }\n        return value || null;\n      },\n      complete: (results: any) => {\n        const validData = results.data\n          .filter((row: any) => row.numero && row.unidadeInspecionada)\n          .map((row: any) => row as CSVInspection);\n        resolve(validData);\n      },\n      error: (error: any) => {\n        reject(error);\n      }\n    });\n  });\n};\n\nexport const convertExcelDate = (serial: number): string => {\n  const utc_days = Math.floor(serial - 25569);\n  const utc_value = utc_days * 86400;\n  const date_info = new Date(utc_value * 1000);\n  return date_info.toISOString().split('T')[0];\n};\n","size_bytes":3153},"client/src/lib/date-utils.ts":{"content":"export const calculateRemainingDays = (endDateString: string): number => {\n  if (!endDateString) return 0;\n  \n  const endDate = new Date(endDateString);\n  const currentDate = new Date(); // Use current date instead of fixed date\n  \n  // Zero out the time for date-only comparison\n  currentDate.setHours(0, 0, 0, 0);\n  endDate.setHours(0, 0, 0, 0);\n  \n  const diffTime = endDate.getTime() - currentDate.getTime();\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  \n  return diffDays;\n};\n\nexport const formatDateToBR = (dateString: string): string => {\n  if (!dateString) return 'Não definida';\n  \n  const date = new Date(dateString);\n  return date.toLocaleDateString('pt-BR');\n};\n\nexport const convertExcelSerialDate = (serial: number): string => {\n  // Excel stores dates as number of days since January 1, 1900\n  // JavaScript Date epoch is January 1, 1970\n  // There's a 25569 day difference between these epochs\n  const utc_days = Math.floor(serial - 25569);\n  const utc_value = utc_days * 86400;\n  const date_info = new Date(utc_value * 1000);\n  \n  return date_info.toISOString().split('T')[0];\n};\n\nexport const getStatusFromDays = (remainingDays: number): string => {\n  if (remainingDays > 7) {\n    return 'Dentro do prazo';\n  } else if (remainingDays > 0) {\n    return 'Próximo do vencimento';\n  } else {\n    return 'Prazo expirado';\n  }\n};\n","size_bytes":1365},"client/src/lib/pdf-generator.ts":{"content":"import jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\nexport const generatePDFReport = (\n  reportType: string, \n  data: any[], \n  summary?: any,\n  filters?: any\n) => {\n  const doc = new jsPDF();\n  const currentDate = new Date().toLocaleDateString('pt-BR');\n  \n  // Add Civil Police header\n  doc.setFontSize(16);\n  doc.setFont('helvetica', 'bold');\n  doc.text('POLÍCIA CIVIL DO ESTADO DA BAHIA', 105, 20, { align: 'center' });\n  doc.text('ASTEC - CORREPOL', 105, 30, { align: 'center' });\n  \n  doc.setFontSize(14);\n  doc.text(`Relatório Produzido pela ASTEC - CORREPOL`, 105, 45, { align: 'center' });\n  \n  doc.setFontSize(10);\n  doc.text(`Data de Geração: ${currentDate}`, 20, 60);\n  \n  if (filters && Object.keys(filters).length > 0) {\n    doc.text('Filtros Aplicados:', 20, 70);\n    let yPos = 75;\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value) {\n        doc.text(`${key}: ${value}`, 25, yPos);\n        yPos += 5;\n      }\n    });\n  }\n\n  let startY = filters && Object.keys(filters).length > 0 ? 95 : 80;\n\n  switch (reportType) {\n    case 'dashboard':\n      generateDashboardReport(doc, data, summary, startY);\n      break;\n    case 'deadlines':\n      generateDeadlinesReport(doc, data, startY);\n      break;\n    case 'normalization':\n      generateNormalizationReport(doc, data, summary, startY);\n      break;\n    case 'unidade':\n      generateUnidadeSection(doc, data, summary, startY);\n      break;\n    case 'nao-conformidade':\n      generateNaoConformidadeReport(doc, data, startY, filters);\n      break;\n    default:\n      generateDashboardReport(doc, data, summary, startY);\n  }\n\n  // Save the PDF\n  const fileName = `relatorio_${reportType}_${new Date().toISOString().split('T')[0]}.pdf`;\n  doc.save(fileName);\n};\n\nconst generateDashboardReport = (doc: jsPDF, data: any[], summary: any, startY: number) => {\n  // Summary section\n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'bold');\n  doc.text('RESUMO EXECUTIVO', 20, startY);\n  \n  doc.setFont('helvetica', 'normal');\n  doc.setFontSize(10);\n  \n  // Calculate statistics from data\n  const inspectionGroups = new Map();\n  data.forEach(item => {\n    const key = `${item.delegadoCorregedor}-${item.dataInspecao}`;\n    if (!inspectionGroups.has(key)) {\n      inspectionGroups.set(key, []);\n    }\n    inspectionGroups.get(key).push(item);\n  });\n  const uniqueInspections = inspectionGroups.size;\n  const totalNonConformities = data.length;\n  const withinDeadline = data.filter(item => item.statusPrazo === 'Dentro do prazo').length;\n  const nearDeadline = data.filter(item => item.statusPrazo === 'Próximo do vencimento').length;\n  const overdue = data.filter(item => item.statusPrazo === 'Prazo expirado').length;\n  const regularized = data.filter(item => item.providenciasConclusivas === 'Regularizado').length;\n  const pending = data.filter(item => item.providenciasConclusivas === 'Pendente').length;\n  \n  const summaryText = [\n    `Total de Inspeções: ${uniqueInspections}`,\n    `Total de Não Conformidades: ${totalNonConformities}`,\n    `Dentro do Prazo: ${withinDeadline}`,\n    `Próximo do Vencimento: ${nearDeadline}`,\n    `Prazo Expirado: ${overdue}`,\n    `Regularizadas: ${regularized}`,\n    `Pendentes: ${pending}`\n  ];\n  \n  summaryText.forEach((text, index) => {\n    doc.text(text, 20, startY + 15 + (index * 7));\n  });\n\n  // Table with ALL inspection data - not limited\n  const tableData = data.map(item => [\n    item.unidadeInspecionada || 'N/A',\n    item.departamento || 'N/A',\n    item.dataInspecao ? new Date(item.dataInspecao).toLocaleDateString('pt-BR') : 'N/A',\n    item.naoConformidade || 'N/A',\n    item.descricaoNaoConformidade || 'N/A',\n    item.statusPrazo || 'N/A'\n  ]);\n\n  autoTable(doc, {\n    head: [['Unidade', 'Departamento', 'Data Inspeção', 'Não Conformidade', 'Descrição da Não Conformidade Identificada', 'Status']],\n    body: tableData,\n    startY: startY + 75,\n    styles: { \n      fontSize: 7, \n      cellPadding: 2,\n      overflow: 'linebreak'\n    },\n    headStyles: { \n      fillColor: [30, 64, 175],\n      textColor: [255, 255, 255],\n      fontStyle: 'bold'\n    },\n    columnStyles: {\n      0: { cellWidth: 25 }, // Unidade\n      1: { cellWidth: 15 }, // Departamento\n      2: { cellWidth: 15 }, // Data\n      3: { cellWidth: 30 }, // Não Conformidade\n      4: { cellWidth: 45 }, // Descrição da Não Conformidade Identificada\n      5: { cellWidth: 15 }  // Status\n    }\n  });\n};\n\nconst generateDeadlinesReport = (doc: jsPDF, data: any[], startY: number) => {\n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'bold');\n  doc.text('RELATÓRIO DE PRAZOS DE REGULARIZAÇÃO', 20, startY);\n  \n  doc.setFont('helvetica', 'normal');\n  doc.setFontSize(10);\n  \n  const inspectionGroups = new Map();\n  data.forEach(item => {\n    const key = `${item.delegadoCorregedor}-${item.dataInspecao}`;\n    if (!inspectionGroups.has(key)) {\n      inspectionGroups.set(key, []);\n    }\n    inspectionGroups.get(key).push(item);\n  });\n  const uniqueInspections = inspectionGroups.size;\n  const totalNonConformities = data.length;\n  const withDeadline = data.filter(item => item.dataFimRegularizacao).length;\n  \n  doc.text(`Total de Inspeções: ${uniqueInspections}`, 20, startY + 15);\n  doc.text(`Total de Não Conformidades: ${totalNonConformities}`, 20, startY + 25);\n  doc.text(`Com Prazo Definido: ${withDeadline}`, 20, startY + 35);\n  \n  const tableData = data.map(item => {\n    let diasRestantes = 'N/A';\n    if (item.dataFimRegularizacao) {\n      const endDate = new Date(item.dataFimRegularizacao);\n      const currentDate = new Date();\n      const diffTime = endDate.getTime() - currentDate.getTime();\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      if (diffDays > 0) {\n        diasRestantes = `${diffDays} dias restantes`;\n      } else {\n        diasRestantes = `${Math.abs(diffDays)} dias em atraso`;\n      }\n    }\n    \n    return [\n      item.unidadeInspecionada || 'N/A',\n      item.departamento || 'N/A',\n      item.naoConformidade || 'N/A',\n      item.descricaoNaoConformidade || 'N/A',\n      item.dataFimRegularizacao ? new Date(item.dataFimRegularizacao).toLocaleDateString('pt-BR') : 'N/A',\n      diasRestantes,\n      item.statusPrazo || 'N/A',\n      item.providenciasConclusivas || 'N/A'\n    ];\n  });\n\n  autoTable(doc, {\n    head: [['Unidade', 'Departamento', 'Não Conformidade', 'Descrição da Não Conformidade Identificada', 'Data Limite', 'Situação Prazo', 'Status', 'Providências']],\n    body: tableData,\n    startY: startY + 50,\n    styles: { \n      fontSize: 6, \n      cellPadding: 2,\n      overflow: 'linebreak'\n    },\n    headStyles: { \n      fillColor: [30, 64, 175],\n      textColor: [255, 255, 255],\n      fontStyle: 'bold'\n    },\n    columnStyles: {\n      0: { cellWidth: 20 }, // Unidade\n      1: { cellWidth: 12 }, // Departamento\n      2: { cellWidth: 25 }, // Não Conformidade\n      3: { cellWidth: 35 }, // Descrição da Não Conformidade Identificada\n      4: { cellWidth: 15 }, // Data Limite\n      5: { cellWidth: 18 }, // Situação Prazo\n      6: { cellWidth: 12 }, // Status\n      7: { cellWidth: 20 }  // Providências\n    }\n  });\n};\n\nconst generateNormalizationReport = (doc: jsPDF, data: any[], summary: any, startY: number) => {\n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'bold');\n  doc.text('RELATÓRIO DE NORMALIZAÇÃO', 20, startY);\n  \n  doc.setFont('helvetica', 'normal');\n  doc.setFontSize(10);\n  \n  const inspectionGroups = new Map();\n  data.forEach(item => {\n    const key = `${item.delegadoCorregedor}-${item.dataInspecao}`;\n    if (!inspectionGroups.has(key)) {\n      inspectionGroups.set(key, []);\n    }\n    inspectionGroups.get(key).push(item);\n  });\n  const uniqueInspections = inspectionGroups.size;\n  const totalNonConformities = data.length;\n  \n  doc.text(`Total de Inspeções: ${uniqueInspections}`, 20, startY + 15);\n  doc.text(`Total de Não Conformidades: ${totalNonConformities}`, 20, startY + 25);\n  doc.text(`Tipos de Não Conformidades: ${summary?.nonComplianceData?.length || 0}`, 20, startY + 35);\n\n  if (summary?.nonComplianceData) {\n    const tableData = summary.nonComplianceData.map((item: any) => [\n      item.name,\n      item.value.toString(),\n      `${((item.value / data.length) * 100).toFixed(1)}%`\n    ]);\n\n    autoTable(doc, {\n      head: [['Tipo de Não Conformidade', 'Quantidade', 'Percentual']],\n      body: tableData,\n      startY: startY + 50,\n      styles: { fontSize: 9 },\n      headStyles: { fillColor: [30, 64, 175] }\n    });\n  }\n};\n\nconst generateUnidadeSection = (doc: jsPDF, data: any[], summary: any, startY: number) => {\n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'bold');\n  doc.text('RELATÓRIO DETALHADO POR UNIDADE', 20, startY);\n  \n  doc.setFont('helvetica', 'normal');\n  doc.setFontSize(10);\n  \n  // Calculate distinct inspections (unique delegado + data combinations) and total non-conformities\n  const inspectionGroups = new Map();\n  data.forEach(item => {\n    const key = `${item.delegadoCorregedor}-${item.dataInspecao}`;\n    if (!inspectionGroups.has(key)) {\n      inspectionGroups.set(key, []);\n    }\n    inspectionGroups.get(key).push(item);\n  });\n  const uniqueInspections = inspectionGroups.size;\n  const totalNonConformities = data.length;\n  \n  doc.text(`Total de Inspeções: ${uniqueInspections}`, 20, startY + 15);\n  doc.text(`Total de Não Conformidades: ${totalNonConformities}`, 20, startY + 25);\n\n  // Table with ALL inspection data - complete information\n  const tableData = data.map(item => [\n    item.unidadeInspecionada || 'N/A',\n    item.departamento || 'N/A',\n    item.dataInspecao ? new Date(item.dataInspecao).toLocaleDateString('pt-BR') : 'N/A',\n    item.delegadoCorregedor || 'N/A',\n    item.naoConformidade || 'N/A',\n    item.descricaoNaoConformidade || 'N/A',\n    item.providenciasConclusivas || 'Pendente',\n    item.dataFimRegularizacao ? new Date(item.dataFimRegularizacao).toLocaleDateString('pt-BR') : 'N/A'\n  ]);\n\n  autoTable(doc, {\n    head: [['Unidade', 'Departamento', 'Data da Inspeção', 'Delegado Corregedor', 'Não Conformidades', 'Descrição da Não Conformidade Identificada', 'Providências para Regularização', 'Prazo para Regularização']],\n    body: tableData,\n    startY: startY + 40,\n    styles: { \n      fontSize: 6, \n      cellPadding: 2,\n      overflow: 'linebreak'\n    },\n    headStyles: { \n      fillColor: [30, 64, 175],\n      textColor: [255, 255, 255],\n      fontStyle: 'bold'\n    },\n    columnStyles: {\n      0: { cellWidth: 20 }, // Unidade\n      1: { cellWidth: 12 }, // Departamento\n      2: { cellWidth: 15 }, // Data\n      3: { cellWidth: 20 }, // Corregedor\n      4: { cellWidth: 25 }, // Não Conformidade\n      5: { cellWidth: 35 }, // Descrição da Não Conformidade Identificada\n      6: { cellWidth: 25 }, // Providências\n      7: { cellWidth: 15 }  // Prazo\n    }\n  });\n};\n\nconst generateNaoConformidadeReport = (doc: jsPDF, data: any[], startY: number, filters?: any) => {\n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'bold');\n  \n  const naoConformidadeFiltro = filters?.naoConformidade || 'Todas as não conformidades';\n  doc.text(`RELATÓRIO DE NÃO CONFORMIDADE: ${naoConformidadeFiltro.toUpperCase()}`, 20, startY);\n  \n  doc.setFont('helvetica', 'normal');\n  doc.setFontSize(10);\n  \n  // Group data by unit\n  const unidadeMap = new Map();\n  data.forEach(item => {\n    const unidade = item.unidadeInspecionada;\n    if (!unidadeMap.has(unidade)) {\n      unidadeMap.set(unidade, []);\n    }\n    unidadeMap.get(unidade).push(item);\n  });\n  \n  doc.text(`Total de Unidades Afetadas: ${unidadeMap.size}`, 20, startY + 15);\n  doc.text(`Total de Registros de Não Conformidade: ${data.length}`, 20, startY + 25);\n  \n  // Create table with detailed information\n  const tableData = data.map(item => [\n    item.unidadeInspecionada || 'N/A',\n    item.departamento || 'N/A', \n    item.naoConformidade || 'N/A',\n    item.descricaoNaoConformidade || 'N/A',\n    item.dataInspecao ? new Date(item.dataInspecao).toLocaleDateString('pt-BR') : 'N/A',\n    item.delegadoCorregedor || 'N/A',\n    item.statusPrazo || 'N/A',\n    item.dataFimRegularizacao ? new Date(item.dataFimRegularizacao).toLocaleDateString('pt-BR') : 'Não definida'\n  ]);\n\n  autoTable(doc, {\n    head: [['Unidade Policial', 'Departamento', 'Não Conformidade', 'Descrição da Não Conformidade', 'Data da Inspeção', 'Delegado Corregedor', 'Status do Prazo', 'Data Fim Regularização']],\n    body: tableData,\n    startY: startY + 40,\n    styles: { \n      fontSize: 6, \n      cellPadding: 2,\n      overflow: 'linebreak'\n    },\n    headStyles: { \n      fillColor: [30, 64, 175],\n      textColor: [255, 255, 255],\n      fontStyle: 'bold'\n    },\n    columnStyles: {\n      0: { cellWidth: 25 }, // Unidade\n      1: { cellWidth: 15 }, // Departamento\n      2: { cellWidth: 25 }, // Não Conformidade\n      3: { cellWidth: 40 }, // Descrição\n      4: { cellWidth: 15 }, // Data Inspeção\n      5: { cellWidth: 20 }, // Delegado\n      6: { cellWidth: 15 }, // Status\n      7: { cellWidth: 15 }  // Data Fim\n    }\n  });\n};\n","size_bytes":13046},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string = 'GET',\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutos em vez de Infinity para permitir atualizações\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1457},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport DashboardGeneral from \"@/components/dashboard-general\";\nimport Reports from \"@/components/reports\";\nimport RelatorioPorUnidade from \"@/components/relatorio-por-unidade\";\n// Gallery removida temporariamente\nimport Deadlines from \"@/components/deadlines\";\nimport Normalization from \"@/components/normalization\";\nimport NormalizacaoDocs from \"@/components/normalizacao-docs\";\nimport StatusRegularizacao from \"@/components/controle-prazos\";\nimport AdminUpload from \"@/components/admin-upload\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Dashboard() {\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [filters, setFilters] = useState({});\n\n  // Real data is loaded automatically from Excel files in the backend\n\n  const { data: inspections = [], isLoading } = useQuery({\n    queryKey: ['/api/inspections'],\n  });\n\n  const { data: reportData } = useQuery({\n    queryKey: ['/api/reports/data', filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value && value !== '') {\n          if (Array.isArray(value)) {\n            value.forEach(v => params.append(key, v));\n          } else {\n            params.append(key, String(value));\n          }\n        }\n      });\n      // Add cache busting parameter\n      params.append('_t', Date.now().toString());\n      const response = await fetch(`/api/reports/data?${params}`);\n      return response.json();\n    },\n    enabled: !!Object.keys(filters).length || true, // Always fetch data\n    staleTime: 0, // Always fetch fresh data\n    gcTime: 0, // Don't cache data\n  });\n\n  const renderActiveTab = () => {\n    // Use filtered data from reportData when available, otherwise fall back to inspections\n    const filteredData = reportData?.inspections || inspections;\n    \n    switch (activeTab) {\n      case 'dashboard':\n        return <DashboardGeneral data={filteredData as any[]} reportData={reportData} filters={filters} onFilterChange={setFilters} />;\n      case 'reports':\n        return <Reports data={filteredData as any[]} reportData={reportData} filters={filters} onFilterChange={setFilters} />;\n      case 'unidade':\n        return <RelatorioPorUnidade data={filteredData as any[]} />;\n\n      case 'deadlines':\n        return <Deadlines data={filteredData as any[]} />;\n      case 'normalization':\n        return <Normalization data={filteredData as any[]} reportData={reportData} />;\n      case 'docs-legais':\n        return <NormalizacaoDocs />;\n      case 'status-regularizacao':\n        return <StatusRegularizacao />;\n      case 'admin':\n        return <AdminUpload />;\n      default:\n        return <DashboardGeneral data={filteredData as any[]} reportData={reportData} filters={filters} onFilterChange={setFilters} />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-police-blue mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Carregando dados...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header \n        activeTab={activeTab} \n        onTabChange={setActiveTab} \n      />\n      <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        {renderActiveTab()}\n      </main>\n    </div>\n  );\n}\n","size_bytes":3614},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useAuth } from \"@/lib/auth\";\nimport { User, Lock, LogIn, AlertCircle } from \"lucide-react\";\nimport policeBadge from \"@assets/R-removebg-preview_1753188946424.png\";\n\nexport default function LoginPage() {\n  const [credentials, setCredentials] = useState({ username: '', password: '' });\n  const [error, setError] = useState('');\n  const { login, loading } = useAuth();\n\n  const handleLogin = async () => {\n    setError('');\n    try {\n      const result = await login(credentials.username, credentials.password);\n      if (!result.success) {\n        setError(result.message || 'Erro ao fazer login');\n      }\n    } catch (err) {\n      setError('Erro de conexão');\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleLogin();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-black flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <img \n            src={policeBadge} \n            alt=\"Brasão Polícia Civil BA\" \n            className=\"mx-auto h-20 w-auto\"\n          />\n          <h2 className=\"mt-6 text-2xl font-bold text-white leading-tight\">\n            Sistema de Gerenciamento dos Indicadores de Inspeção nas Unidades da Polícia Civil do Estado da Bahia\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-300\">\n            ASTEC - CORREPOL\n          </p>\n        </div>\n        \n        <Card className=\"bg-white shadow-xl\">\n          <CardContent className=\"p-8 space-y-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Usuário\n                </Label>\n                <Input\n                  type=\"text\"\n                  value={credentials.username}\n                  onChange={(e) => setCredentials({...credentials, username: e.target.value})}\n                  onKeyPress={handleKeyPress}\n                  className=\"w-full\"\n                  placeholder=\"Digite seu usuário\"\n                />\n              </div>\n              \n              <div>\n                <Label className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                  <Lock className=\"w-4 h-4 mr-2\" />\n                  Senha\n                </Label>\n                <Input\n                  type=\"password\"\n                  value={credentials.password}\n                  onChange={(e) => setCredentials({...credentials, password: e.target.value})}\n                  onKeyPress={handleKeyPress}\n                  className=\"w-full\"\n                  placeholder=\"Digite sua senha\"\n                />\n              </div>\n            </div>\n            \n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <Button\n              onClick={handleLogin}\n              disabled={loading}\n              className=\"w-full bg-police-blue hover:bg-blue-700\"\n            >\n              {loading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Autenticando...\n                </>\n              ) : (\n                <>\n                  <LogIn className=\"w-4 h-4 mr-2\" />\n                  Entrar\n                </>\n              )}\n            </Button>\n            \n            <div className=\"text-center\">\n              <p className=\"text-xs text-gray-500\">\n                Acesso restrito a servidores autorizados\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4225},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}