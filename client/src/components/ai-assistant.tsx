import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import {
  MessageCircle,
  X,
  Send,
  Bot,
  User,
  Minimize2,
  Maximize2,
  Trash2,
  Loader2
} from "lucide-react";

interface Message {
  id: string;
  role: "user" | "assistant";
  content: string;
  timestamp: Date;
}

interface AIAssistantProps {
  context?: string;
}

export default function AIAssistant({ context }: AIAssistantProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      role: "assistant",
      content: "Ol√°! Sou o assistente virtual do Sistema de Inspe√ß√£o da PCBA. Como posso ajud√°-lo hoje?",
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  const contextualSuggestions = [
    "Como consultar prazos de regulariza√ß√£o?",
    "Explicar status de n√£o conformidade",
    "Como fazer upload de dados?",
    "Gerar relat√≥rio por unidade",
    "O que significa CVLI?",
    "Como ativar autentica√ß√£o 2FA?",
    "Explicar n√≠veis de acesso no sistema",
    "Como exportar dados para Excel?"
  ];

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage("");
    setIsLoading(true);

    setTimeout(() => {
      const assistantResponse: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: generateResponse(inputMessage, context),
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantResponse]);
      setIsLoading(false);
    }, 1000);
  };

  const generateResponse = (query: string, ctx?: string): string => {
    const lowerQuery = query.toLowerCase();

    if (lowerQuery.includes("2fa") || lowerQuery.includes("dois fatores") || lowerQuery.includes("autentica√ß√£o")) {
      return "üîê A autentica√ß√£o de dois fatores (2FA) adiciona uma camada extra de seguran√ßa. Para ativar:\n\n1. Acesse a aba 'Administra√ß√£o'\n2. Clique em 'Configurar 2FA'\n3. Escaneie o QR Code com um app autenticador (Google Authenticator, Authy, etc.)\n4. Digite o c√≥digo de 6 d√≠gitos para confirmar\n\nAp√≥s ativado, voc√™ precisar√° inserir um c√≥digo a cada login.";
    }

    if (lowerQuery.includes("n√≠vel") || lowerQuery.includes("acesso") || lowerQuery.includes("permiss√£o")) {
      return "üë• O sistema possui diferentes n√≠veis de acesso:\n\n‚Ä¢ Visitante: Visualiza√ß√£o de relat√≥rios p√∫blicos\n‚Ä¢ Operador: Consulta completa de dados\n‚Ä¢ Gestor: Edi√ß√£o e aprova√ß√£o de registros\n‚Ä¢ Administrador: Acesso total, incluindo upload de dados e configura√ß√µes\n\nContate o administrador do sistema para solicitar mudan√ßas de permiss√£o.";
    }

    if (lowerQuery.includes("excel") || lowerQuery.includes("exportar") || lowerQuery.includes("download")) {
      return "üìä Para exportar dados para Excel:\n\n1. Acesse qualquer relat√≥rio ou tabela\n2. Aplique os filtros desejados\n3. Clique no bot√£o 'Exportar' no canto superior direito\n4. Escolha o formato (Excel, CSV ou PDF)\n\nOs dados ser√£o baixados com todos os filtros aplicados.";
    }

    if (lowerQuery.includes("prazo") || lowerQuery.includes("regulariza√ß√£o")) {
      return "üìÖ Para consultar prazos de regulariza√ß√£o:\n\nAcesse a aba 'Prazos' no menu principal. L√° voc√™ encontrar√°:\n‚Ä¢ Prazos ativos\n‚Ä¢ Prazos pr√≥ximos do vencimento (amarelo)\n‚Ä¢ Prazos expirados (vermelho)\n‚Ä¢ Organiza√ß√£o por unidade policial\n\nVoc√™ pode filtrar por departamento, per√≠odo e status.";
    }

    if (lowerQuery.includes("n√£o conformidade") || lowerQuery.includes("status")) {
      return "‚ö†Ô∏è As n√£o conformidades s√£o classificadas por:\n\n‚Ä¢ Criticidade: Alta, M√©dia, Baixa\n‚Ä¢ Status de prazo: 'Dentro do prazo', 'Pr√≥ximo do vencimento' ou 'Prazo expirado'\n‚Ä¢ Tipo: Estrutural, Documental, Operacional\n\nVoc√™ pode filtrar por qualquer desses crit√©rios nos relat√≥rios.";
    }

    if (lowerQuery.includes("upload") || lowerQuery.includes("carregar")) {
      return "üì§ Para fazer upload de dados:\n\n1. Acesse a aba 'Administra√ß√£o'\n2. Clique em 'Upload de Dados'\n3. Selecione o tipo de dados (Inspe√ß√µes, Prazos, etc.)\n4. Escolha o arquivo Excel\n5. Confirme o upload\n\n‚ö†Ô∏è Apenas administradores podem realizar uploads. O arquivo deve seguir o modelo padr√£o.";
    }

    if (lowerQuery.includes("relat√≥rio") || lowerQuery.includes("relatorio")) {
      return "üìã Para gerar relat√≥rios:\n\n1. Acesse a aba 'Relat√≥rios'\n2. Selecione o tipo de relat√≥rio\n3. Aplique filtros: ano, departamento, unidade, per√≠odo\n4. Clique em 'Gerar Relat√≥rio'\n5. Exporte em PDF, Excel ou visualize online\n\nOs relat√≥rios incluem gr√°ficos e an√°lises detalhadas.";
    }

    if (lowerQuery.includes("cvli")) {
      return "üîç CVLI (Crimes Violentos Letais Intencionais)\n\nAgrupa:\n‚Ä¢ Homic√≠dios dolosos\n‚Ä¢ Latroc√≠nios\n‚Ä¢ Les√µes corporais seguidas de morte\n\n√â um indicador-chave para an√°lise de seguran√ßa p√∫blica e est√° dispon√≠vel no dashboard CVLI.";
    }

    if (lowerQuery.includes("milae") || lowerQuery.includes("mpe")) {
      return "‚öñÔ∏è MILAE sem IP\n\nRefere-se a boletins de ocorr√™ncia encaminhados ao Minist√©rio P√∫blico que ainda n√£o tiveram inqu√©rito policial instaurado.\n\nNa aba 'MILAE sem IP' voc√™ pode:\n‚Ä¢ Visualizar pend√™ncias\n‚Ä¢ Filtrar por unidade e per√≠odo\n‚Ä¢ Acompanhar prazos\n‚Ä¢ Exportar relat√≥rios";
    }

    if (lowerQuery.includes("mapa") || lowerQuery.includes("geolocaliza√ß√£o")) {
      return "üó∫Ô∏è Mapa Interativo\n\nExibe a localiza√ß√£o de todas as unidades policiais com indicadores visuais:\n\nüü¢ Verde: Indicadores baixos/normais\nüü° Amarelo: Indicadores m√©dios/aten√ß√£o\nüü† Laranja: Indicadores altos/preocupantes\nüî¥ Vermelho: Indicadores cr√≠ticos/urgentes\n\nClique em qualquer bolha para ver detalhes da unidade.";
    }

    if (lowerQuery.includes("galeria") || lowerQuery.includes("fotos") || lowerQuery.includes("imagens")) {
      return "üì∏ Galeria de Fotos\n\nVisualize imagens das unidades inspecionadas:\n‚Ä¢ Organizadas por unidade e departamento\n‚Ä¢ Filtros por tipo de inspe√ß√£o\n‚Ä¢ Zoom e visualiza√ß√£o em tela cheia\n‚Ä¢ Download de imagens\n\n√ötil para documenta√ß√£o visual das condi√ß√µes encontradas.";
    }

    if (lowerQuery.includes("dashboard") || lowerQuery.includes("painel")) {
      return "üìä Dashboard Geral\n\nVis√£o consolidada com:\n‚Ä¢ Indicadores principais (KPIs)\n‚Ä¢ Gr√°ficos de tend√™ncias\n‚Ä¢ Distribui√ß√£o por departamento\n‚Ä¢ Alertas de prazos\n‚Ä¢ Comparativos hist√≥ricos\n\nUse os filtros no topo para personalizar a visualiza√ß√£o.";
    }

    if (lowerQuery.includes("ajuda") || lowerQuery.includes("suporte") || lowerQuery.includes("help")) {
      return "üÜò Precisa de ajuda?\n\nEstou aqui para ajudar com:\n‚Ä¢ Navega√ß√£o no sistema\n‚Ä¢ Explica√ß√£o de indicadores\n‚Ä¢ Gera√ß√£o de relat√≥rios\n‚Ä¢ Consulta de prazos\n‚Ä¢ D√∫vidas sobre 2FA\n‚Ä¢ Exporta√ß√£o de dados\n‚Ä¢ Configura√ß√µes de acesso\n\nDigite sua d√∫vida ou escolha uma sugest√£o abaixo!";
    }

    return "Entendi sua pergunta. ü§î\n\nPosso ajudar com:\n‚úì Consultas de prazos e regulariza√ß√£o\n‚úì Status de n√£o conformidades\n‚úì Gera√ß√£o e exporta√ß√£o de relat√≥rios\n‚úì Explica√ß√£o de indicadores (CVLI, MILAE, etc.)\n‚úì Navega√ß√£o no sistema\n‚úì Configura√ß√£o de 2FA\n‚úì N√≠veis de acesso\n\nDigite 'ajuda' para ver todas as op√ß√µes ou escolha uma sugest√£o!";
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInputMessage(suggestion);
  };

  const clearConversation = () => {
    setMessages([
      {
        id: "welcome",
        role: "assistant",
        content: "Conversa limpa. Como posso ajud√°-lo?",
        timestamp: new Date()
      }
    ]);
  };

  if (!isOpen) {
    return (
      <Button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg bg-blue-600 hover:bg-blue-700 z-50"
        size="icon"
      >
        <MessageCircle className="h-6 w-6" />
      </Button>
    );
  }

  return (
    <Card
      className={`fixed bottom-6 right-6 shadow-2xl border-2 border-blue-200 z-50 transition-all duration-300 ${
        isMinimized ? "w-80 h-16" : "w-96 h-[600px]"
      }`}
    >
      <CardHeader className="border-b bg-gradient-to-r from-blue-600 to-blue-700 text-white p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Bot className="h-5 w-5" />
            <CardTitle className="text-base">Assistente Virtual PCBA</CardTitle>
            <Badge className="bg-green-500 text-white">Online</Badge>
          </div>
          <div className="flex items-center space-x-2">
            {!isMinimized && (
              <Button
                variant="ghost"
                size="icon"
                onClick={clearConversation}
                className="h-8 w-8 hover:bg-blue-800"
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            )}
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setIsMinimized(!isMinimized)}
              className="h-8 w-8 hover:bg-blue-800"
            >
              {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
            </Button>
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setIsOpen(false)}
              className="h-8 w-8 hover:bg-blue-800"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>

      {!isMinimized && (
        <CardContent className="p-0 flex flex-col h-[calc(100%-73px)]">
          <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
            <div className="space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}
                >
                  <div
                    className={`flex items-start space-x-2 max-w-[85%] ${
                      message.role === "user" ? "flex-row-reverse space-x-reverse" : ""
                    }`}
                  >
                    <div
                      className={`p-2 rounded-full ${
                        message.role === "user" ? "bg-blue-600" : "bg-slate-200"
                      }`}
                    >
                      {message.role === "user" ? (
                        <User className="h-4 w-4 text-white" />
                      ) : (
                        <Bot className="h-4 w-4 text-slate-700" />
                      )}
                    </div>
                    <div>
                      <div
                        className={`p-3 rounded-lg ${
                          message.role === "user"
                            ? "bg-blue-600 text-white"
                            : "bg-slate-100 text-slate-900"
                        }`}
                      >
                        <p className="text-sm">{message.content}</p>
                      </div>
                      <p className="text-xs text-slate-500 mt-1">
                        {message.timestamp.toLocaleTimeString("pt-BR", {
                          hour: "2-digit",
                          minute: "2-digit"
                        })}
                      </p>
                    </div>
                  </div>
                </div>
              ))}

              {isLoading && (
                <div className="flex justify-start">
                  <div className="flex items-start space-x-2">
                    <div className="p-2 rounded-full bg-slate-200">
                      <Bot className="h-4 w-4 text-slate-700" />
                    </div>
                    <div className="bg-slate-100 p-3 rounded-lg">
                      <Loader2 className="h-4 w-4 animate-spin text-slate-600" />
                    </div>
                  </div>
                </div>
              )}
            </div>

            {messages.length === 1 && (
              <div className="mt-6 space-y-2">
                <p className="text-xs text-slate-600 font-semibold">Sugest√µes:</p>
                {contextualSuggestions.map((suggestion, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    onClick={() => handleSuggestionClick(suggestion)}
                    className="w-full text-left justify-start text-xs h-auto py-2"
                  >
                    {suggestion}
                  </Button>
                ))}
              </div>
            )}
          </ScrollArea>

          <div className="border-t p-4 bg-slate-50">
            <div className="flex space-x-2">
              <Input
                placeholder="Digite sua mensagem..."
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                className="flex-1"
                disabled={isLoading}
              />
              <Button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim() || isLoading}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
              </Button>
            </div>
            <p className="text-xs text-slate-500 mt-2">
              Pressione Enter para enviar
            </p>
          </div>
        </CardContent>
      )}
    </Card>
  );
}
